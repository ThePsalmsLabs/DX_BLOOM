No files changed, compilation skipped

Ran 31 tests for test/unit/ContentRegistry.t.sol:ContentRegistryTest
[FAIL: Error != expected error: BannedWordDetected("get rich quick") != custom error 0x816a9c2b] test_BanPhrase_Success() (gas: 206743)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [38309315] ContentRegistryTest::setUp()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [1138080] → new MockERC20@0x22a7C94543caa0e72439289e039B35a64C79A966
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 5327 bytes of code
    ├─ [47643] MockERC20::mint(0x0000000000000000000000000000000000003001, 1000000000000 [1e12])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000003001, value: 1000000000000 [1e12])
    │   └─ ← [Stop]
    ├─ [1084925] → new MockCommerceProtocol@0xe1796e76a573113CcEDB6D266ae099471117972D
    │   └─ ← [Return] 5419 bytes of code
    ├─ [1503810] → new MockQuoterV2@0xCd54ec27b8c42B24BF58244214B5999334C58959
    │   └─ ← [Return] 6617 bytes of code
    ├─ [0] console::log("Mock dependencies deployed:") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock USDC:", MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock Commerce Protocol:", MockCommerceProtocol: [0xe1796e76a573113CcEDB6D266ae099471117972D]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock Quoter:", MockQuoterV2: [0xCd54ec27b8c42B24BF58244214B5999334C58959]) [staticcall]
    │   └─ ← [Stop]
    ├─ [1710396] → new PriceOracle@0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 8313 bytes of code
    ├─ [4031410] → new CreatorRegistry@0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 19432 bytes of code
    ├─ [5389674] → new ContentRegistry@0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 25995 bytes of code
    ├─ [6590652] → new PayPerView@0x49C602668FE7a8B397255d678684323355754631
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xc89f08b49c068684bf15b77e68611a9f601e70d1f919059510bccd18e691e535, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 32302 bytes of code
    ├─ [7122434] → new SubscriptionManager@0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x1fa68478e710912de24d46d09a1aa735096685a61549eeb0fefb3693b245e69c, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x4a2743f41a15276dad6813e73326037e88c2a55ffdd5c4cab4ea1745629b0d34, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 34738 bytes of code
    ├─ [8485998] → new CommerceProtocolIntegration@0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x501c65bac3e4ac3ac69864ba85559de0249f52b20e002f1e1d1232fd4e169231, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xe2f4eaae4a9751e85a3e4a7b9587827a877f29914755229b07a7b2da98285f70, account: 0x0000000000000000000000000000000000003003, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 41307 bytes of code
    ├─ [0] console::log("Core contracts deployed:") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- CreatorRegistry:", CreatorRegistry: [0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- ContentRegistry:", ContentRegistry: [0x483a0eDa4d8856c61347B0F2e5B84a7af717c308]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- PayPerView:", PayPerView: [0x49C602668FE7a8B397255d678684323355754631]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- SubscriptionManager:", SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- CommerceIntegration:", CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B]) [staticcall]
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25566] ContentRegistry::grantPurchaseRecorderRole(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit RoleGranted(role: 0x9587bd5d64fd9020a2c3c45e38d0e7ca3330d50e4b4dd00bfe972ac5de3bc565, account: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25544] PayPerView::grantPaymentProcessorRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25544] SubscriptionManager::grantSubscriptionProcessorRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0x4a2743f41a15276dad6813e73326037e88c2a55ffdd5c4cab4ea1745629b0d34, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25735] CommerceProtocolIntegration::setPayPerView(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit ContractAddressUpdated(contractName: "PayPerView", oldAddress: 0x0000000000000000000000000000000000000000, newAddress: PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   └─ ← [Stop]
    ├─ [25756] CommerceProtocolIntegration::setSubscriptionManager(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   ├─ emit ContractAddressUpdated(contractName: "SubscriptionManager", oldAddress: 0x0000000000000000000000000000000000000000, newAddress: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   └─ ← [Stop]
    ├─ [0] console::log("Contract permissions configured") [staticcall]
    │   └─ ← [Stop]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000001001, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000001001, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000001001, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000001002, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000001002, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000001002, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000002001, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000002001, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000002001, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000002002, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000002002, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000002002, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [0] console::log("Test users set up with initial balances") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [174504] CreatorRegistry::registerCreator(1000000 [1e6], "Default profile")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000001001, subscriptionPrice: 1000000 [1e6], timestamp: 1, profileData: "Default profile")
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001002)
    │   └─ ← [Return]
    ├─ [150604] CreatorRegistry::registerCreator(1000000 [1e6], "Default profile")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000001002, subscriptionPrice: 1000000 [1e6], timestamp: 1, profileData: "Default profile")
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    └─ ← [Stop]

  [206743] ContentRegistryTest::test_BanPhrase_Success()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [0] VM::expectEmit(false, false, false, true)
    │   └─ ← [Return]
    ├─ emit WordBanned(word: "get rich quick", isPhrase: true)
    ├─ [79564] ContentRegistry::banPhrase("get rich quick")
    │   ├─ emit WordBanned(word: "get rich quick", isPhrase: true)
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [0] VM::expectRevert(custom error 0xc31eb0e0: 816a9c2b00000000000000000000000000000000000000000000000000000000)
    │   └─ ← [Return]
    ├─ [104780] ContentRegistry::registerContent("QmTestHash123456789012345678901234567890123456789", "Sample Article Title", "This will help you get rich quick with crypto", 0, 100000 [1e5], ["blockchain", "tutorial", "beginner"])
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   └─ ← [Revert] BannedWordDetected("get rich quick")
    └─ ← [Revert] Error != expected error: BannedWordDetected("get rich quick") != custom error 0x816a9c2b

[FAIL: next call did not revert as expected] test_BanWord_Success() (gas: 855327)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [38309315] ContentRegistryTest::setUp()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [1138080] → new MockERC20@0x22a7C94543caa0e72439289e039B35a64C79A966
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 5327 bytes of code
    ├─ [47643] MockERC20::mint(0x0000000000000000000000000000000000003001, 1000000000000 [1e12])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000003001, value: 1000000000000 [1e12])
    │   └─ ← [Stop]
    ├─ [1084925] → new MockCommerceProtocol@0xe1796e76a573113CcEDB6D266ae099471117972D
    │   └─ ← [Return] 5419 bytes of code
    ├─ [1503810] → new MockQuoterV2@0xCd54ec27b8c42B24BF58244214B5999334C58959
    │   └─ ← [Return] 6617 bytes of code
    ├─ [0] console::log("Mock dependencies deployed:") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock USDC:", MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock Commerce Protocol:", MockCommerceProtocol: [0xe1796e76a573113CcEDB6D266ae099471117972D]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock Quoter:", MockQuoterV2: [0xCd54ec27b8c42B24BF58244214B5999334C58959]) [staticcall]
    │   └─ ← [Stop]
    ├─ [1710396] → new PriceOracle@0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 8313 bytes of code
    ├─ [4031410] → new CreatorRegistry@0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 19432 bytes of code
    ├─ [5389674] → new ContentRegistry@0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 25995 bytes of code
    ├─ [6590652] → new PayPerView@0x49C602668FE7a8B397255d678684323355754631
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xc89f08b49c068684bf15b77e68611a9f601e70d1f919059510bccd18e691e535, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 32302 bytes of code
    ├─ [7122434] → new SubscriptionManager@0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x1fa68478e710912de24d46d09a1aa735096685a61549eeb0fefb3693b245e69c, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x4a2743f41a15276dad6813e73326037e88c2a55ffdd5c4cab4ea1745629b0d34, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 34738 bytes of code
    ├─ [8485998] → new CommerceProtocolIntegration@0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x501c65bac3e4ac3ac69864ba85559de0249f52b20e002f1e1d1232fd4e169231, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xe2f4eaae4a9751e85a3e4a7b9587827a877f29914755229b07a7b2da98285f70, account: 0x0000000000000000000000000000000000003003, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 41307 bytes of code
    ├─ [0] console::log("Core contracts deployed:") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- CreatorRegistry:", CreatorRegistry: [0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- ContentRegistry:", ContentRegistry: [0x483a0eDa4d8856c61347B0F2e5B84a7af717c308]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- PayPerView:", PayPerView: [0x49C602668FE7a8B397255d678684323355754631]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- SubscriptionManager:", SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- CommerceIntegration:", CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B]) [staticcall]
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25566] ContentRegistry::grantPurchaseRecorderRole(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit RoleGranted(role: 0x9587bd5d64fd9020a2c3c45e38d0e7ca3330d50e4b4dd00bfe972ac5de3bc565, account: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25544] PayPerView::grantPaymentProcessorRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25544] SubscriptionManager::grantSubscriptionProcessorRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0x4a2743f41a15276dad6813e73326037e88c2a55ffdd5c4cab4ea1745629b0d34, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25735] CommerceProtocolIntegration::setPayPerView(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit ContractAddressUpdated(contractName: "PayPerView", oldAddress: 0x0000000000000000000000000000000000000000, newAddress: PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   └─ ← [Stop]
    ├─ [25756] CommerceProtocolIntegration::setSubscriptionManager(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   ├─ emit ContractAddressUpdated(contractName: "SubscriptionManager", oldAddress: 0x0000000000000000000000000000000000000000, newAddress: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   └─ ← [Stop]
    ├─ [0] console::log("Contract permissions configured") [staticcall]
    │   └─ ← [Stop]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000001001, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000001001, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000001001, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000001002, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000001002, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000001002, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000002001, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000002001, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000002001, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000002002, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000002002, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000002002, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [0] console::log("Test users set up with initial balances") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [174504] CreatorRegistry::registerCreator(1000000 [1e6], "Default profile")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000001001, subscriptionPrice: 1000000 [1e6], timestamp: 1, profileData: "Default profile")
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001002)
    │   └─ ← [Return]
    ├─ [150604] CreatorRegistry::registerCreator(1000000 [1e6], "Default profile")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000001002, subscriptionPrice: 1000000 [1e6], timestamp: 1, profileData: "Default profile")
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    └─ ← [Stop]

  [855327] ContentRegistryTest::test_BanWord_Success()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [0] VM::expectEmit(false, false, false, true)
    │   └─ ← [Return]
    ├─ emit WordBanned(word: "spam", isPhrase: false)
    ├─ [30524] ContentRegistry::banWord("spam", false)
    │   ├─ emit WordBanned(word: "spam", isPhrase: false)
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [0] VM::expectRevert(custom error 0xc31eb0e0: 816a9c2b00000000000000000000000000000000000000000000000000000000)
    │   └─ ← [Return]
    ├─ [802213] ContentRegistry::registerContent("QmTestHash123456789012345678901234567890123456789", "This is spam content", "This is a sample article description for testing purposes.", 0, 100000 [1e5], ["blockchain", "tutorial", "beginner"])
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 1, creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789012345678901234567890123456789", title: "This is spam content", category: 0, payPerViewPrice: 100000 [1e5], timestamp: 1)
    │   └─ ← [Return] 1
    └─ ← [Revert] next call did not revert as expected

[PASS] test_GetActiveContentPaginated_Success() (gas: 2163104)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [2177104] ContentRegistryTest::test_GetActiveContentPaginated_Success()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [581398] ContentRegistry::registerContent("QmTestHash123456789", "Content", "Test description", 0, 100000 [1e5], ["test", "content"])
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 1, creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Content", category: 0, payPerViewPrice: 100000 [1e5], timestamp: 1)
    │   └─ ← [Return] 1
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [384898] ContentRegistry::registerContent("QmTestHash123456789", "Content", "Test description", 0, 100000 [1e5], ["test", "content"])
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 2, creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Content", category: 0, payPerViewPrice: 100000 [1e5], timestamp: 1)
    │   └─ ← [Return] 2
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [384898] ContentRegistry::registerContent("QmTestHash123456789", "Content", "Test description", 0, 100000 [1e5], ["test", "content"])
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 3, creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Content", category: 0, payPerViewPrice: 100000 [1e5], timestamp: 1)
    │   └─ ← [Return] 3
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [384898] ContentRegistry::registerContent("QmTestHash123456789", "Content", "Test description", 0, 100000 [1e5], ["test", "content"])
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 4, creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Content", category: 0, payPerViewPrice: 100000 [1e5], timestamp: 1)
    │   └─ ← [Return] 4
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [384898] ContentRegistry::registerContent("QmTestHash123456789", "Content", "Test description", 0, 100000 [1e5], ["test", "content"])
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 5, creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Content", category: 0, payPerViewPrice: 100000 [1e5], timestamp: 1)
    │   └─ ← [Return] 5
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [4804] ContentRegistry::getActiveContentPaginated(0, 3) [staticcall]
    │   └─ ← [Return] [1, 2, 3], 5
    ├─ [6020] ContentRegistry::getActiveContentPaginated(3, 3) [staticcall]
    │   └─ ← [Return] [4, 5], 5
    ├─ [0] VM::assertEq(5, 5) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(3, 3) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(2, 2) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(1, 1) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(2, 2) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(3, 3) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(4, 4) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(5, 5) [staticcall]
    │   └─ ← [Return]
    └─ ← [Stop]

[PASS] test_GetContentByCategory_Success() (gas: 1482958)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [1488558] ContentRegistryTest::test_GetContentByCategory_Success()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [797414] ContentRegistry::registerContent("QmTestHash123456789012345678901234567890123456789", "Article Title", "This is a sample article description for testing purposes.", 0, 100000 [1e5], ["blockchain", "tutorial", "beginner"])
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 1, creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789012345678901234567890123456789", title: "Article Title", category: 0, payPerViewPrice: 100000 [1e5], timestamp: 1)
    │   └─ ← [Return] 1
    ├─ [661090] ContentRegistry::registerContent("QmTestHash987654321098765432109876543210987654321", "Video Title", "This is a sample article description for testing purposes.", 1, 200000 [2e5], ["blockchain", "tutorial", "beginner"])
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 2, creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash987654321098765432109876543210987654321", title: "Video Title", category: 1, payPerViewPrice: 200000 [2e5], timestamp: 1)
    │   └─ ← [Return] 2
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [1811] ContentRegistry::getContentByCategory(0) [staticcall]
    │   └─ ← [Return] [1]
    ├─ [1811] ContentRegistry::getContentByCategory(1) [staticcall]
    │   └─ ← [Return] [2]
    ├─ [0] VM::assertEq(1, 1) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(1, 1) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(1, 1) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(2, 2) [staticcall]
    │   └─ ← [Return]
    └─ ← [Stop]

[PASS] test_GetContentByTag_Success() (gas: 1309277)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [1314877] ContentRegistryTest::test_GetContentByTag_Success()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [720556] ContentRegistry::registerContent("QmTestHash123456789012345678901234567890123456789", "Blockchain Tutorial", "This is a sample article description for testing purposes.", 0, 100000 [1e5], ["blockchain", "tutorial"])
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 1, creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789012345678901234567890123456789", title: "Blockchain Tutorial", category: 0, payPerViewPrice: 100000 [1e5], timestamp: 1)
    │   └─ ← [Return] 1
    ├─ [547956] ContentRegistry::registerContent("QmTestHash987654321098765432109876543210987654321", "Advanced Blockchain", "This is a sample article description for testing purposes.", 0, 200000 [2e5], ["blockchain", "advanced"])
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 2, creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash987654321098765432109876543210987654321", title: "Advanced Blockchain", category: 0, payPerViewPrice: 200000 [2e5], timestamp: 1)
    │   └─ ← [Return] 2
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [7145] ContentRegistry::getContentByTag("blockchain") [staticcall]
    │   └─ ← [Return] [1, 2]
    ├─ [5966] ContentRegistry::getContentByTag("tutorial") [staticcall]
    │   └─ ← [Return] [1]
    ├─ [5966] ContentRegistry::getContentByTag("advanced") [staticcall]
    │   └─ ← [Return] [2]
    ├─ [0] VM::assertEq(2, 2) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(1, 1) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(1, 1) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(1, 1) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(2, 2) [staticcall]
    │   └─ ← [Return]
    └─ ← [Stop]

[PASS] test_GetContent_InvalidId() (gas: 26279)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [26279] ContentRegistryTest::test_GetContent_InvalidId()
    ├─ [0] VM::expectRevert(custom error 0xc31eb0e0: ad64db6a00000000000000000000000000000000000000000000000000000000)
    │   └─ ← [Return]
    ├─ [2980] ContentRegistry::getContent(999) [staticcall]
    │   └─ ← [Revert] InvalidContentId()
    ├─ [0] VM::expectRevert(custom error 0xc31eb0e0: ad64db6a00000000000000000000000000000000000000000000000000000000)
    │   └─ ← [Return]
    ├─ [866] ContentRegistry::getContent(0) [staticcall]
    │   └─ ← [Revert] InvalidContentId()
    └─ ← [Stop]

[PASS] test_GetCreatorActiveContent_Success() (gas: 990451)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [1018751] ContentRegistryTest::test_GetCreatorActiveContent_Success()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [588793] ContentRegistry::registerContent("QmTestHash123456789", "Active Content", "Test description", 0, 100000 [1e5], ["test", "content"])
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 1, creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Active Content", category: 0, payPerViewPrice: 100000 [1e5], timestamp: 1)
    │   └─ ← [Return] 1
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [393817] ContentRegistry::registerContent("QmTestHash123456789", "Inactive Content", "Test description", 0, 200000 [2e5], ["test", "content"])
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 2, creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Inactive Content", category: 0, payPerViewPrice: 200000 [2e5], timestamp: 1)
    │   └─ ← [Return] 2
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [8271] ContentRegistry::updateContent(2, 0, false)
    │   ├─ emit ContentUpdated(contentId: 2, newPrice: 0, isActive: false)
    │   └─ ← [Stop]
    ├─ [4018] ContentRegistry::getCreatorActiveContent(0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] [1]
    ├─ [0] VM::assertEq(1, 1) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(1, 1) [staticcall]
    │   └─ ← [Return]
    └─ ← [Stop]

[PASS] test_GetCreatorContent_Success() (gas: 1424299)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [1432699] ContentRegistryTest::test_GetCreatorContent_Success()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [588031] ContentRegistry::registerContent("QmTestHash123456789", "First Content", "Test description", 0, 100000 [1e5], ["test", "content"])
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 1, creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "First Content", category: 0, payPerViewPrice: 100000 [1e5], timestamp: 1)
    │   └─ ← [Return] 1
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [392293] ContentRegistry::registerContent("QmTestHash123456789", "Second Content", "Test description", 0, 200000 [2e5], ["test", "content"])
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 2, creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Second Content", category: 0, payPerViewPrice: 200000 [2e5], timestamp: 1)
    │   └─ ← [Return] 2
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001002)
    │   └─ ← [Return]
    ├─ [415431] ContentRegistry::registerContent("QmTestHash123456789", "Third Content", "Test description", 0, 100000 [1e5], ["test", "content"])
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001002) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001002, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 3, creator: 0x0000000000000000000000000000000000001002, ipfsHash: "QmTestHash123456789", title: "Third Content", category: 0, payPerViewPrice: 100000 [1e5], timestamp: 1)
    │   └─ ← [Return] 3
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [2215] ContentRegistry::getCreatorContent(0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] [1, 2]
    ├─ [1798] ContentRegistry::getCreatorContent(0x0000000000000000000000000000000000001002) [staticcall]
    │   └─ ← [Return] [3]
    ├─ [0] VM::assertEq(2, 2) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(1, 1) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(2, 2) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(1, 1) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(3, 3) [staticcall]
    │   └─ ← [Return]
    └─ ← [Stop]

[FAIL: panic: failed to convert value into enum type (0x21)] test_GetPlatformStats_Success() (gas: 1505422)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [38309315] ContentRegistryTest::setUp()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [1138080] → new MockERC20@0x22a7C94543caa0e72439289e039B35a64C79A966
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 5327 bytes of code
    ├─ [47643] MockERC20::mint(0x0000000000000000000000000000000000003001, 1000000000000 [1e12])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000003001, value: 1000000000000 [1e12])
    │   └─ ← [Stop]
    ├─ [1084925] → new MockCommerceProtocol@0xe1796e76a573113CcEDB6D266ae099471117972D
    │   └─ ← [Return] 5419 bytes of code
    ├─ [1503810] → new MockQuoterV2@0xCd54ec27b8c42B24BF58244214B5999334C58959
    │   └─ ← [Return] 6617 bytes of code
    ├─ [0] console::log("Mock dependencies deployed:") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock USDC:", MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock Commerce Protocol:", MockCommerceProtocol: [0xe1796e76a573113CcEDB6D266ae099471117972D]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock Quoter:", MockQuoterV2: [0xCd54ec27b8c42B24BF58244214B5999334C58959]) [staticcall]
    │   └─ ← [Stop]
    ├─ [1710396] → new PriceOracle@0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 8313 bytes of code
    ├─ [4031410] → new CreatorRegistry@0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 19432 bytes of code
    ├─ [5389674] → new ContentRegistry@0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 25995 bytes of code
    ├─ [6590652] → new PayPerView@0x49C602668FE7a8B397255d678684323355754631
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xc89f08b49c068684bf15b77e68611a9f601e70d1f919059510bccd18e691e535, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 32302 bytes of code
    ├─ [7122434] → new SubscriptionManager@0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x1fa68478e710912de24d46d09a1aa735096685a61549eeb0fefb3693b245e69c, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x4a2743f41a15276dad6813e73326037e88c2a55ffdd5c4cab4ea1745629b0d34, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 34738 bytes of code
    ├─ [8485998] → new CommerceProtocolIntegration@0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x501c65bac3e4ac3ac69864ba85559de0249f52b20e002f1e1d1232fd4e169231, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xe2f4eaae4a9751e85a3e4a7b9587827a877f29914755229b07a7b2da98285f70, account: 0x0000000000000000000000000000000000003003, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 41307 bytes of code
    ├─ [0] console::log("Core contracts deployed:") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- CreatorRegistry:", CreatorRegistry: [0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- ContentRegistry:", ContentRegistry: [0x483a0eDa4d8856c61347B0F2e5B84a7af717c308]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- PayPerView:", PayPerView: [0x49C602668FE7a8B397255d678684323355754631]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- SubscriptionManager:", SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- CommerceIntegration:", CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B]) [staticcall]
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25566] ContentRegistry::grantPurchaseRecorderRole(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit RoleGranted(role: 0x9587bd5d64fd9020a2c3c45e38d0e7ca3330d50e4b4dd00bfe972ac5de3bc565, account: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25544] PayPerView::grantPaymentProcessorRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25544] SubscriptionManager::grantSubscriptionProcessorRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0x4a2743f41a15276dad6813e73326037e88c2a55ffdd5c4cab4ea1745629b0d34, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25735] CommerceProtocolIntegration::setPayPerView(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit ContractAddressUpdated(contractName: "PayPerView", oldAddress: 0x0000000000000000000000000000000000000000, newAddress: PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   └─ ← [Stop]
    ├─ [25756] CommerceProtocolIntegration::setSubscriptionManager(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   ├─ emit ContractAddressUpdated(contractName: "SubscriptionManager", oldAddress: 0x0000000000000000000000000000000000000000, newAddress: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   └─ ← [Stop]
    ├─ [0] console::log("Contract permissions configured") [staticcall]
    │   └─ ← [Stop]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000001001, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000001001, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000001001, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000001002, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000001002, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000001002, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000002001, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000002001, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000002001, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000002002, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000002002, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000002002, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [0] console::log("Test users set up with initial balances") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [174504] CreatorRegistry::registerCreator(1000000 [1e6], "Default profile")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000001001, subscriptionPrice: 1000000 [1e6], timestamp: 1, profileData: "Default profile")
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001002)
    │   └─ ← [Return]
    ├─ [150604] CreatorRegistry::registerCreator(1000000 [1e6], "Default profile")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000001002, subscriptionPrice: 1000000 [1e6], timestamp: 1, profileData: "Default profile")
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    └─ ← [Stop]

  [1505422] ContentRegistryTest::test_GetPlatformStats_Success()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [792781] ContentRegistry::registerContent("QmTestHash123456789012345678901234567890123456789", "Article", "This is a sample article description for testing purposes.", 0, 100000 [1e5], ["blockchain", "tutorial", "beginner"])
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 1, creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789012345678901234567890123456789", title: "Article", category: 0, payPerViewPrice: 100000 [1e5], timestamp: 1)
    │   └─ ← [Return] 1
    ├─ [656457] ContentRegistry::registerContent("QmTestHash987654321098765432109876543210987654321", "Video", "This is a sample article description for testing purposes.", 1, 200000 [2e5], ["blockchain", "tutorial", "beginner"])
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 2, creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash987654321098765432109876543210987654321", title: "Video", category: 1, payPerViewPrice: 200000 [2e5], timestamp: 1)
    │   └─ ← [Return] 2
    ├─ [8271] ContentRegistry::updateContent(2, 0, false)
    │   ├─ emit ContentUpdated(contentId: 2, newPrice: 0, isActive: false)
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [25867] ContentRegistry::getPlatformStats() [staticcall]
    │   └─ ← [Revert] panic: failed to convert value into enum type (0x21)
    └─ ← [Revert] panic: failed to convert value into enum type (0x21)

[PASS] test_PauseUnpause_Success() (gas: 1019684)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [1045184] ContentRegistryTest::test_PauseUnpause_Success()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [588574] ContentRegistry::registerContent("QmTestHash123456789", "Sample content", "Test description", 0, 100000 [1e5], ["test", "content"])
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 1, creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Sample content", category: 0, payPerViewPrice: 100000 [1e5], timestamp: 1)
    │   └─ ← [Return] 1
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [24188] ContentRegistry::pause()
    │   ├─ emit Paused(account: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [0] VM::expectRevert(custom error 0xf4844814)
    │   └─ ← [Return]
    ├─ [8933] ContentRegistry::registerContent("QmTestHash987654321098765432109876543210987654321", "New Content", "This is a sample article description for testing purposes.", 0, 100000 [1e5], ["blockchain", "tutorial", "beginner"])
    │   └─ ← [Revert] EnforcedPause()
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [2263] ContentRegistry::unpause()
    │   ├─ emit Unpaused(account: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [390007] ContentRegistry::registerContent("QmTestHash123456789", "New Content", "Test description", 0, 100000 [1e5], ["test", "content"])
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 2, creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "New Content", category: 0, payPerViewPrice: 100000 [1e5], timestamp: 1)
    │   └─ ← [Return] 2
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    └─ ← [Stop]

[PASS] test_RecordPurchase_InactiveContent() (gas: 583236)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [648536] ContentRegistryTest::test_RecordPurchase_InactiveContent()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [588574] ContentRegistry::registerContent("QmTestHash123456789", "Sample content", "Test description", 0, 100000 [1e5], ["test", "content"])
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 1, creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Sample content", category: 0, payPerViewPrice: 100000 [1e5], timestamp: 1)
    │   └─ ← [Return] 1
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [8271] ContentRegistry::updateContent(1, 0, false)
    │   ├─ emit ContentUpdated(contentId: 1, newPrice: 0, isActive: false)
    │   └─ ← [Stop]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [27566] ContentRegistry::grantPurchaseRecorderRole(ContentRegistryTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496])
    │   ├─ emit RoleGranted(role: 0x9587bd5d64fd9020a2c3c45e38d0e7ca3330d50e4b4dd00bfe972ac5de3bc565, account: ContentRegistryTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [0] VM::expectRevert(custom error 0xc31eb0e0: 74e73b6d00000000000000000000000000000000000000000000000000000000)
    │   └─ ← [Return]
    ├─ [1577] ContentRegistry::recordPurchase(1, 0x0000000000000000000000000000000000002001)
    │   └─ ← [Revert] ContentNotActive()
    └─ ← [Stop]

[PASS] test_RecordPurchase_OnlyAuthorized() (gas: 626164)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [628964] ContentRegistryTest::test_RecordPurchase_OnlyAuthorized()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [588574] ContentRegistry::registerContent("QmTestHash123456789", "Sample content", "Test description", 0, 100000 [1e5], ["test", "content"])
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 1, creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Sample content", category: 0, payPerViewPrice: 100000 [1e5], timestamp: 1)
    │   └─ ← [Return] 1
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [0] VM::expectRevert(custom error 0xf4844814)
    │   └─ ← [Return]
    ├─ [3465] ContentRegistry::recordPurchase(1, 0x0000000000000000000000000000000000002001)
    │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x0000000000000000000000000000000000002001, 0x9587bd5d64fd9020a2c3c45e38d0e7ca3330d50e4b4dd00bfe972ac5de3bc565)
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [10649] ContentRegistry::getContent(1) [staticcall]
    │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Sample content", description: "Test description", category: 0, payPerViewPrice: 100000 [1e5], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["test", "content"], isReported: false, reportCount: 0 })
    ├─ [0] VM::assertEq(0, 0) [staticcall]
    │   └─ ← [Return]
    └─ ← [Stop]

[PASS] test_RecordPurchase_Success() (gas: 724346)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [727146] ContentRegistryTest::test_RecordPurchase_Success()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [588574] ContentRegistry::registerContent("QmTestHash123456789", "Sample content", "Test description", 0, 100000 [1e5], ["test", "content"])
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 1, creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Sample content", category: 0, payPerViewPrice: 100000 [1e5], timestamp: 1)
    │   └─ ← [Return] 1
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [27566] ContentRegistry::grantPurchaseRecorderRole(ContentRegistryTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496])
    │   ├─ emit RoleGranted(role: 0x9587bd5d64fd9020a2c3c45e38d0e7ca3330d50e4b4dd00bfe972ac5de3bc565, account: ContentRegistryTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [0] VM::expectEmit(true, true, false, true)
    │   └─ ← [Return]
    ├─ emit ContentPurchased(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, price: 100000 [1e5], timestamp: 1)
    ├─ [68825] ContentRegistry::recordPurchase(1, 0x0000000000000000000000000000000000002001)
    │   ├─ emit ContentPurchased(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, price: 100000 [1e5], timestamp: 1)
    │   └─ ← [Stop]
    ├─ [10649] ContentRegistry::getContent(1) [staticcall]
    │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Sample content", description: "Test description", category: 0, payPerViewPrice: 100000 [1e5], isActive: true, createdAt: 1, purchaseCount: 1, tags: ["test", "content"], isReported: false, reportCount: 0 })
    ├─ [0] VM::assertEq(1, 1) [staticcall]
    │   └─ ← [Return]
    └─ ← [Stop]

[PASS] test_RegisterContent_BoundaryValues() (gas: 1438708)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [1444308] ContentRegistryTest::test_RegisterContent_BoundaryValues()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [800523] ContentRegistry::registerContent("QmTestHash123456789012345678901234567890123456789", "Min Price Content", "This is a sample article description for testing purposes.", 0, 10000 [1e4], ["blockchain", "tutorial", "beginner"])
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 1, creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789012345678901234567890123456789", title: "Min Price Content", category: 0, payPerViewPrice: 10000 [1e4], timestamp: 1)
    │   └─ ← [Return] 1
    ├─ [580123] ContentRegistry::registerContent("QmTestHash987654321098765432109876543210987654321", "Max Price Content", "This is a sample article description for testing purposes.", 0, 50000000 [5e7], ["blockchain", "tutorial", "beginner"])
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 2, creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash987654321098765432109876543210987654321", title: "Max Price Content", category: 0, payPerViewPrice: 50000000 [5e7], timestamp: 1)
    │   └─ ← [Return] 2
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [12703] ContentRegistry::getContent(1) [staticcall]
    │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789012345678901234567890123456789", title: "Min Price Content", description: "This is a sample article description for testing purposes.", category: 0, payPerViewPrice: 10000 [1e4], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["blockchain", "tutorial", "beginner"], isReported: false, reportCount: 0 })
    ├─ [0] VM::assertEq(10000 [1e4], 10000 [1e4]) [staticcall]
    │   └─ ← [Return]
    ├─ [12703] ContentRegistry::getContent(2) [staticcall]
    │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash987654321098765432109876543210987654321", title: "Max Price Content", description: "This is a sample article description for testing purposes.", category: 0, payPerViewPrice: 50000000 [5e7], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["blockchain", "tutorial", "beginner"], isReported: false, reportCount: 0 })
    ├─ [0] VM::assertEq(50000000 [5e7], 50000000 [5e7]) [staticcall]
    │   └─ ← [Return]
    └─ ← [Stop]

[FAIL: panic: failed to convert value into enum type (0x21)] test_RegisterContent_CreatorNotRegistered() (gas: 74399)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [38309315] ContentRegistryTest::setUp()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [1138080] → new MockERC20@0x22a7C94543caa0e72439289e039B35a64C79A966
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 5327 bytes of code
    ├─ [47643] MockERC20::mint(0x0000000000000000000000000000000000003001, 1000000000000 [1e12])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000003001, value: 1000000000000 [1e12])
    │   └─ ← [Stop]
    ├─ [1084925] → new MockCommerceProtocol@0xe1796e76a573113CcEDB6D266ae099471117972D
    │   └─ ← [Return] 5419 bytes of code
    ├─ [1503810] → new MockQuoterV2@0xCd54ec27b8c42B24BF58244214B5999334C58959
    │   └─ ← [Return] 6617 bytes of code
    ├─ [0] console::log("Mock dependencies deployed:") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock USDC:", MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock Commerce Protocol:", MockCommerceProtocol: [0xe1796e76a573113CcEDB6D266ae099471117972D]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock Quoter:", MockQuoterV2: [0xCd54ec27b8c42B24BF58244214B5999334C58959]) [staticcall]
    │   └─ ← [Stop]
    ├─ [1710396] → new PriceOracle@0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 8313 bytes of code
    ├─ [4031410] → new CreatorRegistry@0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 19432 bytes of code
    ├─ [5389674] → new ContentRegistry@0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 25995 bytes of code
    ├─ [6590652] → new PayPerView@0x49C602668FE7a8B397255d678684323355754631
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xc89f08b49c068684bf15b77e68611a9f601e70d1f919059510bccd18e691e535, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 32302 bytes of code
    ├─ [7122434] → new SubscriptionManager@0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x1fa68478e710912de24d46d09a1aa735096685a61549eeb0fefb3693b245e69c, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x4a2743f41a15276dad6813e73326037e88c2a55ffdd5c4cab4ea1745629b0d34, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 34738 bytes of code
    ├─ [8485998] → new CommerceProtocolIntegration@0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x501c65bac3e4ac3ac69864ba85559de0249f52b20e002f1e1d1232fd4e169231, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xe2f4eaae4a9751e85a3e4a7b9587827a877f29914755229b07a7b2da98285f70, account: 0x0000000000000000000000000000000000003003, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 41307 bytes of code
    ├─ [0] console::log("Core contracts deployed:") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- CreatorRegistry:", CreatorRegistry: [0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- ContentRegistry:", ContentRegistry: [0x483a0eDa4d8856c61347B0F2e5B84a7af717c308]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- PayPerView:", PayPerView: [0x49C602668FE7a8B397255d678684323355754631]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- SubscriptionManager:", SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- CommerceIntegration:", CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B]) [staticcall]
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25566] ContentRegistry::grantPurchaseRecorderRole(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit RoleGranted(role: 0x9587bd5d64fd9020a2c3c45e38d0e7ca3330d50e4b4dd00bfe972ac5de3bc565, account: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25544] PayPerView::grantPaymentProcessorRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25544] SubscriptionManager::grantSubscriptionProcessorRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0x4a2743f41a15276dad6813e73326037e88c2a55ffdd5c4cab4ea1745629b0d34, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25735] CommerceProtocolIntegration::setPayPerView(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit ContractAddressUpdated(contractName: "PayPerView", oldAddress: 0x0000000000000000000000000000000000000000, newAddress: PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   └─ ← [Stop]
    ├─ [25756] CommerceProtocolIntegration::setSubscriptionManager(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   ├─ emit ContractAddressUpdated(contractName: "SubscriptionManager", oldAddress: 0x0000000000000000000000000000000000000000, newAddress: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   └─ ← [Stop]
    ├─ [0] console::log("Contract permissions configured") [staticcall]
    │   └─ ← [Stop]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000001001, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000001001, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000001001, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000001002, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000001002, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000001002, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000002001, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000002001, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000002001, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000002002, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000002002, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000002002, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [0] console::log("Test users set up with initial balances") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [174504] CreatorRegistry::registerCreator(1000000 [1e6], "Default profile")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000001001, subscriptionPrice: 1000000 [1e6], timestamp: 1, profileData: "Default profile")
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001002)
    │   └─ ← [Return]
    ├─ [150604] CreatorRegistry::registerCreator(1000000 [1e6], "Default profile")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000001002, subscriptionPrice: 1000000 [1e6], timestamp: 1, profileData: "Default profile")
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    └─ ← [Stop]

  [74399] ContentRegistryTest::test_RegisterContent_CreatorNotRegistered()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [0] VM::expectRevert(custom error 0xc31eb0e0: 2bad89bb00000000000000000000000000000000000000000000000000000000)
    │   └─ ← [Return]
    ├─ [19160] ContentRegistry::registerContent("QmTestHash123456789012345678901234567890123456789", "Sample Article Title", "This is a sample article description for testing purposes.", 0, 100000 [1e5], ["blockchain", "tutorial", "beginner"])
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] false
    │   └─ ← [Revert] CreatorNotRegistered()
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [37867] ContentRegistry::getPlatformStats() [staticcall]
    │   └─ ← [Revert] panic: failed to convert value into enum type (0x21)
    └─ ← [Revert] panic: failed to convert value into enum type (0x21)

[FAIL: panic: failed to convert value into enum type (0x21)] test_RegisterContent_DifferentCategories() (gas: 5039870)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [38309315] ContentRegistryTest::setUp()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [1138080] → new MockERC20@0x22a7C94543caa0e72439289e039B35a64C79A966
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 5327 bytes of code
    ├─ [47643] MockERC20::mint(0x0000000000000000000000000000000000003001, 1000000000000 [1e12])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000003001, value: 1000000000000 [1e12])
    │   └─ ← [Stop]
    ├─ [1084925] → new MockCommerceProtocol@0xe1796e76a573113CcEDB6D266ae099471117972D
    │   └─ ← [Return] 5419 bytes of code
    ├─ [1503810] → new MockQuoterV2@0xCd54ec27b8c42B24BF58244214B5999334C58959
    │   └─ ← [Return] 6617 bytes of code
    ├─ [0] console::log("Mock dependencies deployed:") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock USDC:", MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock Commerce Protocol:", MockCommerceProtocol: [0xe1796e76a573113CcEDB6D266ae099471117972D]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock Quoter:", MockQuoterV2: [0xCd54ec27b8c42B24BF58244214B5999334C58959]) [staticcall]
    │   └─ ← [Stop]
    ├─ [1710396] → new PriceOracle@0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 8313 bytes of code
    ├─ [4031410] → new CreatorRegistry@0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 19432 bytes of code
    ├─ [5389674] → new ContentRegistry@0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 25995 bytes of code
    ├─ [6590652] → new PayPerView@0x49C602668FE7a8B397255d678684323355754631
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xc89f08b49c068684bf15b77e68611a9f601e70d1f919059510bccd18e691e535, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 32302 bytes of code
    ├─ [7122434] → new SubscriptionManager@0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x1fa68478e710912de24d46d09a1aa735096685a61549eeb0fefb3693b245e69c, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x4a2743f41a15276dad6813e73326037e88c2a55ffdd5c4cab4ea1745629b0d34, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 34738 bytes of code
    ├─ [8485998] → new CommerceProtocolIntegration@0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x501c65bac3e4ac3ac69864ba85559de0249f52b20e002f1e1d1232fd4e169231, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xe2f4eaae4a9751e85a3e4a7b9587827a877f29914755229b07a7b2da98285f70, account: 0x0000000000000000000000000000000000003003, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 41307 bytes of code
    ├─ [0] console::log("Core contracts deployed:") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- CreatorRegistry:", CreatorRegistry: [0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- ContentRegistry:", ContentRegistry: [0x483a0eDa4d8856c61347B0F2e5B84a7af717c308]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- PayPerView:", PayPerView: [0x49C602668FE7a8B397255d678684323355754631]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- SubscriptionManager:", SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- CommerceIntegration:", CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B]) [staticcall]
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25566] ContentRegistry::grantPurchaseRecorderRole(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit RoleGranted(role: 0x9587bd5d64fd9020a2c3c45e38d0e7ca3330d50e4b4dd00bfe972ac5de3bc565, account: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25544] PayPerView::grantPaymentProcessorRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25544] SubscriptionManager::grantSubscriptionProcessorRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0x4a2743f41a15276dad6813e73326037e88c2a55ffdd5c4cab4ea1745629b0d34, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25735] CommerceProtocolIntegration::setPayPerView(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit ContractAddressUpdated(contractName: "PayPerView", oldAddress: 0x0000000000000000000000000000000000000000, newAddress: PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   └─ ← [Stop]
    ├─ [25756] CommerceProtocolIntegration::setSubscriptionManager(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   ├─ emit ContractAddressUpdated(contractName: "SubscriptionManager", oldAddress: 0x0000000000000000000000000000000000000000, newAddress: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   └─ ← [Stop]
    ├─ [0] console::log("Contract permissions configured") [staticcall]
    │   └─ ← [Stop]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000001001, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000001001, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000001001, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000001002, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000001002, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000001002, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000002001, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000002001, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000002001, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000002002, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000002002, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000002002, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [0] console::log("Test users set up with initial balances") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [174504] CreatorRegistry::registerCreator(1000000 [1e6], "Default profile")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000001001, subscriptionPrice: 1000000 [1e6], timestamp: 1, profileData: "Default profile")
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001002)
    │   └─ ← [Return]
    ├─ [150604] CreatorRegistry::registerCreator(1000000 [1e6], "Default profile")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000001002, subscriptionPrice: 1000000 [1e6], timestamp: 1, profileData: "Default profile")
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    └─ ← [Stop]

  [5039870] ContentRegistryTest::test_RegisterContent_DifferentCategories()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [802809] ContentRegistry::registerContent("QmTestHash123456789012345678901234567890123456789", "Sample Article Title", "This is a sample article description for testing purposes.", 0, 100000 [1e5], ["blockchain", "tutorial", "beginner"])
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 1, creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789012345678901234567890123456789", title: "Sample Article Title", category: 0, payPerViewPrice: 100000 [1e5], timestamp: 1)
    │   └─ ← [Return] 1
    ├─ [12703] ContentRegistry::getContent(1) [staticcall]
    │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789012345678901234567890123456789", title: "Sample Article Title", description: "This is a sample article description for testing purposes.", category: 0, payPerViewPrice: 100000 [1e5], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["blockchain", "tutorial", "beginner"], isReported: false, reportCount: 0 })
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [1811] ContentRegistry::getContentByCategory(0) [staticcall]
    │   └─ ← [Return] [1]
    ├─ [0] VM::assertEq(1, 1) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(1, 1) [staticcall]
    │   └─ ← [Return]
    ├─ [666009] ContentRegistry::registerContent("QmTestHash123456789012345678901234567890123456789", "Sample Article Title", "This is a sample article description for testing purposes.", 1, 100000 [1e5], ["blockchain", "tutorial", "beginner"])
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 2, creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789012345678901234567890123456789", title: "Sample Article Title", category: 1, payPerViewPrice: 100000 [1e5], timestamp: 1)
    │   └─ ← [Return] 2
    ├─ [12703] ContentRegistry::getContent(2) [staticcall]
    │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789012345678901234567890123456789", title: "Sample Article Title", description: "This is a sample article description for testing purposes.", category: 1, payPerViewPrice: 100000 [1e5], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["blockchain", "tutorial", "beginner"], isReported: false, reportCount: 0 })
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [1811] ContentRegistry::getContentByCategory(1) [staticcall]
    │   └─ ← [Return] [2]
    ├─ [0] VM::assertEq(1, 1) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(2, 2) [staticcall]
    │   └─ ← [Return]
    ├─ [666009] ContentRegistry::registerContent("QmTestHash123456789012345678901234567890123456789", "Sample Article Title", "This is a sample article description for testing purposes.", 2, 100000 [1e5], ["blockchain", "tutorial", "beginner"])
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 3, creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789012345678901234567890123456789", title: "Sample Article Title", category: 2, payPerViewPrice: 100000 [1e5], timestamp: 1)
    │   └─ ← [Return] 3
    ├─ [12703] ContentRegistry::getContent(3) [staticcall]
    │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789012345678901234567890123456789", title: "Sample Article Title", description: "This is a sample article description for testing purposes.", category: 2, payPerViewPrice: 100000 [1e5], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["blockchain", "tutorial", "beginner"], isReported: false, reportCount: 0 })
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [1811] ContentRegistry::getContentByCategory(2) [staticcall]
    │   └─ ← [Return] [3]
    ├─ [0] VM::assertEq(1, 1) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(3, 3) [staticcall]
    │   └─ ← [Return]
    ├─ [666009] ContentRegistry::registerContent("QmTestHash123456789012345678901234567890123456789", "Sample Article Title", "This is a sample article description for testing purposes.", 3, 100000 [1e5], ["blockchain", "tutorial", "beginner"])
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 4, creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789012345678901234567890123456789", title: "Sample Article Title", category: 3, payPerViewPrice: 100000 [1e5], timestamp: 1)
    │   └─ ← [Return] 4
    ├─ [12703] ContentRegistry::getContent(4) [staticcall]
    │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789012345678901234567890123456789", title: "Sample Article Title", description: "This is a sample article description for testing purposes.", category: 3, payPerViewPrice: 100000 [1e5], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["blockchain", "tutorial", "beginner"], isReported: false, reportCount: 0 })
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [1811] ContentRegistry::getContentByCategory(3) [staticcall]
    │   └─ ← [Return] [4]
    ├─ [0] VM::assertEq(1, 1) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(4, 4) [staticcall]
    │   └─ ← [Return]
    ├─ [666009] ContentRegistry::registerContent("QmTestHash123456789012345678901234567890123456789", "Sample Article Title", "This is a sample article description for testing purposes.", 4, 100000 [1e5], ["blockchain", "tutorial", "beginner"])
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 5, creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789012345678901234567890123456789", title: "Sample Article Title", category: 4, payPerViewPrice: 100000 [1e5], timestamp: 1)
    │   └─ ← [Return] 5
    ├─ [12703] ContentRegistry::getContent(5) [staticcall]
    │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789012345678901234567890123456789", title: "Sample Article Title", description: "This is a sample article description for testing purposes.", category: 4, payPerViewPrice: 100000 [1e5], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["blockchain", "tutorial", "beginner"], isReported: false, reportCount: 0 })
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [1811] ContentRegistry::getContentByCategory(4) [staticcall]
    │   └─ ← [Return] [5]
    ├─ [0] VM::assertEq(1, 1) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(5, 5) [staticcall]
    │   └─ ← [Return]
    ├─ [666009] ContentRegistry::registerContent("QmTestHash123456789012345678901234567890123456789", "Sample Article Title", "This is a sample article description for testing purposes.", 5, 100000 [1e5], ["blockchain", "tutorial", "beginner"])
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 6, creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789012345678901234567890123456789", title: "Sample Article Title", category: 5, payPerViewPrice: 100000 [1e5], timestamp: 1)
    │   └─ ← [Return] 6
    ├─ [12703] ContentRegistry::getContent(6) [staticcall]
    │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789012345678901234567890123456789", title: "Sample Article Title", description: "This is a sample article description for testing purposes.", category: 5, payPerViewPrice: 100000 [1e5], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["blockchain", "tutorial", "beginner"], isReported: false, reportCount: 0 })
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [1811] ContentRegistry::getContentByCategory(5) [staticcall]
    │   └─ ← [Return] [6]
    ├─ [0] VM::assertEq(1, 1) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(6, 6) [staticcall]
    │   └─ ← [Return]
    ├─ [666009] ContentRegistry::registerContent("QmTestHash123456789012345678901234567890123456789", "Sample Article Title", "This is a sample article description for testing purposes.", 6, 100000 [1e5], ["blockchain", "tutorial", "beginner"])
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 7, creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789012345678901234567890123456789", title: "Sample Article Title", category: 6, payPerViewPrice: 100000 [1e5], timestamp: 1)
    │   └─ ← [Return] 7
    ├─ [12703] ContentRegistry::getContent(7) [staticcall]
    │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789012345678901234567890123456789", title: "Sample Article Title", description: "This is a sample article description for testing purposes.", category: 6, payPerViewPrice: 100000 [1e5], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["blockchain", "tutorial", "beginner"], isReported: false, reportCount: 0 })
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [1811] ContentRegistry::getContentByCategory(6) [staticcall]
    │   └─ ← [Return] [7]
    ├─ [0] VM::assertEq(1, 1) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(7, 7) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [5867] ContentRegistry::getPlatformStats() [staticcall]
    │   └─ ← [Revert] panic: failed to convert value into enum type (0x21)
    └─ ← [Revert] panic: failed to convert value into enum type (0x21)

[PASS] test_RegisterContent_EmptyTitle() (gas: 36224)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [36224] ContentRegistryTest::test_RegisterContent_EmptyTitle()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [0] VM::expectRevert(custom error 0xc31eb0e0: 8dc6ac0100000000000000000000000000000000000000000000000000000000)
    │   └─ ← [Return]
    ├─ [19308] ContentRegistry::registerContent("QmTestHash123456789012345678901234567890123456789", "", "This is a sample article description for testing purposes.", 0, 100000 [1e5], ["blockchain", "tutorial", "beginner"])
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   └─ ← [Revert] InvalidStringLength()
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    └─ ← [Stop]

[FAIL: next call did not revert as expected] test_RegisterContent_InvalidIPFSHash() (gas: 773549)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [38309315] ContentRegistryTest::setUp()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [1138080] → new MockERC20@0x22a7C94543caa0e72439289e039B35a64C79A966
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 5327 bytes of code
    ├─ [47643] MockERC20::mint(0x0000000000000000000000000000000000003001, 1000000000000 [1e12])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000003001, value: 1000000000000 [1e12])
    │   └─ ← [Stop]
    ├─ [1084925] → new MockCommerceProtocol@0xe1796e76a573113CcEDB6D266ae099471117972D
    │   └─ ← [Return] 5419 bytes of code
    ├─ [1503810] → new MockQuoterV2@0xCd54ec27b8c42B24BF58244214B5999334C58959
    │   └─ ← [Return] 6617 bytes of code
    ├─ [0] console::log("Mock dependencies deployed:") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock USDC:", MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock Commerce Protocol:", MockCommerceProtocol: [0xe1796e76a573113CcEDB6D266ae099471117972D]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock Quoter:", MockQuoterV2: [0xCd54ec27b8c42B24BF58244214B5999334C58959]) [staticcall]
    │   └─ ← [Stop]
    ├─ [1710396] → new PriceOracle@0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 8313 bytes of code
    ├─ [4031410] → new CreatorRegistry@0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 19432 bytes of code
    ├─ [5389674] → new ContentRegistry@0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 25995 bytes of code
    ├─ [6590652] → new PayPerView@0x49C602668FE7a8B397255d678684323355754631
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xc89f08b49c068684bf15b77e68611a9f601e70d1f919059510bccd18e691e535, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 32302 bytes of code
    ├─ [7122434] → new SubscriptionManager@0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x1fa68478e710912de24d46d09a1aa735096685a61549eeb0fefb3693b245e69c, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x4a2743f41a15276dad6813e73326037e88c2a55ffdd5c4cab4ea1745629b0d34, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 34738 bytes of code
    ├─ [8485998] → new CommerceProtocolIntegration@0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x501c65bac3e4ac3ac69864ba85559de0249f52b20e002f1e1d1232fd4e169231, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xe2f4eaae4a9751e85a3e4a7b9587827a877f29914755229b07a7b2da98285f70, account: 0x0000000000000000000000000000000000003003, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 41307 bytes of code
    ├─ [0] console::log("Core contracts deployed:") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- CreatorRegistry:", CreatorRegistry: [0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- ContentRegistry:", ContentRegistry: [0x483a0eDa4d8856c61347B0F2e5B84a7af717c308]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- PayPerView:", PayPerView: [0x49C602668FE7a8B397255d678684323355754631]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- SubscriptionManager:", SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- CommerceIntegration:", CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B]) [staticcall]
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25566] ContentRegistry::grantPurchaseRecorderRole(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit RoleGranted(role: 0x9587bd5d64fd9020a2c3c45e38d0e7ca3330d50e4b4dd00bfe972ac5de3bc565, account: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25544] PayPerView::grantPaymentProcessorRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25544] SubscriptionManager::grantSubscriptionProcessorRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0x4a2743f41a15276dad6813e73326037e88c2a55ffdd5c4cab4ea1745629b0d34, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25735] CommerceProtocolIntegration::setPayPerView(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit ContractAddressUpdated(contractName: "PayPerView", oldAddress: 0x0000000000000000000000000000000000000000, newAddress: PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   └─ ← [Stop]
    ├─ [25756] CommerceProtocolIntegration::setSubscriptionManager(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   ├─ emit ContractAddressUpdated(contractName: "SubscriptionManager", oldAddress: 0x0000000000000000000000000000000000000000, newAddress: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   └─ ← [Stop]
    ├─ [0] console::log("Contract permissions configured") [staticcall]
    │   └─ ← [Stop]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000001001, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000001001, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000001001, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000001002, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000001002, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000001002, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000002001, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000002001, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000002001, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000002002, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000002002, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000002002, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [0] console::log("Test users set up with initial balances") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [174504] CreatorRegistry::registerCreator(1000000 [1e6], "Default profile")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000001001, subscriptionPrice: 1000000 [1e6], timestamp: 1, profileData: "Default profile")
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001002)
    │   └─ ← [Return]
    ├─ [150604] CreatorRegistry::registerCreator(1000000 [1e6], "Default profile")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000001002, subscriptionPrice: 1000000 [1e6], timestamp: 1, profileData: "Default profile")
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    └─ ← [Stop]

  [773549] ContentRegistryTest::test_RegisterContent_InvalidIPFSHash()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [0] VM::expectRevert(custom error 0xc31eb0e0: dcdb6d0200000000000000000000000000000000000000000000000000000000)
    │   └─ ← [Return]
    ├─ [758083] ContentRegistry::registerContent("invalid", "Sample Article Title", "This is a sample article description for testing purposes.", 0, 100000 [1e5], ["blockchain", "tutorial", "beginner"])
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 1, creator: 0x0000000000000000000000000000000000001001, ipfsHash: "invalid", title: "Sample Article Title", category: 0, payPerViewPrice: 100000 [1e5], timestamp: 1)
    │   └─ ← [Return] 1
    └─ ← [Revert] next call did not revert as expected

[PASS] test_RegisterContent_PriceTooHigh() (gas: 36668)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [36668] ContentRegistryTest::test_RegisterContent_PriceTooHigh()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [0] VM::expectRevert(custom error 0xc31eb0e0: 00bfc92100000000000000000000000000000000000000000000000000000000)
    │   └─ ← [Return]
    ├─ [19451] ContentRegistry::registerContent("QmTestHash123456789012345678901234567890123456789", "Sample Article Title", "This is a sample article description for testing purposes.", 0, 50000001 [5e7], ["blockchain", "tutorial", "beginner"])
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   └─ ← [Revert] InvalidPrice()
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    └─ ← [Stop]

[PASS] test_RegisterContent_PriceTooLow() (gas: 36701)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [36701] ContentRegistryTest::test_RegisterContent_PriceTooLow()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [0] VM::expectRevert(custom error 0xc31eb0e0: 00bfc92100000000000000000000000000000000000000000000000000000000)
    │   └─ ← [Return]
    ├─ [19440] ContentRegistry::registerContent("QmTestHash123456789012345678901234567890123456789", "Sample Article Title", "This is a sample article description for testing purposes.", 0, 9999, ["blockchain", "tutorial", "beginner"])
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   └─ ← [Revert] InvalidPrice()
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    └─ ← [Stop]

[FAIL: panic: failed to convert value into enum type (0x21)] test_RegisterContent_Success() (gas: 906289)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [38309315] ContentRegistryTest::setUp()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [1138080] → new MockERC20@0x22a7C94543caa0e72439289e039B35a64C79A966
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 5327 bytes of code
    ├─ [47643] MockERC20::mint(0x0000000000000000000000000000000000003001, 1000000000000 [1e12])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000003001, value: 1000000000000 [1e12])
    │   └─ ← [Stop]
    ├─ [1084925] → new MockCommerceProtocol@0xe1796e76a573113CcEDB6D266ae099471117972D
    │   └─ ← [Return] 5419 bytes of code
    ├─ [1503810] → new MockQuoterV2@0xCd54ec27b8c42B24BF58244214B5999334C58959
    │   └─ ← [Return] 6617 bytes of code
    ├─ [0] console::log("Mock dependencies deployed:") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock USDC:", MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock Commerce Protocol:", MockCommerceProtocol: [0xe1796e76a573113CcEDB6D266ae099471117972D]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock Quoter:", MockQuoterV2: [0xCd54ec27b8c42B24BF58244214B5999334C58959]) [staticcall]
    │   └─ ← [Stop]
    ├─ [1710396] → new PriceOracle@0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 8313 bytes of code
    ├─ [4031410] → new CreatorRegistry@0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 19432 bytes of code
    ├─ [5389674] → new ContentRegistry@0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 25995 bytes of code
    ├─ [6590652] → new PayPerView@0x49C602668FE7a8B397255d678684323355754631
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xc89f08b49c068684bf15b77e68611a9f601e70d1f919059510bccd18e691e535, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 32302 bytes of code
    ├─ [7122434] → new SubscriptionManager@0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x1fa68478e710912de24d46d09a1aa735096685a61549eeb0fefb3693b245e69c, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x4a2743f41a15276dad6813e73326037e88c2a55ffdd5c4cab4ea1745629b0d34, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 34738 bytes of code
    ├─ [8485998] → new CommerceProtocolIntegration@0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x501c65bac3e4ac3ac69864ba85559de0249f52b20e002f1e1d1232fd4e169231, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xe2f4eaae4a9751e85a3e4a7b9587827a877f29914755229b07a7b2da98285f70, account: 0x0000000000000000000000000000000000003003, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 41307 bytes of code
    ├─ [0] console::log("Core contracts deployed:") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- CreatorRegistry:", CreatorRegistry: [0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- ContentRegistry:", ContentRegistry: [0x483a0eDa4d8856c61347B0F2e5B84a7af717c308]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- PayPerView:", PayPerView: [0x49C602668FE7a8B397255d678684323355754631]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- SubscriptionManager:", SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- CommerceIntegration:", CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B]) [staticcall]
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25566] ContentRegistry::grantPurchaseRecorderRole(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit RoleGranted(role: 0x9587bd5d64fd9020a2c3c45e38d0e7ca3330d50e4b4dd00bfe972ac5de3bc565, account: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25544] PayPerView::grantPaymentProcessorRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25544] SubscriptionManager::grantSubscriptionProcessorRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0x4a2743f41a15276dad6813e73326037e88c2a55ffdd5c4cab4ea1745629b0d34, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25735] CommerceProtocolIntegration::setPayPerView(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit ContractAddressUpdated(contractName: "PayPerView", oldAddress: 0x0000000000000000000000000000000000000000, newAddress: PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   └─ ← [Stop]
    ├─ [25756] CommerceProtocolIntegration::setSubscriptionManager(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   ├─ emit ContractAddressUpdated(contractName: "SubscriptionManager", oldAddress: 0x0000000000000000000000000000000000000000, newAddress: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   └─ ← [Stop]
    ├─ [0] console::log("Contract permissions configured") [staticcall]
    │   └─ ← [Stop]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000001001, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000001001, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000001001, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000001002, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000001002, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000001002, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000002001, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000002001, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000002001, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000002002, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000002002, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000002002, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [0] console::log("Test users set up with initial balances") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [174504] CreatorRegistry::registerCreator(1000000 [1e6], "Default profile")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000001001, subscriptionPrice: 1000000 [1e6], timestamp: 1, profileData: "Default profile")
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001002)
    │   └─ ← [Return]
    ├─ [150604] CreatorRegistry::registerCreator(1000000 [1e6], "Default profile")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000001002, subscriptionPrice: 1000000 [1e6], timestamp: 1, profileData: "Default profile")
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    └─ ← [Stop]

  [906289] ContentRegistryTest::test_RegisterContent_Success()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [0] VM::expectEmit(true, true, false, true)
    │   └─ ← [Return]
    ├─ emit ContentRegistered(contentId: 1, creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789012345678901234567890123456789", title: "Sample Article Title", category: 0, payPerViewPrice: 100000 [1e5], timestamp: 1)
    ├─ [802809] ContentRegistry::registerContent("QmTestHash123456789012345678901234567890123456789", "Sample Article Title", "This is a sample article description for testing purposes.", 0, 100000 [1e5], ["blockchain", "tutorial", "beginner"])
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 1, creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789012345678901234567890123456789", title: "Sample Article Title", category: 0, payPerViewPrice: 100000 [1e5], timestamp: 1)
    │   └─ ← [Return] 1
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(1, 1) [staticcall]
    │   └─ ← [Return]
    ├─ [12703] ContentRegistry::getContent(1) [staticcall]
    │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789012345678901234567890123456789", title: "Sample Article Title", description: "This is a sample article description for testing purposes.", category: 0, payPerViewPrice: 100000 [1e5], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["blockchain", "tutorial", "beginner"], isReported: false, reportCount: 0 })
    ├─ [0] VM::assertEq(0x0000000000000000000000000000000000001001, 0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(100000 [1e5], 100000 [1e5]) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(1, 1) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(0, 0) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertFalse(false) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(0, 0) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(3, 3) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [1798] ContentRegistry::getCreatorContent(0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] [1]
    ├─ [0] VM::assertEq(1, 1) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(1, 1) [staticcall]
    │   └─ ← [Return]
    ├─ [1811] ContentRegistry::getContentByCategory(0) [staticcall]
    │   └─ ← [Return] [1]
    ├─ [0] VM::assertEq(1, 1) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(1, 1) [staticcall]
    │   └─ ← [Return]
    ├─ [6728] ContentRegistry::getContentByTag("blockchain") [staticcall]
    │   └─ ← [Return] [1]
    ├─ [0] VM::assertEq(1, 1) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(1, 1) [staticcall]
    │   └─ ← [Return]
    ├─ [29867] ContentRegistry::getPlatformStats() [staticcall]
    │   └─ ← [Revert] panic: failed to convert value into enum type (0x21)
    └─ ← [Revert] panic: failed to convert value into enum type (0x21)

[PASS] test_RegisterContent_TooManyTags() (gas: 49316)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [49316] ContentRegistryTest::test_RegisterContent_TooManyTags()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [0] VM::expectRevert(custom error 0xc31eb0e0: 8dc6ac0100000000000000000000000000000000000000000000000000000000)
    │   └─ ← [Return]
    ├─ [25539] ContentRegistry::registerContent("QmTestHash123456789012345678901234567890123456789", "Sample Article Title", "This is a sample article description for testing purposes.", 0, 100000 [1e5], ["tag", "tag", "tag", "tag", "tag", "tag", "tag", "tag", "tag", "tag", "tag"])
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   └─ ← [Revert] InvalidStringLength()
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    └─ ← [Stop]

[PASS] test_ReportContent_AlreadyReported() (gas: 847257)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [852857] ContentRegistryTest::test_ReportContent_AlreadyReported()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [588574] ContentRegistry::registerContent("QmTestHash123456789", "Sample content", "Test description", 0, 100000 [1e5], ["test", "content"])
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 1, creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Sample content", category: 0, payPerViewPrice: 100000 [1e5], timestamp: 1)
    │   └─ ← [Return] 1
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [220596] ContentRegistry::reportContent(1, "First report")
    │   ├─ emit ContentReported(contentId: 1, reporter: 0x0000000000000000000000000000000000002001, reason: "First report", reportId: 1)
    │   └─ ← [Stop]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [0] VM::expectRevert(custom error 0xc31eb0e0: 770c15e300000000000000000000000000000000000000000000000000000000)
    │   └─ ← [Return]
    ├─ [5180] ContentRegistry::reportContent(1, "Second report")
    │   └─ ← [Revert] AlreadyReported()
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [10649] ContentRegistry::getContent(1) [staticcall]
    │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Sample content", description: "Test description", category: 0, payPerViewPrice: 100000 [1e5], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["test", "content"], isReported: true, reportCount: 1 })
    ├─ [0] VM::assertEq(1, 1) [staticcall]
    │   └─ ← [Return]
    └─ ← [Stop]

[PASS] test_ReportContent_AutoModeration() (gas: 1236286)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [1471986] ContentRegistryTest::test_ReportContent_AutoModeration()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [588574] ContentRegistry::registerContent("QmTestHash123456789", "Sample content", "Test description", 0, 100000 [1e5], ["test", "content"])
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 1, creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Sample content", category: 0, payPerViewPrice: 100000 [1e5], timestamp: 1)
    │   └─ ← [Return] 1
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000004000)
    │   └─ ← [Return]
    ├─ [220596] ContentRegistry::reportContent(1, "Report from user")
    │   ├─ emit ContentReported(contentId: 1, reporter: 0x0000000000000000000000000000000000004000, reason: "Report from user", reportId: 1)
    │   └─ ← [Stop]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000004001)
    │   └─ ← [Return]
    ├─ [150096] ContentRegistry::reportContent(1, "Report from user")
    │   ├─ emit ContentReported(contentId: 1, reporter: 0x0000000000000000000000000000000000004001, reason: "Report from user", reportId: 2)
    │   └─ ← [Stop]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000004002)
    │   └─ ← [Return]
    ├─ [150096] ContentRegistry::reportContent(1, "Report from user")
    │   ├─ emit ContentReported(contentId: 1, reporter: 0x0000000000000000000000000000000000004002, reason: "Report from user", reportId: 3)
    │   └─ ← [Stop]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000004003)
    │   └─ ← [Return]
    ├─ [150096] ContentRegistry::reportContent(1, "Report from user")
    │   ├─ emit ContentReported(contentId: 1, reporter: 0x0000000000000000000000000000000000004003, reason: "Report from user", reportId: 4)
    │   └─ ← [Stop]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000004004)
    │   └─ ← [Return]
    ├─ [170188] ContentRegistry::reportContent(1, "Report from user")
    │   ├─ emit ContentDeactivated(contentId: 1, reason: "Auto-moderated due to reports", moderator: ContentRegistry: [0x483a0eDa4d8856c61347B0F2e5B84a7af717c308])
    │   ├─ emit ContentReported(contentId: 1, reporter: 0x0000000000000000000000000000000000004004, reason: "Report from user", reportId: 5)
    │   └─ ← [Stop]
    ├─ [10649] ContentRegistry::getContent(1) [staticcall]
    │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Sample content", description: "Test description", category: 0, payPerViewPrice: 100000 [1e5], isActive: false, createdAt: 1, purchaseCount: 0, tags: ["test", "content"], isReported: true, reportCount: 5 })
    ├─ [0] VM::assertFalse(false) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(5, 5) [staticcall]
    │   └─ ← [Return]
    └─ ← [Stop]

[PASS] test_ReportContent_Success() (gas: 858217)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [863817] ContentRegistryTest::test_ReportContent_Success()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [588574] ContentRegistry::registerContent("QmTestHash123456789", "Sample content", "Test description", 0, 100000 [1e5], ["test", "content"])
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 1, creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Sample content", category: 0, payPerViewPrice: 100000 [1e5], timestamp: 1)
    │   └─ ← [Return] 1
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [0] VM::expectEmit(true, true, false, true)
    │   └─ ← [Return]
    ├─ emit ContentReported(contentId: 1, reporter: 0x0000000000000000000000000000000000002001, reason: "Inappropriate content", reportId: 1)
    ├─ [220596] ContentRegistry::reportContent(1, "Inappropriate content")
    │   ├─ emit ContentReported(contentId: 1, reporter: 0x0000000000000000000000000000000000002001, reason: "Inappropriate content", reportId: 1)
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [10649] ContentRegistry::getContent(1) [staticcall]
    │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Sample content", description: "Test description", category: 0, payPerViewPrice: 100000 [1e5], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["test", "content"], isReported: true, reportCount: 1 })
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(1, 1) [staticcall]
    │   └─ ← [Return]
    ├─ [4885] ContentRegistry::getContentReports(1) [staticcall]
    │   └─ ← [Return] [ContentReport({ contentId: 1, reporter: 0x0000000000000000000000000000000000002001, reason: "Inappropriate content", timestamp: 1, resolved: false, action: "" })]
    ├─ [0] VM::assertEq(1, 1) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(1, 1) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(0x0000000000000000000000000000000000002001, 0x0000000000000000000000000000000000002001) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(1, 1) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertFalse(false) [staticcall]
    │   └─ ← [Return]
    └─ ← [Stop]

[FAIL: panic: failed to convert value into enum type (0x21)] test_ResolveReport_RemoveContent() (gas: 951927)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [38309315] ContentRegistryTest::setUp()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [1138080] → new MockERC20@0x22a7C94543caa0e72439289e039B35a64C79A966
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 5327 bytes of code
    ├─ [47643] MockERC20::mint(0x0000000000000000000000000000000000003001, 1000000000000 [1e12])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000003001, value: 1000000000000 [1e12])
    │   └─ ← [Stop]
    ├─ [1084925] → new MockCommerceProtocol@0xe1796e76a573113CcEDB6D266ae099471117972D
    │   └─ ← [Return] 5419 bytes of code
    ├─ [1503810] → new MockQuoterV2@0xCd54ec27b8c42B24BF58244214B5999334C58959
    │   └─ ← [Return] 6617 bytes of code
    ├─ [0] console::log("Mock dependencies deployed:") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock USDC:", MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock Commerce Protocol:", MockCommerceProtocol: [0xe1796e76a573113CcEDB6D266ae099471117972D]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock Quoter:", MockQuoterV2: [0xCd54ec27b8c42B24BF58244214B5999334C58959]) [staticcall]
    │   └─ ← [Stop]
    ├─ [1710396] → new PriceOracle@0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 8313 bytes of code
    ├─ [4031410] → new CreatorRegistry@0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 19432 bytes of code
    ├─ [5389674] → new ContentRegistry@0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 25995 bytes of code
    ├─ [6590652] → new PayPerView@0x49C602668FE7a8B397255d678684323355754631
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xc89f08b49c068684bf15b77e68611a9f601e70d1f919059510bccd18e691e535, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 32302 bytes of code
    ├─ [7122434] → new SubscriptionManager@0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x1fa68478e710912de24d46d09a1aa735096685a61549eeb0fefb3693b245e69c, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x4a2743f41a15276dad6813e73326037e88c2a55ffdd5c4cab4ea1745629b0d34, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 34738 bytes of code
    ├─ [8485998] → new CommerceProtocolIntegration@0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x501c65bac3e4ac3ac69864ba85559de0249f52b20e002f1e1d1232fd4e169231, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xe2f4eaae4a9751e85a3e4a7b9587827a877f29914755229b07a7b2da98285f70, account: 0x0000000000000000000000000000000000003003, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 41307 bytes of code
    ├─ [0] console::log("Core contracts deployed:") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- CreatorRegistry:", CreatorRegistry: [0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- ContentRegistry:", ContentRegistry: [0x483a0eDa4d8856c61347B0F2e5B84a7af717c308]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- PayPerView:", PayPerView: [0x49C602668FE7a8B397255d678684323355754631]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- SubscriptionManager:", SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- CommerceIntegration:", CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B]) [staticcall]
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25566] ContentRegistry::grantPurchaseRecorderRole(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit RoleGranted(role: 0x9587bd5d64fd9020a2c3c45e38d0e7ca3330d50e4b4dd00bfe972ac5de3bc565, account: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25544] PayPerView::grantPaymentProcessorRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25544] SubscriptionManager::grantSubscriptionProcessorRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0x4a2743f41a15276dad6813e73326037e88c2a55ffdd5c4cab4ea1745629b0d34, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25735] CommerceProtocolIntegration::setPayPerView(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit ContractAddressUpdated(contractName: "PayPerView", oldAddress: 0x0000000000000000000000000000000000000000, newAddress: PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   └─ ← [Stop]
    ├─ [25756] CommerceProtocolIntegration::setSubscriptionManager(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   ├─ emit ContractAddressUpdated(contractName: "SubscriptionManager", oldAddress: 0x0000000000000000000000000000000000000000, newAddress: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   └─ ← [Stop]
    ├─ [0] console::log("Contract permissions configured") [staticcall]
    │   └─ ← [Stop]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000001001, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000001001, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000001001, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000001002, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000001002, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000001002, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000002001, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000002001, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000002001, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000002002, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000002002, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000002002, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [0] console::log("Test users set up with initial balances") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [174504] CreatorRegistry::registerCreator(1000000 [1e6], "Default profile")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000001001, subscriptionPrice: 1000000 [1e6], timestamp: 1, profileData: "Default profile")
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001002)
    │   └─ ← [Return]
    ├─ [150604] CreatorRegistry::registerCreator(1000000 [1e6], "Default profile")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000001002, subscriptionPrice: 1000000 [1e6], timestamp: 1, profileData: "Default profile")
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    └─ ← [Stop]

  [951927] ContentRegistryTest::test_ResolveReport_RemoveContent()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [588574] ContentRegistry::registerContent("QmTestHash123456789", "Sample content", "Test description", 0, 100000 [1e5], ["test", "content"])
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 1, creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Sample content", category: 0, payPerViewPrice: 100000 [1e5], timestamp: 1)
    │   └─ ← [Return] 1
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [220596] ContentRegistry::reportContent(1, "Harmful content")
    │   ├─ emit ContentReported(contentId: 1, reporter: 0x0000000000000000000000000000000000002001, reason: "Harmful content", reportId: 1)
    │   └─ ← [Stop]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [0] VM::expectEmit(true, false, false, true)
    │   └─ ← [Return]
    ├─ emit ContentDeactivated(contentId: 1, reason: "Removed due to moderation", moderator: 0x0000000000000000000000000000000000003001)
    ├─ [68982] ContentRegistry::resolveReport(1, 0, "removed")
    │   ├─ emit ContentDeactivated(contentId: 1, reason: "Removed due to moderation", moderator: 0x0000000000000000000000000000000000003001)
    │   ├─ emit ReportResolved(reportId: 0, contentId: 1, action: "removed", moderator: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [10649] ContentRegistry::getContent(1) [staticcall]
    │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Sample content", description: "Test description", category: 0, payPerViewPrice: 100000 [1e5], isActive: false, createdAt: 1, purchaseCount: 0, tags: ["test", "content"], isReported: true, reportCount: 1 })
    ├─ [0] VM::assertFalse(false) [staticcall]
    │   └─ ← [Return]
    ├─ [29867] ContentRegistry::getPlatformStats() [staticcall]
    │   └─ ← [Revert] panic: failed to convert value into enum type (0x21)
    └─ ← [Revert] panic: failed to convert value into enum type (0x21)

[PASS] test_ResolveReport_Success() (gas: 888655)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [894255] ContentRegistryTest::test_ResolveReport_Success()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [588574] ContentRegistry::registerContent("QmTestHash123456789", "Sample content", "Test description", 0, 100000 [1e5], ["test", "content"])
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 1, creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Sample content", category: 0, payPerViewPrice: 100000 [1e5], timestamp: 1)
    │   └─ ← [Return] 1
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [220596] ContentRegistry::reportContent(1, "Test report")
    │   ├─ emit ContentReported(contentId: 1, reporter: 0x0000000000000000000000000000000000002001, reason: "Test report", reportId: 1)
    │   └─ ← [Stop]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [0] VM::expectEmit(true, true, false, true)
    │   └─ ← [Return]
    ├─ emit ReportResolved(reportId: 0, contentId: 1, action: "ignored", moderator: 0x0000000000000000000000000000000000003001)
    ├─ [48919] ContentRegistry::resolveReport(1, 0, "ignored")
    │   ├─ emit ReportResolved(reportId: 0, contentId: 1, action: "ignored", moderator: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [5136] ContentRegistry::getContentReports(1) [staticcall]
    │   └─ ← [Return] [ContentReport({ contentId: 1, reporter: 0x0000000000000000000000000000000000002001, reason: "Test report", timestamp: 1, resolved: true, action: "ignored" })]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    └─ ← [Stop]

[FAIL: panic: failed to convert value into enum type (0x21)] test_UpdateContent_Deactivation() (gas: 682838)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [38309315] ContentRegistryTest::setUp()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [1138080] → new MockERC20@0x22a7C94543caa0e72439289e039B35a64C79A966
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 5327 bytes of code
    ├─ [47643] MockERC20::mint(0x0000000000000000000000000000000000003001, 1000000000000 [1e12])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000003001, value: 1000000000000 [1e12])
    │   └─ ← [Stop]
    ├─ [1084925] → new MockCommerceProtocol@0xe1796e76a573113CcEDB6D266ae099471117972D
    │   └─ ← [Return] 5419 bytes of code
    ├─ [1503810] → new MockQuoterV2@0xCd54ec27b8c42B24BF58244214B5999334C58959
    │   └─ ← [Return] 6617 bytes of code
    ├─ [0] console::log("Mock dependencies deployed:") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock USDC:", MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock Commerce Protocol:", MockCommerceProtocol: [0xe1796e76a573113CcEDB6D266ae099471117972D]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock Quoter:", MockQuoterV2: [0xCd54ec27b8c42B24BF58244214B5999334C58959]) [staticcall]
    │   └─ ← [Stop]
    ├─ [1710396] → new PriceOracle@0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 8313 bytes of code
    ├─ [4031410] → new CreatorRegistry@0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 19432 bytes of code
    ├─ [5389674] → new ContentRegistry@0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 25995 bytes of code
    ├─ [6590652] → new PayPerView@0x49C602668FE7a8B397255d678684323355754631
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xc89f08b49c068684bf15b77e68611a9f601e70d1f919059510bccd18e691e535, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 32302 bytes of code
    ├─ [7122434] → new SubscriptionManager@0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x1fa68478e710912de24d46d09a1aa735096685a61549eeb0fefb3693b245e69c, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x4a2743f41a15276dad6813e73326037e88c2a55ffdd5c4cab4ea1745629b0d34, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 34738 bytes of code
    ├─ [8485998] → new CommerceProtocolIntegration@0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x501c65bac3e4ac3ac69864ba85559de0249f52b20e002f1e1d1232fd4e169231, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xe2f4eaae4a9751e85a3e4a7b9587827a877f29914755229b07a7b2da98285f70, account: 0x0000000000000000000000000000000000003003, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 41307 bytes of code
    ├─ [0] console::log("Core contracts deployed:") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- CreatorRegistry:", CreatorRegistry: [0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- ContentRegistry:", ContentRegistry: [0x483a0eDa4d8856c61347B0F2e5B84a7af717c308]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- PayPerView:", PayPerView: [0x49C602668FE7a8B397255d678684323355754631]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- SubscriptionManager:", SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- CommerceIntegration:", CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B]) [staticcall]
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25566] ContentRegistry::grantPurchaseRecorderRole(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit RoleGranted(role: 0x9587bd5d64fd9020a2c3c45e38d0e7ca3330d50e4b4dd00bfe972ac5de3bc565, account: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25544] PayPerView::grantPaymentProcessorRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25544] SubscriptionManager::grantSubscriptionProcessorRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0x4a2743f41a15276dad6813e73326037e88c2a55ffdd5c4cab4ea1745629b0d34, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25735] CommerceProtocolIntegration::setPayPerView(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit ContractAddressUpdated(contractName: "PayPerView", oldAddress: 0x0000000000000000000000000000000000000000, newAddress: PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   └─ ← [Stop]
    ├─ [25756] CommerceProtocolIntegration::setSubscriptionManager(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   ├─ emit ContractAddressUpdated(contractName: "SubscriptionManager", oldAddress: 0x0000000000000000000000000000000000000000, newAddress: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   └─ ← [Stop]
    ├─ [0] console::log("Contract permissions configured") [staticcall]
    │   └─ ← [Stop]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000001001, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000001001, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000001001, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000001002, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000001002, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000001002, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000002001, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000002001, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000002001, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000002002, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000002002, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000002002, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [0] console::log("Test users set up with initial balances") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [174504] CreatorRegistry::registerCreator(1000000 [1e6], "Default profile")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000001001, subscriptionPrice: 1000000 [1e6], timestamp: 1, profileData: "Default profile")
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001002)
    │   └─ ← [Return]
    ├─ [150604] CreatorRegistry::registerCreator(1000000 [1e6], "Default profile")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000001002, subscriptionPrice: 1000000 [1e6], timestamp: 1, profileData: "Default profile")
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    └─ ← [Stop]

  [682838] ContentRegistryTest::test_UpdateContent_Deactivation()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [588574] ContentRegistry::registerContent("QmTestHash123456789", "Sample content", "Test description", 0, 100000 [1e5], ["test", "content"])
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 1, creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Sample content", category: 0, payPerViewPrice: 100000 [1e5], timestamp: 1)
    │   └─ ← [Return] 1
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [10649] ContentRegistry::getContent(1) [staticcall]
    │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Sample content", description: "Test description", category: 0, payPerViewPrice: 100000 [1e5], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["test", "content"], isReported: false, reportCount: 0 })
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [0] VM::expectEmit(true, false, false, true)
    │   └─ ← [Return]
    ├─ emit ContentUpdated(contentId: 1, newPrice: 0, isActive: false)
    ├─ [8271] ContentRegistry::updateContent(1, 0, false)
    │   ├─ emit ContentUpdated(contentId: 1, newPrice: 0, isActive: false)
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [10649] ContentRegistry::getContent(1) [staticcall]
    │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Sample content", description: "Test description", category: 0, payPerViewPrice: 100000 [1e5], isActive: false, createdAt: 1, purchaseCount: 0, tags: ["test", "content"], isReported: false, reportCount: 0 })
    ├─ [0] VM::assertFalse(false) [staticcall]
    │   └─ ← [Return]
    ├─ [29867] ContentRegistry::getPlatformStats() [staticcall]
    │   └─ ← [Revert] panic: failed to convert value into enum type (0x21)
    └─ ← [Revert] panic: failed to convert value into enum type (0x21)

[PASS] test_UpdateContent_InvalidPrice() (gas: 625815)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [628615] ContentRegistryTest::test_UpdateContent_InvalidPrice()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [588574] ContentRegistry::registerContent("QmTestHash123456789", "Sample content", "Test description", 0, 100000 [1e5], ["test", "content"])
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 1, creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Sample content", category: 0, payPerViewPrice: 100000 [1e5], timestamp: 1)
    │   └─ ← [Return] 1
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [0] VM::expectRevert(custom error 0xc31eb0e0: 00bfc92100000000000000000000000000000000000000000000000000000000)
    │   └─ ← [Return]
    ├─ [4814] ContentRegistry::updateContent(1, 9999, true)
    │   └─ ← [Revert] InvalidPrice()
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [10649] ContentRegistry::getContent(1) [staticcall]
    │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Sample content", description: "Test description", category: 0, payPerViewPrice: 100000 [1e5], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["test", "content"], isReported: false, reportCount: 0 })
    ├─ [0] VM::assertEq(100000 [1e5], 100000 [1e5]) [staticcall]
    │   └─ ← [Return]
    └─ ← [Stop]

[PASS] test_UpdateContent_OnlyCreator() (gas: 627574)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [630374] ContentRegistryTest::test_UpdateContent_OnlyCreator()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [588574] ContentRegistry::registerContent("QmTestHash123456789", "Sample content", "Test description", 0, 100000 [1e5], ["test", "content"])
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 1, creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Sample content", category: 0, payPerViewPrice: 100000 [1e5], timestamp: 1)
    │   └─ ← [Return] 1
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001002)
    │   └─ ← [Return]
    ├─ [0] VM::expectRevert(custom error 0xc31eb0e0: 8ef0dd5d00000000000000000000000000000000000000000000000000000000)
    │   └─ ← [Return]
    ├─ [4520] ContentRegistry::updateContent(1, 200000 [2e5], true)
    │   └─ ← [Revert] UnauthorizedCreator()
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [10649] ContentRegistry::getContent(1) [staticcall]
    │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Sample content", description: "Test description", category: 0, payPerViewPrice: 100000 [1e5], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["test", "content"], isReported: false, reportCount: 0 })
    ├─ [0] VM::assertEq(100000 [1e5], 100000 [1e5]) [staticcall]
    │   └─ ← [Return]
    └─ ← [Stop]

[PASS] test_UpdateContent_PriceUpdate() (gas: 628478)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [634078] ContentRegistryTest::test_UpdateContent_PriceUpdate()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [588574] ContentRegistry::registerContent("QmTestHash123456789", "Sample content", "Test description", 0, 100000 [1e5], ["test", "content"])
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 1, creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Sample content", category: 0, payPerViewPrice: 100000 [1e5], timestamp: 1)
    │   └─ ← [Return] 1
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [0] VM::expectEmit(true, false, false, true)
    │   └─ ← [Return]
    ├─ emit ContentUpdated(contentId: 1, newPrice: 200000 [2e5], isActive: true)
    ├─ [7503] ContentRegistry::updateContent(1, 200000 [2e5], true)
    │   ├─ emit ContentUpdated(contentId: 1, newPrice: 200000 [2e5], isActive: true)
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [10649] ContentRegistry::getContent(1) [staticcall]
    │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Sample content", description: "Test description", category: 0, payPerViewPrice: 200000 [2e5], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["test", "content"], isReported: false, reportCount: 0 })
    ├─ [0] VM::assertEq(200000 [2e5], 200000 [2e5]) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    └─ ← [Stop]

Suite result: FAILED. 22 passed; 9 failed; 0 skipped; finished in 23.02ms (54.42ms CPU time)

Ran 1 test suite in 364.66ms (23.02ms CPU time): 22 tests passed, 9 failed, 0 skipped (31 total tests)

Failing tests:
Encountered 9 failing tests in test/unit/ContentRegistry.t.sol:ContentRegistryTest
[FAIL: Error != expected error: BannedWordDetected("get rich quick") != custom error 0x816a9c2b] test_BanPhrase_Success() (gas: 206743)
[FAIL: next call did not revert as expected] test_BanWord_Success() (gas: 855327)
[FAIL: panic: failed to convert value into enum type (0x21)] test_GetPlatformStats_Success() (gas: 1505422)
[FAIL: panic: failed to convert value into enum type (0x21)] test_RegisterContent_CreatorNotRegistered() (gas: 74399)
[FAIL: panic: failed to convert value into enum type (0x21)] test_RegisterContent_DifferentCategories() (gas: 5039870)
[FAIL: next call did not revert as expected] test_RegisterContent_InvalidIPFSHash() (gas: 773549)
[FAIL: panic: failed to convert value into enum type (0x21)] test_RegisterContent_Success() (gas: 906289)
[FAIL: panic: failed to convert value into enum type (0x21)] test_ResolveReport_RemoveContent() (gas: 951927)
[FAIL: panic: failed to convert value into enum type (0x21)] test_UpdateContent_Deactivation() (gas: 682838)

Encountered a total of 9 failing tests, 22 tests succeeded
