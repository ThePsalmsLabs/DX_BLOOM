No files changed, compilation skipped

Ran 1 test for test/integration/BusinessScenarios.t.sol:BusinessScenariosTest
[FAIL: OwnableUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496)] setUp() (gas: 0)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Suite result: FAILED. 0 passed; 1 failed; 0 skipped; finished in 17.77ms (0.00ns CPU time)

Ran 1 test for test/unit/CommerceProtocolIntegration.t.sol:CommerceProtocolIntegrationTest
[FAIL: AccessControlUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496, 0x0000000000000000000000000000000000000000000000000000000000000000)] setUp() (gas: 0)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Suite result: FAILED. 0 passed; 1 failed; 0 skipped; finished in 19.38ms (0.00ns CPU time)

Ran 28 tests for test/unit/PriceOracle.t.sol:PriceOracleTest
[PASS] test_ApplySlippage_DifferentPercentages() (gas: 20638)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_ApplySlippage_ExcessiveSlippage() (gas: 9356)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_ApplySlippage_Success() (gas: 10294)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[FAIL: EvmError: Revert] test_GetETHPrice_DifferentAmounts() (gas: 15357)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [15357] PriceOracleTest::test_GetETHPrice_DifferentAmounts()
    ├─ [9162] PriceOracle::getETHPrice(1000000 [1e6])
    │   ├─ [0] 0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x4200000000000000000000000000000000000006, tokenOut: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, amountIn: 1000000000000000000 [1e18], fee: 3000, sqrtPriceLimitX96: 0 }))
    │   │   └─ ← [Stop]
    │   └─ ← [Revert] EvmError: Revert
    └─ ← [Revert] EvmError: Revert

[FAIL: call reverted as expected, but without data] test_GetETHPrice_QuoterFails() (gas: 46226)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [46226] PriceOracleTest::test_GetETHPrice_QuoterFails()
    ├─ [23184] MockQuoterV2::setShouldFailQuote(0x4200000000000000000000000000000000000006, 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, true)
    │   └─ ← [Stop]
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  MockQuoterV2: Quote failed)
    │   └─ ← [Return]
    ├─ [9162] PriceOracle::getETHPrice(100000000 [1e8])
    │   ├─ [0] 0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x4200000000000000000000000000000000000006, tokenOut: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, amountIn: 1000000000000000000 [1e18], fee: 3000, sqrtPriceLimitX96: 0 }))
    │   │   └─ ← [Stop]
    │   └─ ← [Revert] EvmError: Revert
    └─ ← [Revert] call reverted as expected, but without data

[FAIL: EvmError: Revert] test_GetETHPrice_Success() (gas: 14466)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [14466] PriceOracleTest::test_GetETHPrice_Success()
    ├─ [9162] PriceOracle::getETHPrice(100000000 [1e8])
    │   ├─ [0] 0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x4200000000000000000000000000000000000006, tokenOut: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, amountIn: 1000000000000000000 [1e18], fee: 3000, sqrtPriceLimitX96: 0 }))
    │   │   └─ ← [Stop]
    │   └─ ← [Revert] EvmError: Revert
    └─ ← [Revert] EvmError: Revert

[FAIL: EvmError: Revert] test_GetMultipleQuotes_MissingPools() (gas: 44002)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [44002] PriceOracleTest::test_GetMultipleQuotes_MissingPools()
    ├─ [23184] MockQuoterV2::setShouldFailQuote(0x1234567890123456789012345678901234567890, 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, true)
    │   └─ ← [Stop]
    ├─ [3582] MockQuoterV2::setMockPrice(0x1234567890123456789012345678901234567890, 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 3000, 1000000 [1e6])
    │   └─ ← [Stop]
    ├─ [4876] PriceOracle::getMultipleQuotes(0x1234567890123456789012345678901234567890, 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 1000000000000000000 [1e18])
    │   ├─ [0] 0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x1234567890123456789012345678901234567890, tokenOut: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, amountIn: 1000000000000000000 [1e18], fee: 500, sqrtPriceLimitX96: 0 }))
    │   │   └─ ← [Stop]
    │   └─ ← [Revert] EvmError: Revert
    └─ ← [Revert] EvmError: Revert

[FAIL: EvmError: Revert] test_GetMultipleQuotes_Success() (gas: 35177)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [35177] PriceOracleTest::test_GetMultipleQuotes_Success()
    ├─ [6382] MockQuoterV2::setMockPrice(0x4200000000000000000000000000000000000006, 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 500, 1995000000 [1.995e9])
    │   └─ ← [Stop]
    ├─ [3582] MockQuoterV2::setMockPrice(0x4200000000000000000000000000000000000006, 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 3000, 2000000000 [2e9])
    │   └─ ← [Stop]
    ├─ [6382] MockQuoterV2::setMockPrice(0x4200000000000000000000000000000000000006, 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 10000 [1e4], 1990000000 [1.99e9])
    │   └─ ← [Stop]
    ├─ [4876] PriceOracle::getMultipleQuotes(0x4200000000000000000000000000000000000006, 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 1000000000000000000 [1e18])
    │   ├─ [0] 0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x4200000000000000000000000000000000000006, tokenOut: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, amountIn: 1000000000000000000 [1e18], fee: 500, sqrtPriceLimitX96: 0 }))
    │   │   └─ ← [Stop]
    │   └─ ← [Revert] EvmError: Revert
    └─ ← [Revert] EvmError: Revert

[FAIL: EvmError: Revert] test_GetTokenAmountForUSDC_AutoPoolFee() (gas: 19033)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [19033] PriceOracleTest::test_GetTokenAmountForUSDC_AutoPoolFee()
    ├─ [13489] PriceOracle::getTokenAmountForUSDC(0x1234567890123456789012345678901234567890, 25000000 [2.5e7], 0)
    │   ├─ [0] 0x1234567890123456789012345678901234567890::decimals() [staticcall]
    │   │   └─ ← [Stop]
    │   ├─ [0] 0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x1234567890123456789012345678901234567890, tokenOut: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, amountIn: 1000000000000000000 [1e18], fee: 10000 [1e4], sqrtPriceLimitX96: 0 }))
    │   │   └─ ← [Stop]
    │   └─ ← [Revert] EvmError: Revert
    └─ ← [Revert] EvmError: Revert

[FAIL: EvmError: Revert] test_GetTokenAmountForUSDC_Success() (gas: 14012)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [14012] PriceOracleTest::test_GetTokenAmountForUSDC_Success()
    ├─ [8483] PriceOracle::getTokenAmountForUSDC(0x1234567890123456789012345678901234567890, 50000000 [5e7], 3000)
    │   ├─ [0] 0x1234567890123456789012345678901234567890::decimals() [staticcall]
    │   │   └─ ← [Stop]
    │   ├─ [0] 0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x1234567890123456789012345678901234567890, tokenOut: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, amountIn: 1000000000000000000 [1e18], fee: 3000, sqrtPriceLimitX96: 0 }))
    │   │   └─ ← [Stop]
    │   └─ ← [Revert] EvmError: Revert
    └─ ← [Revert] EvmError: Revert

[PASS] test_GetTokenAmountForUSDC_USDCInput() (gas: 10137)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[FAIL: EvmError: Revert] test_GetTokenAmountForUSDC_ViaWETHRoute() (gas: 72470)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [72470] PriceOracleTest::test_GetTokenAmountForUSDC_ViaWETHRoute()
    ├─ [23184] MockQuoterV2::setShouldFailQuote(0x0000000000000000000000000000000000005555, 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, true)
    │   └─ ← [Stop]
    ├─ [23482] MockQuoterV2::setMockPrice(0x0000000000000000000000000000000000005555, 0x4200000000000000000000000000000000000006, 3000, 1000000000000000 [1e15])
    │   └─ ← [Stop]
    ├─ [13489] PriceOracle::getTokenAmountForUSDC(0x0000000000000000000000000000000000005555, 2000000 [2e6], 0)
    │   ├─ [0] 0x0000000000000000000000000000000000005555::decimals() [staticcall]
    │   │   └─ ← [Stop]
    │   ├─ [0] 0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x0000000000000000000000000000000000005555, tokenOut: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, amountIn: 1000000000000000000 [1e18], fee: 10000 [1e4], sqrtPriceLimitX96: 0 }))
    │   │   └─ ← [Stop]
    │   └─ ← [Revert] EvmError: Revert
    └─ ← [Revert] EvmError: Revert

[FAIL: EvmError: Revert] test_GetTokenPrice_AutoPoolFee() (gas: 15487)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [15487] PriceOracleTest::test_GetTokenPrice_AutoPoolFee()
    ├─ [9772] PriceOracle::getTokenPrice(0x4200000000000000000000000000000000000006, 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 500000000000000000 [5e17], 0)
    │   ├─ [0] 0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x4200000000000000000000000000000000000006, tokenOut: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, amountIn: 500000000000000000 [5e17], fee: 3000, sqrtPriceLimitX96: 0 }))
    │   │   └─ ← [Stop]
    │   └─ ← [Revert] EvmError: Revert
    └─ ← [Revert] EvmError: Revert

[FAIL: call reverted as expected, but without data] test_GetTokenPrice_QuoterFails() (gas: 42394)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [42394] PriceOracleTest::test_GetTokenPrice_QuoterFails()
    ├─ [23184] MockQuoterV2::setShouldFailQuote(0x4200000000000000000000000000000000000006, 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, true)
    │   └─ ← [Stop]
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  MockQuoterV2: Quote failed)
    │   └─ ← [Return]
    ├─ [4779] PriceOracle::getTokenPrice(0x4200000000000000000000000000000000000006, 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 1000000000000000000 [1e18], 3000)
    │   ├─ [0] 0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x4200000000000000000000000000000000000006, tokenOut: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, amountIn: 1000000000000000000 [1e18], fee: 3000, sqrtPriceLimitX96: 0 }))
    │   │   └─ ← [Stop]
    │   └─ ← [Revert] EvmError: Revert
    └─ ← [Revert] call reverted as expected, but without data

[FAIL: EvmError: Revert] test_GetTokenPrice_Success() (gas: 10457)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [10457] PriceOracleTest::test_GetTokenPrice_Success()
    ├─ [4779] PriceOracle::getTokenPrice(0x4200000000000000000000000000000000000006, 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 1000000000000000000 [1e18], 3000)
    │   ├─ [0] 0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x4200000000000000000000000000000000000006, tokenOut: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, amountIn: 1000000000000000000 [1e18], fee: 3000, sqrtPriceLimitX96: 0 }))
    │   │   └─ ← [Stop]
    │   └─ ← [Revert] EvmError: Revert
    └─ ← [Revert] EvmError: Revert

[FAIL: EvmError: Revert] test_OptimalPoolFeeDetection() (gas: 15660)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [15660] PriceOracleTest::test_OptimalPoolFeeDetection()
    ├─ [9772] PriceOracle::getTokenPrice(0x4200000000000000000000000000000000000006, 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 1000000000000000000 [1e18], 0)
    │   ├─ [0] 0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x4200000000000000000000000000000000000006, tokenOut: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, amountIn: 1000000000000000000 [1e18], fee: 3000, sqrtPriceLimitX96: 0 }))
    │   │   └─ ← [Stop]
    │   └─ ← [Revert] EvmError: Revert
    └─ ← [Revert] EvmError: Revert

[FAIL: EvmError: Revert] test_PriceCalculation_LargeAmounts() (gas: 14467)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [14467] PriceOracleTest::test_PriceCalculation_LargeAmounts()
    ├─ [9162] PriceOracle::getETHPrice(1000000000000 [1e12])
    │   ├─ [0] 0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x4200000000000000000000000000000000000006, tokenOut: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, amountIn: 1000000000000000000 [1e18], fee: 3000, sqrtPriceLimitX96: 0 }))
    │   │   └─ ← [Stop]
    │   └─ ← [Revert] EvmError: Revert
    └─ ← [Revert] EvmError: Revert

[FAIL: EvmError: Revert] test_PriceCalculation_SmallAmounts() (gas: 14422)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [14422] PriceOracleTest::test_PriceCalculation_SmallAmounts()
    ├─ [9162] PriceOracle::getETHPrice(1)
    │   ├─ [0] 0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x4200000000000000000000000000000000000006, tokenOut: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, amountIn: 1000000000000000000 [1e18], fee: 3000, sqrtPriceLimitX96: 0 }))
    │   │   └─ ← [Stop]
    │   └─ ← [Revert] EvmError: Revert
    └─ ← [Revert] EvmError: Revert

[FAIL: EvmError: Revert] test_PriceCalculation_ZeroAmount() (gas: 14459)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [14459] PriceOracleTest::test_PriceCalculation_ZeroAmount()
    ├─ [9162] PriceOracle::getETHPrice(0)
    │   ├─ [0] 0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x4200000000000000000000000000000000000006, tokenOut: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, amountIn: 1000000000000000000 [1e18], fee: 3000, sqrtPriceLimitX96: 0 }))
    │   │   └─ ← [Stop]
    │   └─ ← [Revert] EvmError: Revert
    └─ ← [Revert] EvmError: Revert

[FAIL: EvmError: Revert] test_PriceConsistency() (gas: 14466)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [14466] PriceOracleTest::test_PriceConsistency()
    ├─ [9162] PriceOracle::getETHPrice(1000000000 [1e9])
    │   ├─ [0] 0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x4200000000000000000000000000000000000006, tokenOut: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, amountIn: 1000000000000000000 [1e18], fee: 3000, sqrtPriceLimitX96: 0 }))
    │   │   └─ ← [Stop]
    │   └─ ← [Revert] EvmError: Revert
    └─ ← [Revert] EvmError: Revert

[PASS] test_SetCustomPoolFee_InvalidFee() (gas: 15022)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_SetCustomPoolFee_OnlyOwner() (gas: 14991)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[FAIL: EvmError: Revert] test_SetCustomPoolFee_Success() (gas: 59868)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [59868] PriceOracleTest::test_SetCustomPoolFee_Success()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [0] VM::expectEmit(true, true, false, true)
    │   └─ ← [Return]
    ├─ emit CustomPoolFeeSet(tokenA: 0x4200000000000000000000000000000000000006, tokenB: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, fee: 500)
    ├─ [27571] PriceOracle::setCustomPoolFee(0x4200000000000000000000000000000000000006, 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 500)
    │   ├─ emit CustomPoolFeeSet(tokenA: 0x4200000000000000000000000000000000000006, tokenB: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, fee: 500)
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [6382] MockQuoterV2::setMockPrice(0x4200000000000000000000000000000000000006, 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 500, 2010000000 [2.01e9])
    │   └─ ← [Stop]
    ├─ [5173] PriceOracle::getTokenPrice(0x4200000000000000000000000000000000000006, 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 1000000000000000000 [1e18], 0)
    │   ├─ [0] 0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x4200000000000000000000000000000000000006, tokenOut: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, amountIn: 1000000000000000000 [1e18], fee: 500, sqrtPriceLimitX96: 0 }))
    │   │   └─ ← [Stop]
    │   └─ ← [Revert] EvmError: Revert
    └─ ← [Revert] EvmError: Revert

[FAIL: EvmError: Revert] test_TokenDecimalHandling() (gas: 15843)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [15843] PriceOracleTest::test_TokenDecimalHandling()
    ├─ [10199] PriceOracle::getTokenAmountForUSDC(0x4200000000000000000000000000000000000006, 2000000000 [2e9], 0)
    │   ├─ [0] 0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x4200000000000000000000000000000000000006, tokenOut: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, amountIn: 1000000000000000000 [1e18], fee: 3000, sqrtPriceLimitX96: 0 }))
    │   │   └─ ← [Stop]
    │   └─ ← [Revert] EvmError: Revert
    └─ ← [Revert] EvmError: Revert

[FAIL: call reverted as expected, but without data] test_UnsupportedTokenPairs() (gas: 22319)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [22319] PriceOracleTest::test_UnsupportedTokenPairs()
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  MockQuoterV2: No liquidity)
    │   └─ ← [Return]
    ├─ [13489] PriceOracle::getTokenAmountForUSDC(0x0000000000000000000000000000000000009999, 100000000 [1e8], 0)
    │   ├─ [0] 0x0000000000000000000000000000000000009999::decimals() [staticcall]
    │   │   └─ ← [Stop]
    │   ├─ [0] 0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x0000000000000000000000000000000000009999, tokenOut: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, amountIn: 1000000000000000000 [1e18], fee: 10000 [1e4], sqrtPriceLimitX96: 0 }))
    │   │   └─ ← [Stop]
    │   └─ ← [Revert] EvmError: Revert
    └─ ← [Revert] call reverted as expected, but without data

[PASS] test_UpdateDefaultSlippage_OnlyOwner() (gas: 17981)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_UpdateDefaultSlippage_Success() (gas: 24276)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_UpdateDefaultSlippage_TooHigh() (gas: 17945)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Suite result: FAILED. 9 passed; 19 failed; 0 skipped; finished in 20.33ms (3.52ms CPU time)

Ran 11 tests for test/integration/CommerceProtocolFlow.t.sol:CommerceProtocolFlowTest
[PASS] testContentId() (gas: 2515)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] testToken() (gas: 2750)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[FAIL: EvmError: Revert] test_CompletePaymentFlow_Success() (gas: 156911)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [156911] CommerceProtocolFlowTest::test_CompletePaymentFlow_Success()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], 1000000000000000000 [1e18])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], value: 1000000000000000000 [1e18])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [108785] CommerceProtocolIntegration::createPaymentIntent(PlatformPaymentRequest({ paymentType: 0, creator: 0x0000000000000000000000000000000000001001, contentId: 1, paymentToken: 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f, maxSlippage: 200, deadline: 3601 }))
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [40649] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Test Content", description: "Test description", category: 0, payPerViewPrice: 2000000 [2e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["test", "content"], isReported: false, reportCount: 0 })
    │   ├─ [10649] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Test Content", description: "Test description", category: 0, payPerViewPrice: 2000000 [2e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["test", "content"], isReported: false, reportCount: 0 })
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(2000000 [2e6]) [staticcall]
    │   │   └─ ← [Return] 50000 [5e4]
    │   ├─ [13909] PriceOracle::getTokenAmountForUSDC(MockERC20: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], 2000000 [2e6], 0)
    │   │   ├─ [2569] MockERC20::decimals() [staticcall]
    │   │   │   └─ ← [Return] 18
    │   │   ├─ [0] 0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f, tokenOut: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, amountIn: 1000000000000000000 [1e18], fee: 10000 [1e4], sqrtPriceLimitX96: 0 }))
    │   │   │   └─ ← [Stop]
    │   │   └─ ← [Revert] EvmError: Revert
    │   └─ ← [Revert] EvmError: Revert
    └─ ← [Revert] EvmError: Revert

[FAIL: EvmError: Revert] test_ConcurrentPaymentIntents_Success() (gas: 191846)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [191846] CommerceProtocolFlowTest::test_ConcurrentPaymentIntents_Success()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], 1000000000000000000 [1e18])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], value: 1000000000000000000 [1e18])
    │   └─ ← [Return] true
    ├─ [25321] MockERC20::approve(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], 20000000 [2e7])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], value: 20000000 [2e7])
    │   └─ ← [Return] true
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [108785] CommerceProtocolIntegration::createPaymentIntent(PlatformPaymentRequest({ paymentType: 0, creator: 0x0000000000000000000000000000000000001001, contentId: 1, paymentToken: 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f, maxSlippage: 200, deadline: 3601 }))
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [40649] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Test Content", description: "Test description", category: 0, payPerViewPrice: 2000000 [2e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["test", "content"], isReported: false, reportCount: 0 })
    │   ├─ [10649] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Test Content", description: "Test description", category: 0, payPerViewPrice: 2000000 [2e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["test", "content"], isReported: false, reportCount: 0 })
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(2000000 [2e6]) [staticcall]
    │   │   └─ ← [Return] 50000 [5e4]
    │   ├─ [13909] PriceOracle::getTokenAmountForUSDC(MockERC20: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], 2000000 [2e6], 0)
    │   │   ├─ [2569] MockERC20::decimals() [staticcall]
    │   │   │   └─ ← [Return] 18
    │   │   ├─ [0] 0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f, tokenOut: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, amountIn: 1000000000000000000 [1e18], fee: 10000 [1e4], sqrtPriceLimitX96: 0 }))
    │   │   │   └─ ← [Stop]
    │   │   └─ ← [Revert] EvmError: Revert
    │   └─ ← [Revert] EvmError: Revert
    └─ ← [Revert] EvmError: Revert

[FAIL: EvmError: Revert] test_CreateContentPaymentIntent_AlternativeToken() (gas: 156872)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [156872] CommerceProtocolFlowTest::test_CreateContentPaymentIntent_AlternativeToken()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], 1000000000000000000 [1e18])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], value: 1000000000000000000 [1e18])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [108785] CommerceProtocolIntegration::createPaymentIntent(PlatformPaymentRequest({ paymentType: 0, creator: 0x0000000000000000000000000000000000001001, contentId: 1, paymentToken: 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f, maxSlippage: 200, deadline: 3601 }))
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [40649] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Test Content", description: "Test description", category: 0, payPerViewPrice: 2000000 [2e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["test", "content"], isReported: false, reportCount: 0 })
    │   ├─ [10649] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Test Content", description: "Test description", category: 0, payPerViewPrice: 2000000 [2e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["test", "content"], isReported: false, reportCount: 0 })
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(2000000 [2e6]) [staticcall]
    │   │   └─ ← [Return] 50000 [5e4]
    │   ├─ [13909] PriceOracle::getTokenAmountForUSDC(MockERC20: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], 2000000 [2e6], 0)
    │   │   ├─ [2569] MockERC20::decimals() [staticcall]
    │   │   │   └─ ← [Return] 18
    │   │   ├─ [0] 0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f, tokenOut: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, amountIn: 1000000000000000000 [1e18], fee: 10000 [1e4], sqrtPriceLimitX96: 0 }))
    │   │   │   └─ ← [Stop]
    │   │   └─ ← [Revert] EvmError: Revert
    │   └─ ← [Revert] EvmError: Revert
    └─ ← [Revert] EvmError: Revert

[FAIL: call reverted as expected, but without data] test_CreatePaymentIntent_InsufficientBalance() (gas: 186902)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [186902] CommerceProtocolFlowTest::test_CreatePaymentIntent_InsufficientBalance()
    ├─ [32543] MockERC20::mint(0x0000000000000000000000000000000000008888, 500000000000000000 [5e17])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000008888, value: 500000000000000000 [5e17])
    │   └─ ← [Stop]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000008888)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], 1000000000000000000 [1e18])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000008888, spender: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], value: 1000000000000000000 [1e18])
    │   └─ ← [Return] true
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000008888)
    │   └─ ← [Return]
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Insufficient token balance)
    │   └─ ← [Return]
    ├─ [106785] CommerceProtocolIntegration::createPaymentIntent(PlatformPaymentRequest({ paymentType: 0, creator: 0x0000000000000000000000000000000000001001, contentId: 1, paymentToken: 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f, maxSlippage: 200, deadline: 3601 }))
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [40649] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Test Content", description: "Test description", category: 0, payPerViewPrice: 2000000 [2e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["test", "content"], isReported: false, reportCount: 0 })
    │   ├─ [10649] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Test Content", description: "Test description", category: 0, payPerViewPrice: 2000000 [2e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["test", "content"], isReported: false, reportCount: 0 })
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(2000000 [2e6]) [staticcall]
    │   │   └─ ← [Return] 50000 [5e4]
    │   ├─ [11909] PriceOracle::getTokenAmountForUSDC(MockERC20: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], 2000000 [2e6], 0)
    │   │   ├─ [569] MockERC20::decimals() [staticcall]
    │   │   │   └─ ← [Return] 18
    │   │   ├─ [0] 0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f, tokenOut: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, amountIn: 1000000000000000000 [1e18], fee: 10000 [1e4], sqrtPriceLimitX96: 0 }))
    │   │   │   └─ ← [Stop]
    │   │   └─ ← [Revert] EvmError: Revert
    │   └─ ← [Revert] EvmError: Revert
    └─ ← [Revert] call reverted as expected, but without data

[FAIL: EvmError: Revert] test_CreateSubscriptionPaymentIntent_NonStandardDecimals() (gas: 90198)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [90198] CommerceProtocolFlowTest::test_CreateSubscriptionPaymentIntent_NonStandardDecimals()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002002)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], 20000000 [2e7])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002002, spender: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], value: 20000000 [2e7])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002002)
    │   └─ ← [Return]
    ├─ [44213] CommerceProtocolIntegration::createPaymentIntent(PlatformPaymentRequest({ paymentType: 1, creator: 0x0000000000000000000000000000000000001002, contentId: 0, paymentToken: 0x2e234DAe75C793f67A35089C9d99245E1C58470b, maxSlippage: 200, deadline: 3601 }))
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001002) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [2946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001002) [staticcall]
    │   │   └─ ← [Return] 10000000 [1e7]
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(10000000 [1e7]) [staticcall]
    │   │   └─ ← [Return] 250000 [2.5e5]
    │   ├─ [13909] PriceOracle::getTokenAmountForUSDC(MockERC20: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], 10000000 [1e7], 0)
    │   │   ├─ [2569] MockERC20::decimals() [staticcall]
    │   │   │   └─ ← [Return] 6
    │   │   ├─ [0] 0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x2e234DAe75C793f67A35089C9d99245E1C58470b, tokenOut: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, amountIn: 1000000 [1e6], fee: 10000 [1e4], sqrtPriceLimitX96: 0 }))
    │   │   │   └─ ← [Stop]
    │   │   └─ ← [Revert] EvmError: Revert
    │   └─ ← [Revert] EvmError: Revert
    └─ ← [Revert] EvmError: Revert

[FAIL: EvmError: Revert] test_ExecutePayment_InvalidSignature() (gas: 156846)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [156846] CommerceProtocolFlowTest::test_ExecutePayment_InvalidSignature()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], 1000000000000000000 [1e18])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], value: 1000000000000000000 [1e18])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [108785] CommerceProtocolIntegration::createPaymentIntent(PlatformPaymentRequest({ paymentType: 0, creator: 0x0000000000000000000000000000000000001001, contentId: 1, paymentToken: 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f, maxSlippage: 200, deadline: 3601 }))
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [40649] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Test Content", description: "Test description", category: 0, payPerViewPrice: 2000000 [2e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["test", "content"], isReported: false, reportCount: 0 })
    │   ├─ [10649] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Test Content", description: "Test description", category: 0, payPerViewPrice: 2000000 [2e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["test", "content"], isReported: false, reportCount: 0 })
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(2000000 [2e6]) [staticcall]
    │   │   └─ ← [Return] 50000 [5e4]
    │   ├─ [13909] PriceOracle::getTokenAmountForUSDC(MockERC20: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], 2000000 [2e6], 0)
    │   │   ├─ [2569] MockERC20::decimals() [staticcall]
    │   │   │   └─ ← [Return] 18
    │   │   ├─ [0] 0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f, tokenOut: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, amountIn: 1000000000000000000 [1e18], fee: 10000 [1e4], sqrtPriceLimitX96: 0 }))
    │   │   │   └─ ← [Stop]
    │   │   └─ ← [Revert] EvmError: Revert
    │   └─ ← [Revert] EvmError: Revert
    └─ ← [Revert] EvmError: Revert

[FAIL: EvmError: Revert] test_OperatorMetrics_Tracking() (gas: 167264)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [167264] CommerceProtocolFlowTest::test_OperatorMetrics_Tracking()
    ├─ [9205] CommerceProtocolIntegration::getOperatorMetrics() [staticcall]
    │   └─ ← [Return] 0, 0, 0, 0
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], 1000000000000000000 [1e18])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], value: 1000000000000000000 [1e18])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [108785] CommerceProtocolIntegration::createPaymentIntent(PlatformPaymentRequest({ paymentType: 0, creator: 0x0000000000000000000000000000000000001001, contentId: 1, paymentToken: 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f, maxSlippage: 200, deadline: 3601 }))
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [40649] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Test Content", description: "Test description", category: 0, payPerViewPrice: 2000000 [2e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["test", "content"], isReported: false, reportCount: 0 })
    │   ├─ [10649] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Test Content", description: "Test description", category: 0, payPerViewPrice: 2000000 [2e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["test", "content"], isReported: false, reportCount: 0 })
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(2000000 [2e6]) [staticcall]
    │   │   └─ ← [Return] 50000 [5e4]
    │   ├─ [13909] PriceOracle::getTokenAmountForUSDC(MockERC20: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], 2000000 [2e6], 0)
    │   │   ├─ [2569] MockERC20::decimals() [staticcall]
    │   │   │   └─ ← [Return] 18
    │   │   ├─ [0] 0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f, tokenOut: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, amountIn: 1000000000000000000 [1e18], fee: 10000 [1e4], sqrtPriceLimitX96: 0 }))
    │   │   │   └─ ← [Stop]
    │   │   └─ ← [Revert] EvmError: Revert
    │   └─ ← [Revert] EvmError: Revert
    └─ ← [Revert] EvmError: Revert

[FAIL: EvmError: Revert] test_PaymentProcessing_Failure() (gas: 156868)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [156868] CommerceProtocolFlowTest::test_PaymentProcessing_Failure()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], 1000000000000000000 [1e18])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], value: 1000000000000000000 [1e18])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [108785] CommerceProtocolIntegration::createPaymentIntent(PlatformPaymentRequest({ paymentType: 0, creator: 0x0000000000000000000000000000000000001001, contentId: 1, paymentToken: 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f, maxSlippage: 200, deadline: 3601 }))
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [40649] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Test Content", description: "Test description", category: 0, payPerViewPrice: 2000000 [2e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["test", "content"], isReported: false, reportCount: 0 })
    │   ├─ [10649] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Test Content", description: "Test description", category: 0, payPerViewPrice: 2000000 [2e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["test", "content"], isReported: false, reportCount: 0 })
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(2000000 [2e6]) [staticcall]
    │   │   └─ ← [Return] 50000 [5e4]
    │   ├─ [13909] PriceOracle::getTokenAmountForUSDC(MockERC20: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], 2000000 [2e6], 0)
    │   │   ├─ [2569] MockERC20::decimals() [staticcall]
    │   │   │   └─ ← [Return] 18
    │   │   ├─ [0] 0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f, tokenOut: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, amountIn: 1000000000000000000 [1e18], fee: 10000 [1e4], sqrtPriceLimitX96: 0 }))
    │   │   │   └─ ← [Stop]
    │   │   └─ ← [Revert] EvmError: Revert
    │   └─ ← [Revert] EvmError: Revert
    └─ ← [Revert] EvmError: Revert

[FAIL: EvmError: Revert] test_SubscriptionFlow_AlternativeToken() (gas: 90217)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [90217] CommerceProtocolFlowTest::test_SubscriptionFlow_AlternativeToken()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002002)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], 5000000000000000000 [5e18])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002002, spender: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], value: 5000000000000000000 [5e18])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002002)
    │   └─ ← [Return]
    ├─ [44213] CommerceProtocolIntegration::createPaymentIntent(PlatformPaymentRequest({ paymentType: 1, creator: 0x0000000000000000000000000000000000001002, contentId: 0, paymentToken: 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f, maxSlippage: 200, deadline: 3601 }))
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001002) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [2946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001002) [staticcall]
    │   │   └─ ← [Return] 10000000 [1e7]
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(10000000 [1e7]) [staticcall]
    │   │   └─ ← [Return] 250000 [2.5e5]
    │   ├─ [13909] PriceOracle::getTokenAmountForUSDC(MockERC20: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], 10000000 [1e7], 0)
    │   │   ├─ [2569] MockERC20::decimals() [staticcall]
    │   │   │   └─ ← [Return] 18
    │   │   ├─ [0] 0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f, tokenOut: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, amountIn: 1000000000000000000 [1e18], fee: 10000 [1e4], sqrtPriceLimitX96: 0 }))
    │   │   │   └─ ← [Stop]
    │   │   └─ ← [Revert] EvmError: Revert
    │   └─ ← [Revert] EvmError: Revert
    └─ ← [Revert] EvmError: Revert

Suite result: FAILED. 2 passed; 9 failed; 0 skipped; finished in 26.66ms (4.82ms CPU time)

Ran 27 tests for test/unit/CreatorRegistry.t.sol:CreatorRegistryTest
[PASS] test_FeeCalculation_Various() (gas: 22719)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_GetPlatformStats_Success() (gas: 658174)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_InvalidCreatorAddress_Handling() (gas: 24945)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_MultipleCreators_Success() (gas: 374027)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_PauseUnpause_Success() (gas: 363645)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_RegisterCreator_AlreadyRegistered() (gas: 197800)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_RegisterCreator_EmptyProfileData() (gas: 27170)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_RegisterCreator_MaximumPrice() (gas: 237865)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_RegisterCreator_MinimumPrice() (gas: 237844)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_RegisterCreator_PriceTooHigh() (gas: 27522)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_RegisterCreator_PriceTooLow() (gas: 31330)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_RegisterCreator_Success() (gas: 259556)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_SetCreatorVerification_OnlyModerator() (gas: 204683)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_SetCreatorVerification_RemoveVerification() (gas: 233062)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_SetCreatorVerification_Success() (gas: 278137)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_UpdateCreatorStats_OnlyPlatformContract() (gas: 197269)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_UpdateCreatorStats_Success() (gas: 350929)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_UpdatePlatformFee_OnlyOwner() (gas: 18041)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_UpdatePlatformFee_Success() (gas: 27544)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_UpdatePlatformFee_TooHigh() (gas: 18028)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[FAIL: assertion failed] test_UpdateProfileData_EmptyData() (gas: 207017)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [207017] CreatorRegistryTest::test_UpdateProfileData_EmptyData()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [179304] CreatorRegistry::registerCreator(1000000 [1e6], "Default profile")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000001001, subscriptionPrice: 1000000 [1e6], timestamp: 1, profileData: "Default profile")
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [0] VM::expectRevert(custom error 0xc31eb0e0: e1e909d000000000000000000000000000000000000000000000000000000000)
    │   └─ ← [Return]
    ├─ [4630] CreatorRegistry::updateProfileData("")
    │   └─ ← [Revert] InvalidProfileData()
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [4334] CreatorRegistry::getCreatorProfile(0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] Creator({ isRegistered: true, subscriptionPrice: 1000000 [1e6], isVerified: false, totalEarnings: 0, contentCount: 0, subscriberCount: 0, registrationTime: 1, profileData: "Default profile", isSuspended: false })
    ├─ [0] VM::assertTrue(false) [staticcall]
    │   └─ ← [Revert] assertion failed
    └─ ← [Revert] assertion failed

[PASS] test_UpdateProfileData_Success() (gas: 252402)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_UpdateSubscriptionPrice_InvalidPrice() (gas: 197620)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_UpdateSubscriptionPrice_NotRegistered() (gas: 21516)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_UpdateSubscriptionPrice_Success() (gas: 207846)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_WithdrawCreatorEarnings_NoEarnings() (gas: 196323)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[FAIL: OwnableUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496)] test_WithdrawCreatorEarnings_Success() (gas: 309865)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [309865] CreatorRegistryTest::test_WithdrawCreatorEarnings_Success()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [179304] CreatorRegistry::registerCreator(1000000 [1e6], "Default profile")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000001001, subscriptionPrice: 1000000 [1e6], timestamp: 1, profileData: "Default profile")
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [27522] CreatorRegistry::grantPlatformRole(CreatorRegistryTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: CreatorRegistryTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [69631] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 1000000 [1e6], 0, 0)
    │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 1000000 [1e6], source: "platform_activity")
    │   └─ ← [Stop]
    ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] 1000000000 [1e9]
    ├─ [2940] MockERC20::balanceOf(CreatorRegistry: [0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4]) [staticcall]
    │   └─ ← [Return] 0
    ├─ [3225] MockERC20::mint(CreatorRegistry: [0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4], 1000000 [1e6])
    │   └─ ← [Revert] OwnableUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496)
    └─ ← [Revert] OwnableUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496)

Suite result: FAILED. 25 passed; 2 failed; 0 skipped; finished in 7.64ms (3.18ms CPU time)

Ran 38 tests for test/unit/SubscriptionManager.t.sol:SubscriptionManagerTest
[PASS] test_CancelSubscription_AlreadyExpired() (gas: 617768)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[FAIL: log != expected log] test_CancelSubscription_Immediate() (gas: 651624)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [651624] SubscriptionManagerTest::test_CancelSubscription_Immediate()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [588736] SubscriptionManager::subscribeToCreator(0x0000000000000000000000000000000000001001)
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [2946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(1000000 [1e6]) [staticcall]
    │   │   └─ ← [Return] 25000 [2.5e4]
    │   ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 1000000000 [1e9]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [54088] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   │   └─ ← [Return] true
    │   ├─ [96001] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 975000 [9.75e5], 0, 1)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 975000 [9.75e5], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ emit Subscribed(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 1000000 [1e6], platformFee: 25000 [2.5e4], creatorEarning: 975000 [9.75e5], startTime: 1, endTime: 2592001 [2.592e6])
    │   └─ ← [Stop]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [0] VM::expectEmit(true, true, false, true)
    │   └─ ← [Return]
    ├─ emit SubscriptionCancelled(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, endTime: 1, immediate: true)
    ├─ [13611] SubscriptionManager::cancelSubscription(0x0000000000000000000000000000000000001001, true)
    │   ├─ emit SubscriptionCancelled(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, endTime: 2592001 [2.592e6], immediate: true)
    │   └─ ← [Stop]
    └─ ← [Revert] log != expected log

[PASS] test_CancelSubscription_NaturalExpiry() (gas: 650700)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_CancelSubscription_NotSubscribed() (gas: 21747)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_CleanupExpiredSubscriptionsEnhanced_Success() (gas: 813620)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_CleanupExpiredSubscriptions_RateLimiting() (gas: 548458)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_CleanupExpiredSubscriptions_Success() (gas: 828287)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_ConfigureAutoRenewal_CreatorNotRegistered() (gas: 26505)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_ConfigureAutoRenewal_Disable() (gas: 189099)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_ConfigureAutoRenewal_InvalidMaxPrice() (gas: 32514)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_ConfigureAutoRenewal_Success() (gas: 208976)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_ExecuteAutoRenewal_InsufficientBalance() (gas: 792455)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_ExecuteAutoRenewal_NotEnabled() (gas: 624903)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_ExecuteAutoRenewal_PriceExceeded() (gas: 806417)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[FAIL: Error != expected error: InsufficientBalance() != RenewalTooSoon()] test_ExecuteAutoRenewal_RateLimiting() (gas: 895025)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [895025] SubscriptionManagerTest::test_ExecuteAutoRenewal_RateLimiting()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [588736] SubscriptionManager::subscribeToCreator(0x0000000000000000000000000000000000001001)
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [2946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(1000000 [1e6]) [staticcall]
    │   │   └─ ← [Return] 25000 [2.5e4]
    │   ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 1000000000 [1e9]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [54088] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   │   └─ ← [Return] true
    │   ├─ [96001] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 975000 [9.75e5], 0, 1)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 975000 [9.75e5], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ emit Subscribed(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 1000000 [1e6], platformFee: 25000 [2.5e4], creatorEarning: 975000 [9.75e5], startTime: 1, endTime: 2592001 [2.592e6])
    │   └─ ← [Stop]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [23221] MockERC20::approve(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 999999 [9.999e5])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 999999 [9.999e5])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [108192] SubscriptionManager::configureAutoRenewal(0x0000000000000000000000000000000000001001, true, 1000000 [1e6], 999999 [9.999e5])
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 999000000 [9.99e8]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   │   └─ ← [Return] 999999 [9.999e5]
    │   ├─ [5488] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 999999 [9.999e5])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 999999 [9.999e5])
    │   │   └─ ← [Return] true
    │   ├─ emit AutoRenewalConfigured(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, enabled: true, maxPrice: 1000000 [1e6], depositAmount: 999999 [9.999e5])
    │   └─ ← [Stop]
    ├─ [0] VM::warp(2505602 [2.505e6])
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [0] VM::expectRevert(custom error 0xc31eb0e0: f4d678b800000000000000000000000000000000000000000000000000000000)
    │   └─ ← [Return]
    ├─ [59891] SubscriptionManager::executeAutoRenewal(0x0000000000000000000000000000000000002001, 0x0000000000000000000000000000000000001001)
    │   ├─ [946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ emit AutoRenewalFailed(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, reason: "Insufficient balance", attemptTime: 2505602 [2.505e6])
    │   └─ ← [Revert] InsufficientBalance()
    ├─ [0] VM::expectRevert(custom error 0xc31eb0e0: fb8c2e9c00000000000000000000000000000000000000000000000000000000)
    │   └─ ← [Return]
    ├─ [59891] SubscriptionManager::executeAutoRenewal(0x0000000000000000000000000000000000002001, 0x0000000000000000000000000000000000001001)
    │   ├─ [946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ emit AutoRenewalFailed(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, reason: "Insufficient balance", attemptTime: 2505602 [2.505e6])
    │   └─ ← [Revert] InsufficientBalance()
    └─ ← [Revert] Error != expected error: InsufficientBalance() != RenewalTooSoon()

[FAIL: log != expected log] test_ExecuteAutoRenewal_Success() (gas: 868021)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [868021] SubscriptionManagerTest::test_ExecuteAutoRenewal_Success()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [588736] SubscriptionManager::subscribeToCreator(0x0000000000000000000000000000000000001001)
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [2946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(1000000 [1e6]) [staticcall]
    │   │   └─ ← [Return] 25000 [2.5e4]
    │   ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 1000000000 [1e9]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [54088] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   │   └─ ← [Return] true
    │   ├─ [96001] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 975000 [9.75e5], 0, 1)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 975000 [9.75e5], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ emit Subscribed(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 1000000 [1e6], platformFee: 25000 [2.5e4], creatorEarning: 975000 [9.75e5], startTime: 1, endTime: 2592001 [2.592e6])
    │   └─ ← [Stop]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [23221] MockERC20::approve(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 2000000 [2e6])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 2000000 [2e6])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [108192] SubscriptionManager::configureAutoRenewal(0x0000000000000000000000000000000000001001, true, 2000000 [2e6], 2000000 [2e6])
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 999000000 [9.99e8]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   │   └─ ← [Return] 2000000 [2e6]
    │   ├─ [5488] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 2000000 [2e6])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 2000000 [2e6])
    │   │   └─ ← [Return] true
    │   ├─ emit AutoRenewalConfigured(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, enabled: true, maxPrice: 2000000 [2e6], depositAmount: 2000000 [2e6])
    │   └─ ← [Stop]
    ├─ [0] VM::warp(2505602 [2.505e6])
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [0] VM::expectEmit(true, true, false, true)
    │   └─ ← [Return]
    ├─ emit AutoRenewalExecuted(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 1000000 [1e6], newEndTime: 5097602 [5.097e6])
    ├─ [90874] SubscriptionManager::executeAutoRenewal(0x0000000000000000000000000000000000002001, 0x0000000000000000000000000000000000001001)
    │   ├─ [946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [1232] CreatorRegistry::calculatePlatformFee(1000000 [1e6]) [staticcall]
    │   │   └─ ← [Return] 25000 [2.5e4]
    │   ├─ emit AutoRenewalExecuted(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 1000000 [1e6], newEndTime: 5184001 [5.184e6])
    │   ├─ emit SubscriptionRenewed(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 1000000 [1e6], newEndTime: 5184001 [5.184e6], renewalCount: 1)
    │   └─ ← [Stop]
    └─ ← [Revert] log != expected log

[PASS] test_GetPlatformSubscriptionMetrics_Success() (gas: 1076949)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_GetSubscriptionStatus_Success() (gas: 627571)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_HandleExternalRefund_NoSubscription() (gas: 53018)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[FAIL: log != expected log] test_HandleExternalRefund_Success() (gas: 711813)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [711813] SubscriptionManagerTest::test_HandleExternalRefund_Success()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [588736] SubscriptionManager::subscribeToCreator(0x0000000000000000000000000000000000001001)
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [2946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(1000000 [1e6]) [staticcall]
    │   │   └─ ← [Return] 25000 [2.5e4]
    │   ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 1000000000 [1e9]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [54088] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   │   └─ ← [Return] true
    │   ├─ [96001] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 975000 [9.75e5], 0, 1)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 975000 [9.75e5], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ emit Subscribed(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 1000000 [1e6], platformFee: 25000 [2.5e4], creatorEarning: 975000 [9.75e5], startTime: 1, endTime: 2592001 [2.592e6])
    │   └─ ← [Stop]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [27544] SubscriptionManager::grantSubscriptionProcessorRole(SubscriptionManagerTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496])
    │   ├─ emit RoleGranted(role: 0x4a2743f41a15276dad6813e73326037e88c2a55ffdd5c4cab4ea1745629b0d34, account: SubscriptionManagerTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [0] VM::expectEmit(true, true, true, true)
    │   └─ ← [Return]
    ├─ emit ExternalRefundProcessed(intentId: 0x66e9107f2683cb949d9f50bfe72e06bd, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, refundAmount: 1000000 [1e6])
    ├─ [43294] SubscriptionManager::handleExternalRefund(0x66e9107f2683cb949d9f50bfe72e06bd, 0x0000000000000000000000000000000000002001, 0x0000000000000000000000000000000000001001)
    │   ├─ [1232] CreatorRegistry::calculatePlatformFee(1000000 [1e6]) [staticcall]
    │   │   └─ ← [Return] 25000 [2.5e4]
    │   ├─ [3042] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 0, 0, -1)
    │   │   └─ ← [Stop]
    │   ├─ emit ExternalRefundProcessed(intentId: 0x66e9107f2683cb949d9f50bfe72e06bd, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, refundAmount: 1000000 [1e6])
    │   └─ ← [Stop]
    └─ ← [Revert] log != expected log

[PASS] test_MultipleSubscriptions_Success() (gas: 1026446)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_PauseUnpause_Success() (gas: 632098)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_RecordSubscriptionPayment_CreatorNotRegistered() (gas: 57786)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_RecordSubscriptionPayment_Renewal() (gas: 723872)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_RecordSubscriptionPayment_Success() (gas: 587710)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_SubscribeToCreator_AlreadySubscribed() (gas: 643584)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_SubscribeToCreator_CreatorNotRegistered() (gas: 57060)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_SubscribeToCreator_InsufficientAllowance() (gas: 75192)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[FAIL: OwnableUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496)] test_SubscribeToCreator_InsufficientBalance() (gas: 11077)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [11077] SubscriptionManagerTest::test_SubscribeToCreator_InsufficientBalance()
    ├─ [3202] MockERC20::forceBalance(0x0000000000000000000000000000000000002001, 999999 [9.999e5])
    │   └─ ← [Revert] OwnableUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496)
    └─ ← [Revert] OwnableUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496)

[PASS] test_SubscribeToCreator_Renewal() (gas: 711635)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_SubscribeToCreator_Success() (gas: 646943)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_SubscriptionExpiration_Timing() (gas: 621029)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_SubscriptionIsolation_Success() (gas: 931373)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_WithdrawAutoRenewalBalance_Full() (gas: 189315)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_WithdrawAutoRenewalBalance_InsufficientBalance() (gas: 199995)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_WithdrawAutoRenewalBalance_Success() (gas: 216622)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_WithdrawSubscriptionEarnings_NoEarnings() (gas: 18810)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[FAIL: OwnableUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496)] test_WithdrawSubscriptionEarnings_Success() (gas: 635844)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [635844] SubscriptionManagerTest::test_WithdrawSubscriptionEarnings_Success()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [588736] SubscriptionManager::subscribeToCreator(0x0000000000000000000000000000000000001001)
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [2946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(1000000 [1e6]) [staticcall]
    │   │   └─ ← [Return] 25000 [2.5e4]
    │   ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 1000000000 [1e9]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [54088] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   │   └─ ← [Return] true
    │   ├─ [96001] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 975000 [9.75e5], 0, 1)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 975000 [9.75e5], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ emit Subscribed(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 1000000 [1e6], platformFee: 25000 [2.5e4], creatorEarning: 975000 [9.75e5], startTime: 1, endTime: 2592001 [2.592e6])
    │   └─ ← [Stop]
    ├─ [1225] MockERC20::mint(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 975000 [9.75e5])
    │   └─ ← [Revert] OwnableUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496)
    └─ ← [Revert] OwnableUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496)

Suite result: FAILED. 32 passed; 6 failed; 0 skipped; finished in 11.64ms (14.76ms CPU time)

Ran 6 tests for test/integration/EndToEndFlow.t.sol:EndToEndFlowTest
[FAIL: InvalidAutoRenewalConfig()] test_AutoRenewalIntegration_Success() (gas: 667639)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [667639] EndToEndFlowTest::test_AutoRenewalIntegration_Success()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 15000000 [1.5e7])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 15000000 [1.5e7])
    │   └─ ← [Return] true
    ├─ [22334] CreatorRegistry::getCreatorProfile(0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] Creator({ isRegistered: true, subscriptionPrice: 5000000 [5e6], isVerified: false, totalEarnings: 0, contentCount: 0, subscriberCount: 0, registrationTime: 1, profileData: "Premium Content Creator", isSuspended: false })
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [3321] MockERC20::approve(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 5000000 [5e6])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 5000000 [5e6])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [578236] SubscriptionManager::subscribeToCreator(0x0000000000000000000000000000000000001001)
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 5000000 [5e6]
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(5000000 [5e6]) [staticcall]
    │   │   └─ ← [Return] 125000 [1.25e5]
    │   ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 1000000000 [1e9]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   │   └─ ← [Return] 5000000 [5e6]
    │   ├─ [54088] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 5000000 [5e6])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 5000000 [5e6])
    │   │   └─ ← [Return] true
    │   ├─ [92001] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 4875000 [4.875e6], 0, 1)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 4875000 [4.875e6], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ emit Subscribed(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 5000000 [5e6], platformFee: 125000 [1.25e5], creatorEarning: 4875000 [4.875e6], startTime: 1, endTime: 2592001 [2.592e6])
    │   └─ ← [Stop]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [7808] SubscriptionManager::configureAutoRenewal(0x0000000000000000000000000000000000001001, true, 0, 0)
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 5000000 [5e6]
    │   └─ ← [Revert] InvalidAutoRenewalConfig()
    └─ ← [Revert] InvalidAutoRenewalConfig()

[FAIL: EvmError: Revert] test_CommerceProtocolIntegration_CustomToken() (gas: 1305194)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [1305194] EndToEndFlowTest::test_CommerceProtocolIntegration_CustomToken()
    ├─ [1138080] → new MockERC20@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: EndToEndFlowTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496])
    │   └─ ← [Return] 5327 bytes of code
    ├─ [47643] MockERC20::mint(0x0000000000000000000000000000000000002002, 100000000000000000000 [1e20])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000002002, value: 100000000000000000000 [1e20])
    │   └─ ← [Stop]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002002)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], 100000000000000000000 [1e20])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002002, spender: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], value: 100000000000000000000 [1e20])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002002)
    │   └─ ← [Return]
    ├─ [42213] CommerceProtocolIntegration::createPaymentIntent(PlatformPaymentRequest({ paymentType: 1, creator: 0x0000000000000000000000000000000000001002, contentId: 0, paymentToken: 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f, maxSlippage: 150, deadline: 3601 }))
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001002) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [2946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001002) [staticcall]
    │   │   └─ ← [Return] 10000000 [1e7]
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(10000000 [1e7]) [staticcall]
    │   │   └─ ← [Return] 250000 [2.5e5]
    │   ├─ [11909] PriceOracle::getTokenAmountForUSDC(MockERC20: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], 10000000 [1e7], 0)
    │   │   ├─ [569] MockERC20::decimals() [staticcall]
    │   │   │   └─ ← [Return] 18
    │   │   ├─ [0] 0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f, tokenOut: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, amountIn: 1000000000000000000 [1e18], fee: 10000 [1e4], sqrtPriceLimitX96: 0 }))
    │   │   │   └─ ← [Stop]
    │   │   └─ ← [Revert] EvmError: Revert
    │   └─ ← [Revert] EvmError: Revert
    └─ ← [Revert] EvmError: Revert

[FAIL: assertion failed: 0 != 1] test_CompleteCreatorJourney_Success() (gas: 1488179)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [1488179] EndToEndFlowTest::test_CompleteCreatorJourney_Success()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000005001)
    │   └─ ← [Return]
    ├─ [162204] CreatorRegistry::registerCreator(3000000 [3e6], "New Creator Profile")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000005001, subscriptionPrice: 3000000 [3e6], timestamp: 1, profileData: "New Creator Profile")
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000005001) [staticcall]
    │   └─ ← [Return] true
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [4334] CreatorRegistry::getCreatorProfile(0x0000000000000000000000000000000000005001) [staticcall]
    │   └─ ← [Return] Creator({ isRegistered: true, subscriptionPrice: 3000000 [3e6], isVerified: false, totalEarnings: 0, contentCount: 0, subscriberCount: 0, registrationTime: 1, profileData: "New Creator Profile", isSuspended: false })
    ├─ [0] VM::assertEq(3000000 [3e6], 3000000 [3e6]) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000005001)
    │   └─ ← [Return]
    ├─ [571886] ContentRegistry::registerContent("QmNewContentHash123", "My First Tutorial", "Learn the basics in this comprehensive guide", 0, 1000000 [1e6], ["tutorial", "beginner"])
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000005001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000005001, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 4, creator: 0x0000000000000000000000000000000000005001, ipfsHash: "QmNewContentHash123", title: "My First Tutorial", category: 0, payPerViewPrice: 1000000 [1e6], timestamp: 1)
    │   └─ ← [Return] 4
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [10940] ContentRegistry::getContent(4) [staticcall]
    │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000005001, ipfsHash: "QmNewContentHash123", title: "My First Tutorial", description: "Learn the basics in this comprehensive guide", category: 0, payPerViewPrice: 1000000 [1e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["tutorial", "beginner"], isReported: false, reportCount: 0 })
    ├─ [0] VM::assertEq(0x0000000000000000000000000000000000005001, 0x0000000000000000000000000000000000005001) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(1000000 [1e6], 1000000 [1e6]) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [10940] ContentRegistry::getContent(4) [staticcall]
    │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000005001, ipfsHash: "QmNewContentHash123", title: "My First Tutorial", description: "Learn the basics in this comprehensive guide", category: 0, payPerViewPrice: 1000000 [1e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["tutorial", "beginner"], isReported: false, reportCount: 0 })
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(PayPerView: [0x49C602668FE7a8B397255d678684323355754631], 1000000 [1e6])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], value: 1000000 [1e6])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [620756] PayPerView::purchaseContentDirect(4)
    │   ├─ [10940] ContentRegistry::getContent(4) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000005001, ipfsHash: "QmNewContentHash123", title: "My First Tutorial", description: "Learn the basics in this comprehensive guide", category: 0, payPerViewPrice: 1000000 [1e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["tutorial", "beginner"], isReported: false, reportCount: 0 })
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000005001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(1000000 [1e6]) [staticcall]
    │   │   └─ ← [Return] 25000 [2.5e4]
    │   ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 1000000000 [1e9]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, PayPerView: [0x49C602668FE7a8B397255d678684323355754631]) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [54088] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, PayPerView: [0x49C602668FE7a8B397255d678684323355754631], 1000000 [1e6])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], value: 1000000 [1e6])
    │   │   └─ ← [Return] true
    │   ├─ [71631] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000005001, 975000 [9.75e5], 0, 0)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000005001, amount: 975000 [9.75e5], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ [70825] ContentRegistry::recordPurchase(4, 0x0000000000000000000000000000000000002001)
    │   │   ├─ emit ContentPurchased(contentId: 4, buyer: 0x0000000000000000000000000000000000002001, price: 1000000 [1e6], timestamp: 1)
    │   │   └─ ← [Stop]
    │   ├─ emit DirectPurchaseCompleted(contentId: 4, buyer: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000005001, price: 1000000 [1e6], platformFee: 25000 [2.5e4], creatorEarning: 975000 [9.75e5])
    │   └─ ← [Stop]
    ├─ [1277] PayPerView::hasAccess(4, 0x0000000000000000000000000000000000002001) [staticcall]
    │   └─ ← [Return] true
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [1261] PayPerView::getCreatorEarnings(0x0000000000000000000000000000000000005001) [staticcall]
    │   └─ ← [Return] 975000 [9.75e5], 975000 [9.75e5]
    ├─ [5194] SubscriptionManager::getCreatorSubscriptionEarnings(0x0000000000000000000000000000000000005001) [staticcall]
    │   └─ ← [Return] 0, 0
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [4334] CreatorRegistry::getCreatorProfile(0x0000000000000000000000000000000000005001) [staticcall]
    │   └─ ← [Return] Creator({ isRegistered: true, subscriptionPrice: 3000000 [3e6], isVerified: false, totalEarnings: 975000 [9.75e5], contentCount: 0, subscriberCount: 0, registrationTime: 1, profileData: "New Creator Profile", isSuspended: false })
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(0, 1) [staticcall]
    │   └─ ← [Revert] assertion failed: 0 != 1
    └─ ← [Revert] assertion failed: 0 != 1

[PASS] test_ContentModerationIntegration_Success() (gas: 2044922)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[FAIL: assertion failed: 0 != 2] test_CrossContractConsistency_Success() (gas: 1280498)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [1280498] EndToEndFlowTest::test_CrossContractConsistency_Success()
    ├─ [40649] ContentRegistry::getContent(1) [staticcall]
    │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Beginner's Guide to DeFi", description: "Test description", category: 0, payPerViewPrice: 500000 [5e5], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["test", "content"], isReported: false, reportCount: 0 })
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(PayPerView: [0x49C602668FE7a8B397255d678684323355754631], 500000 [5e5])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], value: 500000 [5e5])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [626880] PayPerView::purchaseContentDirect(1)
    │   ├─ [10649] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Beginner's Guide to DeFi", description: "Test description", category: 0, payPerViewPrice: 500000 [5e5], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["test", "content"], isReported: false, reportCount: 0 })
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(500000 [5e5]) [staticcall]
    │   │   └─ ← [Return] 12500 [1.25e4]
    │   ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 1000000000 [1e9]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, PayPerView: [0x49C602668FE7a8B397255d678684323355754631]) [staticcall]
    │   │   └─ ← [Return] 500000 [5e5]
    │   ├─ [54088] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, PayPerView: [0x49C602668FE7a8B397255d678684323355754631], 500000 [5e5])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], value: 500000 [5e5])
    │   │   └─ ← [Return] true
    │   ├─ [73631] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 487500 [4.875e5], 0, 0)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 487500 [4.875e5], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ [70825] ContentRegistry::recordPurchase(1, 0x0000000000000000000000000000000000002001)
    │   │   ├─ emit ContentPurchased(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, price: 500000 [5e5], timestamp: 1)
    │   │   └─ ← [Stop]
    │   ├─ emit DirectPurchaseCompleted(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 500000 [5e5], platformFee: 12500 [1.25e4], creatorEarning: 487500 [4.875e5])
    │   └─ ← [Stop]
    ├─ [18334] CreatorRegistry::getCreatorProfile(0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] Creator({ isRegistered: true, subscriptionPrice: 5000000 [5e6], isVerified: false, totalEarnings: 487500 [4.875e5], contentCount: 0, subscriberCount: 0, registrationTime: 1, profileData: "Premium Content Creator", isSuspended: false })
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 5000000 [5e6])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 5000000 [5e6])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [483836] SubscriptionManager::subscribeToCreator(0x0000000000000000000000000000000000001001)
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 5000000 [5e6]
    │   ├─ [1232] CreatorRegistry::calculatePlatformFee(5000000 [5e6]) [staticcall]
    │   │   └─ ← [Return] 125000 [1.25e5]
    │   ├─ [940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 999500000 [9.995e8]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   │   └─ ← [Return] 5000000 [5e6]
    │   ├─ [27388] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 5000000 [5e6])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 5000000 [5e6])
    │   │   └─ ← [Return] true
    │   ├─ [28301] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 4875000 [4.875e6], 0, 1)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 4875000 [4.875e6], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ emit Subscribed(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 5000000 [5e6], platformFee: 125000 [1.25e5], creatorEarning: 4875000 [4.875e6], startTime: 1, endTime: 2592001 [2.592e6])
    │   └─ ← [Stop]
    ├─ [1261] PayPerView::getCreatorEarnings(0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] 487500 [4.875e5], 487500 [4.875e5]
    ├─ [1194] SubscriptionManager::getCreatorSubscriptionEarnings(0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] 4875000 [4.875e6], 4875000 [4.875e6]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [4334] CreatorRegistry::getCreatorProfile(0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] Creator({ isRegistered: true, subscriptionPrice: 5000000 [5e6], isVerified: false, totalEarnings: 5362500 [5.362e6], contentCount: 0, subscriberCount: 1, registrationTime: 1, profileData: "Premium Content Creator", isSuspended: false })
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(0, 2) [staticcall]
    │   └─ ← [Revert] assertion failed: 0 != 2
    └─ ← [Revert] assertion failed: 0 != 2

[PASS] test_MultiCreatorPlatformAnalytics_Success() (gas: 2421164)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Suite result: FAILED. 2 passed; 4 failed; 0 skipped; finished in 32.24ms (7.84ms CPU time)

Ran 11 tests for test/integration/CrossContractInteraction.t.sol:CrossContractInteractionTest
[PASS] testContentId1() (gas: 2516)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] testContentId2() (gas: 2559)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[FAIL: AccessControlUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496, 0x0000000000000000000000000000000000000000000000000000000000000000)] test_AdminRoleChanges_GlobalEffects() (gas: 17609)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [17609] CrossContractInteractionTest::test_AdminRoleChanges_GlobalEffects()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [442] CreatorRegistry::DEFAULT_ADMIN_ROLE() [staticcall]
    │   └─ ← [Return] 0x0000000000000000000000000000000000000000000000000000000000000000
    ├─ [5754] CreatorRegistry::grantRole(0x0000000000000000000000000000000000000000000000000000000000000000, 0x0000000000000000000000000000000000009998)
    │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496, 0x0000000000000000000000000000000000000000000000000000000000000000)
    └─ ← [Revert] AccessControlUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496, 0x0000000000000000000000000000000000000000000000000000000000000000)

[PASS] test_ContentDeactivation_AccessControlConsistency() (gas: 1309605)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_ContentPriceUpdate_AffectsPaymentSystems() (gas: 1122879)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[FAIL: next call did not revert as expected] test_CreatorDeactivation_CascadeEffects() (gas: 1608914)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [1608914] CrossContractInteractionTest::test_CreatorDeactivation_CascadeEffects()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 5000000 [5e6])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 5000000 [5e6])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [588736] SubscriptionManager::subscribeToCreator(0x0000000000000000000000000000000000001001)
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [2946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 5000000 [5e6]
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(5000000 [5e6]) [staticcall]
    │   │   └─ ← [Return] 125000 [1.25e5]
    │   ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 1000000000 [1e9]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   │   └─ ← [Return] 5000000 [5e6]
    │   ├─ [54088] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 5000000 [5e6])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 5000000 [5e6])
    │   │   └─ ← [Return] true
    │   ├─ [96001] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 4875000 [4.875e6], 0, 1)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 4875000 [4.875e6], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ emit Subscribed(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 5000000 [5e6], platformFee: 125000 [1.25e5], creatorEarning: 4875000 [4.875e6], startTime: 1, endTime: 2592001 [2.592e6])
    │   └─ ← [Stop]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(PayPerView: [0x49C602668FE7a8B397255d678684323355754631], 1000000 [1e6])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], value: 1000000 [1e6])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [558480] PayPerView::purchaseContentDirect(1)
    │   ├─ [40649] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Test Article", description: "Test description", category: 0, payPerViewPrice: 1000000 [1e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["test", "content"], isReported: false, reportCount: 0 })
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [1232] CreatorRegistry::calculatePlatformFee(1000000 [1e6]) [staticcall]
    │   │   └─ ← [Return] 25000 [2.5e4]
    │   ├─ [940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 995000000 [9.95e8]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, PayPerView: [0x49C602668FE7a8B397255d678684323355754631]) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [27388] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, PayPerView: [0x49C602668FE7a8B397255d678684323355754631], 1000000 [1e6])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], value: 1000000 [1e6])
    │   │   └─ ← [Return] true
    │   ├─ [7931] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 975000 [9.75e5], 0, 0)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 975000 [9.75e5], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ [70825] ContentRegistry::recordPurchase(1, 0x0000000000000000000000000000000000002001)
    │   │   ├─ emit ContentPurchased(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, price: 1000000 [1e6], timestamp: 1)
    │   │   └─ ← [Stop]
    │   ├─ emit DirectPurchaseCompleted(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 1000000 [1e6], platformFee: 25000 [2.5e4], creatorEarning: 975000 [9.75e5])
    │   └─ ← [Stop]
    ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] true
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [1257] SubscriptionManager::isSubscribed(0x0000000000000000000000000000000000002001, 0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] true
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [1277] PayPerView::hasAccess(1, 0x0000000000000000000000000000000000002001) [staticcall]
    │   └─ ← [Return] true
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [27069] CreatorRegistry::deactivateCreator(0x0000000000000000000000000000000000001001)
    │   ├─ emit CreatorSuspended(creator: 0x0000000000000000000000000000000000001001, suspended: true)
    │   └─ ← [Stop]
    ├─ [12463] CreatorRegistry::getCreatorWithActive(0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] Creator({ isRegistered: true, subscriptionPrice: 5000000 [5e6], isVerified: false, totalEarnings: 5850000 [5.85e6], contentCount: 0, subscriberCount: 1, registrationTime: 1, profileData: "Cross-Test Creator 1", isSuspended: true }), false
    ├─ [0] VM::assertFalse(false) [staticcall]
    │   └─ ← [Return]
    ├─ [1257] SubscriptionManager::isSubscribed(0x0000000000000000000000000000000000002001, 0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] true
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [1277] PayPerView::hasAccess(1, 0x0000000000000000000000000000000000002001) [staticcall]
    │   └─ ← [Return] true
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002002)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 5000000 [5e6])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002002, spender: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 5000000 [5e6])
    │   └─ ← [Return] true
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000002002)
    │   └─ ← [Return]
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Creator not active)
    │   └─ ← [Return]
    ├─ [287536] SubscriptionManager::subscribeToCreator(0x0000000000000000000000000000000000001001)
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 5000000 [5e6]
    │   ├─ [1232] CreatorRegistry::calculatePlatformFee(5000000 [5e6]) [staticcall]
    │   │   └─ ← [Return] 125000 [1.25e5]
    │   ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002002) [staticcall]
    │   │   └─ ← [Return] 1000000000 [1e9]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002002, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   │   └─ ← [Return] 5000000 [5e6]
    │   ├─ [8288] MockERC20::transferFrom(0x0000000000000000000000000000000000002002, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 5000000 [5e6])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002002, to: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 5000000 [5e6])
    │   │   └─ ← [Return] true
    │   ├─ [6401] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 4875000 [4.875e6], 0, 1)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 4875000 [4.875e6], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ emit Subscribed(user: 0x0000000000000000000000000000000000002002, creator: 0x0000000000000000000000000000000000001001, price: 5000000 [5e6], platformFee: 125000 [1.25e5], creatorEarning: 4875000 [4.875e6], startTime: 1, endTime: 2592001 [2.592e6])
    │   └─ ← [Stop]
    └─ ← [Revert] next call did not revert as expected

[FAIL: assertion failed] test_CreatorProfileUpdate_PropagatesCorrectly() (gas: 1254754)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [1254754] CrossContractInteractionTest::test_CreatorProfileUpdate_PropagatesCorrectly()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 5000000 [5e6])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 5000000 [5e6])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [588736] SubscriptionManager::subscribeToCreator(0x0000000000000000000000000000000000001001)
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [2946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 5000000 [5e6]
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(5000000 [5e6]) [staticcall]
    │   │   └─ ← [Return] 125000 [1.25e5]
    │   ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 1000000000 [1e9]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   │   └─ ← [Return] 5000000 [5e6]
    │   ├─ [54088] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 5000000 [5e6])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 5000000 [5e6])
    │   │   └─ ← [Return] true
    │   ├─ [96001] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 4875000 [4.875e6], 0, 1)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 4875000 [4.875e6], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ emit Subscribed(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 5000000 [5e6], platformFee: 125000 [1.25e5], creatorEarning: 4875000 [4.875e6], startTime: 1, endTime: 2592001 [2.592e6])
    │   └─ ← [Stop]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(PayPerView: [0x49C602668FE7a8B397255d678684323355754631], 1000000 [1e6])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], value: 1000000 [1e6])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [558480] PayPerView::purchaseContentDirect(1)
    │   ├─ [40649] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Test Article", description: "Test description", category: 0, payPerViewPrice: 1000000 [1e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["test", "content"], isReported: false, reportCount: 0 })
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [1232] CreatorRegistry::calculatePlatformFee(1000000 [1e6]) [staticcall]
    │   │   └─ ← [Return] 25000 [2.5e4]
    │   ├─ [940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 995000000 [9.95e8]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, PayPerView: [0x49C602668FE7a8B397255d678684323355754631]) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [27388] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, PayPerView: [0x49C602668FE7a8B397255d678684323355754631], 1000000 [1e6])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], value: 1000000 [1e6])
    │   │   └─ ← [Return] true
    │   ├─ [7931] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 975000 [9.75e5], 0, 0)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 975000 [9.75e5], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ [70825] ContentRegistry::recordPurchase(1, 0x0000000000000000000000000000000000002001)
    │   │   ├─ emit ContentPurchased(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, price: 1000000 [1e6], timestamp: 1)
    │   │   └─ ← [Stop]
    │   ├─ emit DirectPurchaseCompleted(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 1000000 [1e6], platformFee: 25000 [2.5e4], creatorEarning: 975000 [9.75e5])
    │   └─ ← [Stop]
    ├─ [14334] CreatorRegistry::getCreatorProfile(0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] Creator({ isRegistered: true, subscriptionPrice: 5000000 [5e6], isVerified: false, totalEarnings: 5850000 [5.85e6], contentCount: 0, subscriberCount: 1, registrationTime: 1, profileData: "Cross-Test Creator 1", isSuspended: false })
    ├─ [1261] PayPerView::getCreatorEarnings(0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] 975000 [9.75e5], 975000 [9.75e5]
    ├─ [1194] SubscriptionManager::getCreatorSubscriptionEarnings(0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] 4875000 [4.875e6], 4875000 [4.875e6]
    ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] true
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(false) [staticcall]
    │   └─ ← [Revert] assertion failed
    └─ ← [Revert] assertion failed

[FAIL: EvmError: Revert] test_PaymentFailure_StateConsistency() (gas: 156587)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [156587] CrossContractInteractionTest::test_PaymentFailure_StateConsistency()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], 1000000 [1e6])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], value: 1000000 [1e6])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [108785] CommerceProtocolIntegration::createPaymentIntent(PlatformPaymentRequest({ paymentType: 0, creator: 0x0000000000000000000000000000000000001001, contentId: 1, paymentToken: 0x22a7C94543caa0e72439289e039B35a64C79A966, maxSlippage: 100, deadline: 3601 }))
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [40649] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Test Article", description: "Test description", category: 0, payPerViewPrice: 1000000 [1e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["test", "content"], isReported: false, reportCount: 0 })
    │   ├─ [10649] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Test Article", description: "Test description", category: 0, payPerViewPrice: 1000000 [1e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["test", "content"], isReported: false, reportCount: 0 })
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(1000000 [1e6]) [staticcall]
    │   │   └─ ← [Return] 25000 [2.5e4]
    │   ├─ [13909] PriceOracle::getTokenAmountForUSDC(MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966], 1000000 [1e6], 0)
    │   │   ├─ [2569] MockERC20::decimals() [staticcall]
    │   │   │   └─ ← [Return] 6
    │   │   ├─ [0] 0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x22a7C94543caa0e72439289e039B35a64C79A966, tokenOut: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, amountIn: 1000000 [1e6], fee: 10000 [1e4], sqrtPriceLimitX96: 0 }))
    │   │   │   └─ ← [Stop]
    │   │   └─ ← [Revert] EvmError: Revert
    │   └─ ← [Revert] EvmError: Revert
    └─ ← [Revert] EvmError: Revert

[FAIL: panic: failed to convert value into enum type (0x21)] test_PlatformWideOperations_Consistency() (gas: 3581062)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [3581062] CrossContractInteractionTest::test_PlatformWideOperations_Consistency()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001003)
    │   └─ ← [Return]
    ├─ [162204] CreatorRegistry::registerCreator(15000000 [1.5e7], "Third Creator")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000001003, subscriptionPrice: 15000000 [1.5e7], timestamp: 1, profileData: "Third Creator")
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001003)
    │   └─ ← [Return]
    ├─ [466879] ContentRegistry::registerContent("QmTestHash123456789", "Expensive Content", "Test description", 0, 5000000 [5e6], ["test", "content"])
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001003) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001003, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 3, creator: 0x0000000000000000000000000000000000001003, ipfsHash: "QmTestHash123456789", title: "Expensive Content", category: 0, payPerViewPrice: 5000000 [5e6], timestamp: 1)
    │   └─ ← [Return] 3
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 20000000 [2e7])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 20000000 [2e7])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002002)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 25000000 [2.5e7])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002002, spender: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 25000000 [2.5e7])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [586236] SubscriptionManager::subscribeToCreator(0x0000000000000000000000000000000000001001)
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [2946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 5000000 [5e6]
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(5000000 [5e6]) [staticcall]
    │   │   └─ ← [Return] 125000 [1.25e5]
    │   ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 1000000000 [1e9]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   │   └─ ← [Return] 20000000 [2e7]
    │   ├─ [54088] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 5000000 [5e6])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 5000000 [5e6])
    │   │   └─ ← [Return] true
    │   ├─ [96001] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 4875000 [4.875e6], 0, 1)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 4875000 [4.875e6], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ emit Subscribed(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 5000000 [5e6], platformFee: 125000 [1.25e5], creatorEarning: 4875000 [4.875e6], startTime: 1, endTime: 2592001 [2.592e6])
    │   └─ ← [Stop]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [396236] SubscriptionManager::subscribeToCreator(0x0000000000000000000000000000000000001002)
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001002) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [2946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001002) [staticcall]
    │   │   └─ ← [Return] 10000000 [1e7]
    │   ├─ [1232] CreatorRegistry::calculatePlatformFee(10000000 [1e7]) [staticcall]
    │   │   └─ ← [Return] 250000 [2.5e5]
    │   ├─ [940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 995000000 [9.95e8]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   │   └─ ← [Return] 15000000 [1.5e7]
    │   ├─ [5488] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 10000000 [1e7])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 10000000 [1e7])
    │   │   └─ ← [Return] true
    │   ├─ [72101] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001002, 9750000 [9.75e6], 0, 1)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001002, amount: 9750000 [9.75e6], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ emit Subscribed(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001002, price: 10000000 [1e7], platformFee: 250000 [2.5e5], creatorEarning: 9750000 [9.75e6], startTime: 1, endTime: 2592001 [2.592e6])
    │   └─ ← [Stop]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002002)
    │   └─ ← [Return]
    ├─ [436836] SubscriptionManager::subscribeToCreator(0x0000000000000000000000000000000000001003)
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001003) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001003) [staticcall]
    │   │   └─ ← [Return] 15000000 [1.5e7]
    │   ├─ [1232] CreatorRegistry::calculatePlatformFee(15000000 [1.5e7]) [staticcall]
    │   │   └─ ← [Return] 375000 [3.75e5]
    │   ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002002) [staticcall]
    │   │   └─ ← [Return] 1000000000 [1e9]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002002, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   │   └─ ← [Return] 25000000 [2.5e7]
    │   ├─ [8288] MockERC20::transferFrom(0x0000000000000000000000000000000000002002, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 15000000 [1.5e7])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002002, to: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 15000000 [1.5e7])
    │   │   └─ ← [Return] true
    │   ├─ [68101] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001003, 14625000 [1.462e7], 0, 1)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001003, amount: 14625000 [1.462e7], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ emit Subscribed(user: 0x0000000000000000000000000000000000002002, creator: 0x0000000000000000000000000000000000001003, price: 15000000 [1.5e7], platformFee: 375000 [3.75e5], creatorEarning: 14625000 [1.462e7], startTime: 1, endTime: 2592001 [2.592e6])
    │   └─ ← [Stop]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(PayPerView: [0x49C602668FE7a8B397255d678684323355754631], 10000000 [1e7])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], value: 10000000 [1e7])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002002)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(PayPerView: [0x49C602668FE7a8B397255d678684323355754631], 10000000 [1e7])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002002, spender: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], value: 10000000 [1e7])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [553980] PayPerView::purchaseContentDirect(1)
    │   ├─ [38649] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Test Article", description: "Test description", category: 0, payPerViewPrice: 1000000 [1e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["test", "content"], isReported: false, reportCount: 0 })
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [1232] CreatorRegistry::calculatePlatformFee(1000000 [1e6]) [staticcall]
    │   │   └─ ← [Return] 25000 [2.5e4]
    │   ├─ [940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 985000000 [9.85e8]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, PayPerView: [0x49C602668FE7a8B397255d678684323355754631]) [staticcall]
    │   │   └─ ← [Return] 10000000 [1e7]
    │   ├─ [27388] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, PayPerView: [0x49C602668FE7a8B397255d678684323355754631], 1000000 [1e6])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], value: 1000000 [1e6])
    │   │   └─ ← [Return] true
    │   ├─ [7931] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 975000 [9.75e5], 0, 0)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 975000 [9.75e5], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ [70825] ContentRegistry::recordPurchase(1, 0x0000000000000000000000000000000000002001)
    │   │   ├─ emit ContentPurchased(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, price: 1000000 [1e6], timestamp: 1)
    │   │   └─ ← [Stop]
    │   ├─ emit DirectPurchaseCompleted(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 1000000 [1e6], platformFee: 25000 [2.5e4], creatorEarning: 975000 [9.75e5])
    │   └─ ← [Stop]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [364680] PayPerView::purchaseContentDirect(3)
    │   ├─ [10649] ContentRegistry::getContent(3) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001003, ipfsHash: "QmTestHash123456789", title: "Expensive Content", description: "Test description", category: 0, payPerViewPrice: 5000000 [5e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["test", "content"], isReported: false, reportCount: 0 })
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001003) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [1232] CreatorRegistry::calculatePlatformFee(5000000 [5e6]) [staticcall]
    │   │   └─ ← [Return] 125000 [1.25e5]
    │   ├─ [940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 984000000 [9.84e8]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, PayPerView: [0x49C602668FE7a8B397255d678684323355754631]) [staticcall]
    │   │   └─ ← [Return] 9000000 [9e6]
    │   ├─ [5488] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, PayPerView: [0x49C602668FE7a8B397255d678684323355754631], 5000000 [5e6])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], value: 5000000 [5e6])
    │   │   └─ ← [Return] true
    │   ├─ [5931] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001003, 4875000 [4.875e6], 0, 0)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001003, amount: 4875000 [4.875e6], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ [68825] ContentRegistry::recordPurchase(3, 0x0000000000000000000000000000000000002001)
    │   │   ├─ emit ContentPurchased(contentId: 3, buyer: 0x0000000000000000000000000000000000002001, price: 5000000 [5e6], timestamp: 1)
    │   │   └─ ← [Stop]
    │   ├─ emit DirectPurchaseCompleted(contentId: 3, buyer: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001003, price: 5000000 [5e6], platformFee: 125000 [1.25e5], creatorEarning: 4875000 [4.875e6])
    │   └─ ← [Stop]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002002)
    │   └─ ← [Return]
    ├─ [414580] PayPerView::purchaseContentDirect(2)
    │   ├─ [38649] ContentRegistry::getContent(2) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Premium Guide", description: "Test description", category: 0, payPerViewPrice: 3000000 [3e6], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["test", "content"], isReported: false, reportCount: 0 })
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [1232] CreatorRegistry::calculatePlatformFee(3000000 [3e6]) [staticcall]
    │   │   └─ ← [Return] 75000 [7.5e4]
    │   ├─ [940] MockERC20::balanceOf(0x0000000000000000000000000000000000002002) [staticcall]
    │   │   └─ ← [Return] 985000000 [9.85e8]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002002, PayPerView: [0x49C602668FE7a8B397255d678684323355754631]) [staticcall]
    │   │   └─ ← [Return] 10000000 [1e7]
    │   ├─ [5488] MockERC20::transferFrom(0x0000000000000000000000000000000000002002, PayPerView: [0x49C602668FE7a8B397255d678684323355754631], 3000000 [3e6])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002002, to: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], value: 3000000 [3e6])
    │   │   └─ ← [Return] true
    │   ├─ [5931] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 2925000 [2.925e6], 0, 0)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 2925000 [2.925e6], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ [68825] ContentRegistry::recordPurchase(2, 0x0000000000000000000000000000000000002002)
    │   │   ├─ emit ContentPurchased(contentId: 2, buyer: 0x0000000000000000000000000000000000002002, price: 3000000 [3e6], timestamp: 1)
    │   │   └─ ← [Stop]
    │   ├─ emit DirectPurchaseCompleted(contentId: 2, buyer: 0x0000000000000000000000000000000000002002, creator: 0x0000000000000000000000000000000000001001, price: 3000000 [3e6], platformFee: 75000 [7.5e4], creatorEarning: 2925000 [2.925e6])
    │   └─ ← [Stop]
    ├─ [5415] SubscriptionManager::getPlatformSubscriptionMetrics() [staticcall]
    │   └─ ← [Return] 3, 30000000 [3e7], 750000 [7.5e5], 0, 0
    ├─ [0] VM::assertEq(3, 3) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(30000000 [3e7], 30000000 [3e7]) [staticcall]
    │   └─ ← [Return]
    ├─ [29867] ContentRegistry::getPlatformStats() [staticcall]
    │   └─ ← [Revert] panic: failed to convert value into enum type (0x21)
    └─ ← [Revert] panic: failed to convert value into enum type (0x21)

[FAIL: AccessControlUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496, 0x0000000000000000000000000000000000000000000000000000000000000000)] test_RoleChanges_CrossContractPermissions() (gas: 168827)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [168827] CrossContractInteractionTest::test_RoleChanges_CrossContractPermissions()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [27566] ContentRegistry::grantPurchaseRecorderRole(CrossContractInteractionTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496])
    │   ├─ emit RoleGranted(role: 0x9587bd5d64fd9020a2c3c45e38d0e7ca3330d50e4b4dd00bfe972ac5de3bc565, account: CrossContractInteractionTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [76825] ContentRegistry::recordPurchase(1, 0x0000000000000000000000000000000000002001)
    │   ├─ emit ContentPurchased(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, price: 1000000 [1e6], timestamp: 1)
    │   └─ ← [Stop]
    ├─ [32649] ContentRegistry::getContent(1) [staticcall]
    │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Test Article", description: "Test description", category: 0, payPerViewPrice: 1000000 [1e6], isActive: true, createdAt: 1, purchaseCount: 1, tags: ["test", "content"], isReported: false, reportCount: 0 })
    ├─ [0] VM::assertEq(1, 1) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [438] ContentRegistry::PURCHASE_RECORDER_ROLE() [staticcall]
    │   └─ ← [Return] 0x9587bd5d64fd9020a2c3c45e38d0e7ca3330d50e4b4dd00bfe972ac5de3bc565
    ├─ [5731] ContentRegistry::revokeRole(0x9587bd5d64fd9020a2c3c45e38d0e7ca3330d50e4b4dd00bfe972ac5de3bc565, CrossContractInteractionTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496])
    │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496, 0x0000000000000000000000000000000000000000000000000000000000000000)
    └─ ← [Revert] AccessControlUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496, 0x0000000000000000000000000000000000000000000000000000000000000000)

[FAIL: AccessControlUnauthorizedAccount(0x0000000000000000000000000000000000002001, 0x1fa68478e710912de24d46d09a1aa735096685a61549eeb0fefb3693b245e69c)] test_SubscriptionRenewal_MultiContractUpdate() (gas: 757760)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [757760] CrossContractInteractionTest::test_SubscriptionRenewal_MultiContractUpdate()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 15000000 [1.5e7])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 15000000 [1.5e7])
    │   └─ ← [Return] true
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [588736] SubscriptionManager::subscribeToCreator(0x0000000000000000000000000000000000001001)
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [2946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 5000000 [5e6]
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(5000000 [5e6]) [staticcall]
    │   │   └─ ← [Return] 125000 [1.25e5]
    │   ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 1000000000 [1e9]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   │   └─ ← [Return] 15000000 [1.5e7]
    │   ├─ [54088] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 5000000 [5e6])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 5000000 [5e6])
    │   │   └─ ← [Return] true
    │   ├─ [96001] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 4875000 [4.875e6], 0, 1)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 4875000 [4.875e6], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ emit Subscribed(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 5000000 [5e6], platformFee: 125000 [1.25e5], creatorEarning: 4875000 [4.875e6], startTime: 1, endTime: 2592001 [2.592e6])
    │   └─ ← [Stop]
    ├─ [75612] SubscriptionManager::configureAutoRenewal(0x0000000000000000000000000000000000001001, true, 10000000 [1e7], 0)
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 5000000 [5e6]
    │   ├─ emit AutoRenewalConfigured(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, enabled: true, maxPrice: 10000000 [1e7], depositAmount: 0)
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [14334] CreatorRegistry::getCreatorProfile(0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] Creator({ isRegistered: true, subscriptionPrice: 5000000 [5e6], isVerified: false, totalEarnings: 4875000 [4.875e6], contentCount: 0, subscriberCount: 1, registrationTime: 1, profileData: "Cross-Test Creator 1", isSuspended: false })
    ├─ [5261] PayPerView::getCreatorEarnings(0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] 0, 0
    ├─ [1194] SubscriptionManager::getCreatorSubscriptionEarnings(0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] 4875000 [4.875e6], 4875000 [4.875e6]
    ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] true
    ├─ [3282] SubscriptionManager::getSubscriptionDetails(0x0000000000000000000000000000000000002001, 0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] SubscriptionRecord({ isActive: true, startTime: 1, endTime: 2592001 [2.592e6], renewalCount: 0, totalPaid: 5000000 [5e6], lastPayment: 5000000 [5e6] })
    ├─ [0] VM::warp(2592002 [2.592e6])
    │   └─ ← [Return]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [3556] SubscriptionManager::executeAutoRenewal(0x0000000000000000000000000000000000002001, 0x0000000000000000000000000000000000001001)
    │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x0000000000000000000000000000000000002001, 0x1fa68478e710912de24d46d09a1aa735096685a61549eeb0fefb3693b245e69c)
    └─ ← [Revert] AccessControlUnauthorizedAccount(0x0000000000000000000000000000000000002001, 0x1fa68478e710912de24d46d09a1aa735096685a61549eeb0fefb3693b245e69c)

Suite result: FAILED. 4 passed; 7 failed; 0 skipped; finished in 32.23ms (9.76ms CPU time)

Ran 31 tests for test/unit/ContentRegistry.t.sol:ContentRegistryTest
[FAIL: Error != expected error: BannedWordDetected("get rich quick") != custom error 0x816a9c2b] test_BanPhrase_Success() (gas: 206743)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [206743] ContentRegistryTest::test_BanPhrase_Success()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [0] VM::expectEmit(false, false, false, true)
    │   └─ ← [Return]
    ├─ emit WordBanned(word: "get rich quick", isPhrase: true)
    ├─ [79564] ContentRegistry::banPhrase("get rich quick")
    │   ├─ emit WordBanned(word: "get rich quick", isPhrase: true)
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [0] VM::expectRevert(custom error 0xc31eb0e0: 816a9c2b00000000000000000000000000000000000000000000000000000000)
    │   └─ ← [Return]
    ├─ [104780] ContentRegistry::registerContent("QmTestHash123456789012345678901234567890123456789", "Sample Article Title", "This will help you get rich quick with crypto", 0, 100000 [1e5], ["blockchain", "tutorial", "beginner"])
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   └─ ← [Revert] BannedWordDetected("get rich quick")
    └─ ← [Revert] Error != expected error: BannedWordDetected("get rich quick") != custom error 0x816a9c2b

[FAIL: next call did not revert as expected] test_BanWord_Success() (gas: 855327)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [855327] ContentRegistryTest::test_BanWord_Success()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [0] VM::expectEmit(false, false, false, true)
    │   └─ ← [Return]
    ├─ emit WordBanned(word: "spam", isPhrase: false)
    ├─ [30524] ContentRegistry::banWord("spam", false)
    │   ├─ emit WordBanned(word: "spam", isPhrase: false)
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [0] VM::expectRevert(custom error 0xc31eb0e0: 816a9c2b00000000000000000000000000000000000000000000000000000000)
    │   └─ ← [Return]
    ├─ [802213] ContentRegistry::registerContent("QmTestHash123456789012345678901234567890123456789", "This is spam content", "This is a sample article description for testing purposes.", 0, 100000 [1e5], ["blockchain", "tutorial", "beginner"])
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 1, creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789012345678901234567890123456789", title: "This is spam content", category: 0, payPerViewPrice: 100000 [1e5], timestamp: 1)
    │   └─ ← [Return] 1
    └─ ← [Revert] next call did not revert as expected

[PASS] test_GetActiveContentPaginated_Success() (gas: 2163104)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_GetContentByCategory_Success() (gas: 1482958)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_GetContentByTag_Success() (gas: 1309277)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_GetContent_InvalidId() (gas: 26279)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_GetCreatorActiveContent_Success() (gas: 990451)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_GetCreatorContent_Success() (gas: 1424299)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[FAIL: panic: failed to convert value into enum type (0x21)] test_GetPlatformStats_Success() (gas: 1505422)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [1505422] ContentRegistryTest::test_GetPlatformStats_Success()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [792781] ContentRegistry::registerContent("QmTestHash123456789012345678901234567890123456789", "Article", "This is a sample article description for testing purposes.", 0, 100000 [1e5], ["blockchain", "tutorial", "beginner"])
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 1, creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789012345678901234567890123456789", title: "Article", category: 0, payPerViewPrice: 100000 [1e5], timestamp: 1)
    │   └─ ← [Return] 1
    ├─ [656457] ContentRegistry::registerContent("QmTestHash987654321098765432109876543210987654321", "Video", "This is a sample article description for testing purposes.", 1, 200000 [2e5], ["blockchain", "tutorial", "beginner"])
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 2, creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash987654321098765432109876543210987654321", title: "Video", category: 1, payPerViewPrice: 200000 [2e5], timestamp: 1)
    │   └─ ← [Return] 2
    ├─ [8271] ContentRegistry::updateContent(2, 0, false)
    │   ├─ emit ContentUpdated(contentId: 2, newPrice: 0, isActive: false)
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [25867] ContentRegistry::getPlatformStats() [staticcall]
    │   └─ ← [Revert] panic: failed to convert value into enum type (0x21)
    └─ ← [Revert] panic: failed to convert value into enum type (0x21)

[PASS] test_PauseUnpause_Success() (gas: 1019684)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_RecordPurchase_InactiveContent() (gas: 583236)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_RecordPurchase_OnlyAuthorized() (gas: 626164)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_RecordPurchase_Success() (gas: 724346)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_RegisterContent_BoundaryValues() (gas: 1438708)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[FAIL: panic: failed to convert value into enum type (0x21)] test_RegisterContent_CreatorNotRegistered() (gas: 74399)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [74399] ContentRegistryTest::test_RegisterContent_CreatorNotRegistered()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [0] VM::expectRevert(custom error 0xc31eb0e0: 2bad89bb00000000000000000000000000000000000000000000000000000000)
    │   └─ ← [Return]
    ├─ [19160] ContentRegistry::registerContent("QmTestHash123456789012345678901234567890123456789", "Sample Article Title", "This is a sample article description for testing purposes.", 0, 100000 [1e5], ["blockchain", "tutorial", "beginner"])
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] false
    │   └─ ← [Revert] CreatorNotRegistered()
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [37867] ContentRegistry::getPlatformStats() [staticcall]
    │   └─ ← [Revert] panic: failed to convert value into enum type (0x21)
    └─ ← [Revert] panic: failed to convert value into enum type (0x21)

[FAIL: panic: failed to convert value into enum type (0x21)] test_RegisterContent_DifferentCategories() (gas: 5039870)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [5039870] ContentRegistryTest::test_RegisterContent_DifferentCategories()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [802809] ContentRegistry::registerContent("QmTestHash123456789012345678901234567890123456789", "Sample Article Title", "This is a sample article description for testing purposes.", 0, 100000 [1e5], ["blockchain", "tutorial", "beginner"])
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 1, creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789012345678901234567890123456789", title: "Sample Article Title", category: 0, payPerViewPrice: 100000 [1e5], timestamp: 1)
    │   └─ ← [Return] 1
    ├─ [12703] ContentRegistry::getContent(1) [staticcall]
    │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789012345678901234567890123456789", title: "Sample Article Title", description: "This is a sample article description for testing purposes.", category: 0, payPerViewPrice: 100000 [1e5], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["blockchain", "tutorial", "beginner"], isReported: false, reportCount: 0 })
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [1811] ContentRegistry::getContentByCategory(0) [staticcall]
    │   └─ ← [Return] [1]
    ├─ [0] VM::assertEq(1, 1) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(1, 1) [staticcall]
    │   └─ ← [Return]
    ├─ [666009] ContentRegistry::registerContent("QmTestHash123456789012345678901234567890123456789", "Sample Article Title", "This is a sample article description for testing purposes.", 1, 100000 [1e5], ["blockchain", "tutorial", "beginner"])
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 2, creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789012345678901234567890123456789", title: "Sample Article Title", category: 1, payPerViewPrice: 100000 [1e5], timestamp: 1)
    │   └─ ← [Return] 2
    ├─ [12703] ContentRegistry::getContent(2) [staticcall]
    │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789012345678901234567890123456789", title: "Sample Article Title", description: "This is a sample article description for testing purposes.", category: 1, payPerViewPrice: 100000 [1e5], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["blockchain", "tutorial", "beginner"], isReported: false, reportCount: 0 })
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [1811] ContentRegistry::getContentByCategory(1) [staticcall]
    │   └─ ← [Return] [2]
    ├─ [0] VM::assertEq(1, 1) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(2, 2) [staticcall]
    │   └─ ← [Return]
    ├─ [666009] ContentRegistry::registerContent("QmTestHash123456789012345678901234567890123456789", "Sample Article Title", "This is a sample article description for testing purposes.", 2, 100000 [1e5], ["blockchain", "tutorial", "beginner"])
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 3, creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789012345678901234567890123456789", title: "Sample Article Title", category: 2, payPerViewPrice: 100000 [1e5], timestamp: 1)
    │   └─ ← [Return] 3
    ├─ [12703] ContentRegistry::getContent(3) [staticcall]
    │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789012345678901234567890123456789", title: "Sample Article Title", description: "This is a sample article description for testing purposes.", category: 2, payPerViewPrice: 100000 [1e5], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["blockchain", "tutorial", "beginner"], isReported: false, reportCount: 0 })
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [1811] ContentRegistry::getContentByCategory(2) [staticcall]
    │   └─ ← [Return] [3]
    ├─ [0] VM::assertEq(1, 1) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(3, 3) [staticcall]
    │   └─ ← [Return]
    ├─ [666009] ContentRegistry::registerContent("QmTestHash123456789012345678901234567890123456789", "Sample Article Title", "This is a sample article description for testing purposes.", 3, 100000 [1e5], ["blockchain", "tutorial", "beginner"])
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 4, creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789012345678901234567890123456789", title: "Sample Article Title", category: 3, payPerViewPrice: 100000 [1e5], timestamp: 1)
    │   └─ ← [Return] 4
    ├─ [12703] ContentRegistry::getContent(4) [staticcall]
    │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789012345678901234567890123456789", title: "Sample Article Title", description: "This is a sample article description for testing purposes.", category: 3, payPerViewPrice: 100000 [1e5], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["blockchain", "tutorial", "beginner"], isReported: false, reportCount: 0 })
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [1811] ContentRegistry::getContentByCategory(3) [staticcall]
    │   └─ ← [Return] [4]
    ├─ [0] VM::assertEq(1, 1) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(4, 4) [staticcall]
    │   └─ ← [Return]
    ├─ [666009] ContentRegistry::registerContent("QmTestHash123456789012345678901234567890123456789", "Sample Article Title", "This is a sample article description for testing purposes.", 4, 100000 [1e5], ["blockchain", "tutorial", "beginner"])
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 5, creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789012345678901234567890123456789", title: "Sample Article Title", category: 4, payPerViewPrice: 100000 [1e5], timestamp: 1)
    │   └─ ← [Return] 5
    ├─ [12703] ContentRegistry::getContent(5) [staticcall]
    │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789012345678901234567890123456789", title: "Sample Article Title", description: "This is a sample article description for testing purposes.", category: 4, payPerViewPrice: 100000 [1e5], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["blockchain", "tutorial", "beginner"], isReported: false, reportCount: 0 })
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [1811] ContentRegistry::getContentByCategory(4) [staticcall]
    │   └─ ← [Return] [5]
    ├─ [0] VM::assertEq(1, 1) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(5, 5) [staticcall]
    │   └─ ← [Return]
    ├─ [666009] ContentRegistry::registerContent("QmTestHash123456789012345678901234567890123456789", "Sample Article Title", "This is a sample article description for testing purposes.", 5, 100000 [1e5], ["blockchain", "tutorial", "beginner"])
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 6, creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789012345678901234567890123456789", title: "Sample Article Title", category: 5, payPerViewPrice: 100000 [1e5], timestamp: 1)
    │   └─ ← [Return] 6
    ├─ [12703] ContentRegistry::getContent(6) [staticcall]
    │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789012345678901234567890123456789", title: "Sample Article Title", description: "This is a sample article description for testing purposes.", category: 5, payPerViewPrice: 100000 [1e5], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["blockchain", "tutorial", "beginner"], isReported: false, reportCount: 0 })
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [1811] ContentRegistry::getContentByCategory(5) [staticcall]
    │   └─ ← [Return] [6]
    ├─ [0] VM::assertEq(1, 1) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(6, 6) [staticcall]
    │   └─ ← [Return]
    ├─ [666009] ContentRegistry::registerContent("QmTestHash123456789012345678901234567890123456789", "Sample Article Title", "This is a sample article description for testing purposes.", 6, 100000 [1e5], ["blockchain", "tutorial", "beginner"])
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 7, creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789012345678901234567890123456789", title: "Sample Article Title", category: 6, payPerViewPrice: 100000 [1e5], timestamp: 1)
    │   └─ ← [Return] 7
    ├─ [12703] ContentRegistry::getContent(7) [staticcall]
    │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789012345678901234567890123456789", title: "Sample Article Title", description: "This is a sample article description for testing purposes.", category: 6, payPerViewPrice: 100000 [1e5], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["blockchain", "tutorial", "beginner"], isReported: false, reportCount: 0 })
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [1811] ContentRegistry::getContentByCategory(6) [staticcall]
    │   └─ ← [Return] [7]
    ├─ [0] VM::assertEq(1, 1) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(7, 7) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [5867] ContentRegistry::getPlatformStats() [staticcall]
    │   └─ ← [Revert] panic: failed to convert value into enum type (0x21)
    └─ ← [Revert] panic: failed to convert value into enum type (0x21)

[PASS] test_RegisterContent_EmptyTitle() (gas: 36224)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[FAIL: next call did not revert as expected] test_RegisterContent_InvalidIPFSHash() (gas: 773549)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [773549] ContentRegistryTest::test_RegisterContent_InvalidIPFSHash()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [0] VM::expectRevert(custom error 0xc31eb0e0: dcdb6d0200000000000000000000000000000000000000000000000000000000)
    │   └─ ← [Return]
    ├─ [758083] ContentRegistry::registerContent("invalid", "Sample Article Title", "This is a sample article description for testing purposes.", 0, 100000 [1e5], ["blockchain", "tutorial", "beginner"])
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 1, creator: 0x0000000000000000000000000000000000001001, ipfsHash: "invalid", title: "Sample Article Title", category: 0, payPerViewPrice: 100000 [1e5], timestamp: 1)
    │   └─ ← [Return] 1
    └─ ← [Revert] next call did not revert as expected

[PASS] test_RegisterContent_PriceTooHigh() (gas: 36668)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_RegisterContent_PriceTooLow() (gas: 36701)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[FAIL: panic: failed to convert value into enum type (0x21)] test_RegisterContent_Success() (gas: 906289)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [906289] ContentRegistryTest::test_RegisterContent_Success()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [0] VM::expectEmit(true, true, false, true)
    │   └─ ← [Return]
    ├─ emit ContentRegistered(contentId: 1, creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789012345678901234567890123456789", title: "Sample Article Title", category: 0, payPerViewPrice: 100000 [1e5], timestamp: 1)
    ├─ [802809] ContentRegistry::registerContent("QmTestHash123456789012345678901234567890123456789", "Sample Article Title", "This is a sample article description for testing purposes.", 0, 100000 [1e5], ["blockchain", "tutorial", "beginner"])
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 1, creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789012345678901234567890123456789", title: "Sample Article Title", category: 0, payPerViewPrice: 100000 [1e5], timestamp: 1)
    │   └─ ← [Return] 1
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(1, 1) [staticcall]
    │   └─ ← [Return]
    ├─ [12703] ContentRegistry::getContent(1) [staticcall]
    │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789012345678901234567890123456789", title: "Sample Article Title", description: "This is a sample article description for testing purposes.", category: 0, payPerViewPrice: 100000 [1e5], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["blockchain", "tutorial", "beginner"], isReported: false, reportCount: 0 })
    ├─ [0] VM::assertEq(0x0000000000000000000000000000000000001001, 0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(100000 [1e5], 100000 [1e5]) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(1, 1) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(0, 0) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertFalse(false) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(0, 0) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(3, 3) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [1798] ContentRegistry::getCreatorContent(0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] [1]
    ├─ [0] VM::assertEq(1, 1) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(1, 1) [staticcall]
    │   └─ ← [Return]
    ├─ [1811] ContentRegistry::getContentByCategory(0) [staticcall]
    │   └─ ← [Return] [1]
    ├─ [0] VM::assertEq(1, 1) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(1, 1) [staticcall]
    │   └─ ← [Return]
    ├─ [6728] ContentRegistry::getContentByTag("blockchain") [staticcall]
    │   └─ ← [Return] [1]
    ├─ [0] VM::assertEq(1, 1) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(1, 1) [staticcall]
    │   └─ ← [Return]
    ├─ [29867] ContentRegistry::getPlatformStats() [staticcall]
    │   └─ ← [Revert] panic: failed to convert value into enum type (0x21)
    └─ ← [Revert] panic: failed to convert value into enum type (0x21)

[PASS] test_RegisterContent_TooManyTags() (gas: 49316)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_ReportContent_AlreadyReported() (gas: 847257)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_ReportContent_AutoModeration() (gas: 1236286)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_ReportContent_Success() (gas: 858217)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[FAIL: panic: failed to convert value into enum type (0x21)] test_ResolveReport_RemoveContent() (gas: 951927)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [951927] ContentRegistryTest::test_ResolveReport_RemoveContent()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [588574] ContentRegistry::registerContent("QmTestHash123456789", "Sample content", "Test description", 0, 100000 [1e5], ["test", "content"])
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 1, creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Sample content", category: 0, payPerViewPrice: 100000 [1e5], timestamp: 1)
    │   └─ ← [Return] 1
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [220596] ContentRegistry::reportContent(1, "Harmful content")
    │   ├─ emit ContentReported(contentId: 1, reporter: 0x0000000000000000000000000000000000002001, reason: "Harmful content", reportId: 1)
    │   └─ ← [Stop]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [0] VM::expectEmit(true, false, false, true)
    │   └─ ← [Return]
    ├─ emit ContentDeactivated(contentId: 1, reason: "Removed due to moderation", moderator: 0x0000000000000000000000000000000000003001)
    ├─ [68982] ContentRegistry::resolveReport(1, 0, "removed")
    │   ├─ emit ContentDeactivated(contentId: 1, reason: "Removed due to moderation", moderator: 0x0000000000000000000000000000000000003001)
    │   ├─ emit ReportResolved(reportId: 0, contentId: 1, action: "removed", moderator: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [10649] ContentRegistry::getContent(1) [staticcall]
    │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Sample content", description: "Test description", category: 0, payPerViewPrice: 100000 [1e5], isActive: false, createdAt: 1, purchaseCount: 0, tags: ["test", "content"], isReported: true, reportCount: 1 })
    ├─ [0] VM::assertFalse(false) [staticcall]
    │   └─ ← [Return]
    ├─ [29867] ContentRegistry::getPlatformStats() [staticcall]
    │   └─ ← [Revert] panic: failed to convert value into enum type (0x21)
    └─ ← [Revert] panic: failed to convert value into enum type (0x21)

[PASS] test_ResolveReport_Success() (gas: 888655)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[FAIL: panic: failed to convert value into enum type (0x21)] test_UpdateContent_Deactivation() (gas: 682838)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [682838] ContentRegistryTest::test_UpdateContent_Deactivation()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [588574] ContentRegistry::registerContent("QmTestHash123456789", "Sample content", "Test description", 0, 100000 [1e5], ["test", "content"])
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 1, creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Sample content", category: 0, payPerViewPrice: 100000 [1e5], timestamp: 1)
    │   └─ ← [Return] 1
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [10649] ContentRegistry::getContent(1) [staticcall]
    │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Sample content", description: "Test description", category: 0, payPerViewPrice: 100000 [1e5], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["test", "content"], isReported: false, reportCount: 0 })
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [0] VM::expectEmit(true, false, false, true)
    │   └─ ← [Return]
    ├─ emit ContentUpdated(contentId: 1, newPrice: 0, isActive: false)
    ├─ [8271] ContentRegistry::updateContent(1, 0, false)
    │   ├─ emit ContentUpdated(contentId: 1, newPrice: 0, isActive: false)
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [10649] ContentRegistry::getContent(1) [staticcall]
    │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Sample content", description: "Test description", category: 0, payPerViewPrice: 100000 [1e5], isActive: false, createdAt: 1, purchaseCount: 0, tags: ["test", "content"], isReported: false, reportCount: 0 })
    ├─ [0] VM::assertFalse(false) [staticcall]
    │   └─ ← [Return]
    ├─ [29867] ContentRegistry::getPlatformStats() [staticcall]
    │   └─ ← [Revert] panic: failed to convert value into enum type (0x21)
    └─ ← [Revert] panic: failed to convert value into enum type (0x21)

[PASS] test_UpdateContent_InvalidPrice() (gas: 625815)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_UpdateContent_OnlyCreator() (gas: 627574)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_UpdateContent_PriceUpdate() (gas: 628478)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Suite result: FAILED. 22 passed; 9 failed; 0 skipped; finished in 33.64ms (46.89ms CPU time)

Ran 36 tests for test/unit/PayPerView.t.sol:PayPerViewTest
[PASS] testContentId1() (gas: 2583)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] testContentId2() (gas: 2537)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_CanPurchaseContent_Success() (gas: 688660)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_CompletePurchase_ExpiredIntent() (gas: 282234)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[FAIL: next call did not revert as expected] test_CompletePurchase_InsufficientPayment() (gas: 837913)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [837913] PayPerViewTest::test_CompletePurchase_InsufficientPayment()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [231956] PayPerView::createPurchaseIntent(1, 0, 0x0000000000000000000000000000000000000000, 100)
    │   ├─ [40649] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Test Content 1", description: "Test description", category: 0, payPerViewPrice: 100000 [1e5], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["test", "content"], isReported: false, reportCount: 0 })
    │   ├─ [1055] PriceOracle::getTokenAmountForUSDC(0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 100000 [1e5], 0)
    │   │   └─ ← [Return] 100000 [1e5]
    │   ├─ [1445] PriceOracle::applySlippage(100000 [1e5], 100) [staticcall]
    │   │   └─ ← [Return] 101000 [1.01e5]
    │   ├─ emit ContentPurchaseInitiated(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, intentId: 0xa4fda21ee56bb9fbd55ff9f1c86373b6, paymentMethod: 0, usdcPrice: 100000 [1e5], expectedPaymentAmount: 101000 [1.01e5])
    │   └─ ← [Return] 0xa4fda21ee56bb9fbd55ff9f1c86373b6, 101000 [1.01e5], 3601
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [27544] PayPerView::grantPaymentProcessorRole(PayPerViewTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496])
    │   ├─ emit RoleGranted(role: 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919, account: PayPerViewTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Insufficient payment)
    │   └─ ← [Return]
    ├─ [559214] PayPerView::completePurchase(0xa4fda21ee56bb9fbd55ff9f1c86373b6, 100999 [1.009e5], true, "")
    │   ├─ [10649] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Test Content 1", description: "Test description", category: 0, payPerViewPrice: 100000 [1e5], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["test", "content"], isReported: false, reportCount: 0 })
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(100000 [1e5]) [staticcall]
    │   │   └─ ← [Return] 2500
    │   ├─ [75631] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 97500 [9.75e4], 0, 0)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 97500 [9.75e4], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ [70825] ContentRegistry::recordPurchase(1, 0x0000000000000000000000000000000000002001)
    │   │   ├─ emit ContentPurchased(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, price: 100000 [1e5], timestamp: 1)
    │   │   └─ ← [Stop]
    │   ├─ emit ContentPurchaseCompleted(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, intentId: 0xa4fda21ee56bb9fbd55ff9f1c86373b6, usdcPrice: 100000 [1e5], actualAmountPaid: 100999 [1.009e5], paymentToken: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913)
    │   └─ ← [Stop]
    └─ ← [Revert] next call did not revert as expected

[PASS] test_CompletePurchase_PaymentFailed() (gas: 457395)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[FAIL: log != expected log] test_CompletePurchase_Success() (gas: 846525)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [846525] PayPerViewTest::test_CompletePurchase_Success()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [231956] PayPerView::createPurchaseIntent(1, 0, 0x0000000000000000000000000000000000000000, 100)
    │   ├─ [40649] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Test Content 1", description: "Test description", category: 0, payPerViewPrice: 100000 [1e5], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["test", "content"], isReported: false, reportCount: 0 })
    │   ├─ [1055] PriceOracle::getTokenAmountForUSDC(0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 100000 [1e5], 0)
    │   │   └─ ← [Return] 100000 [1e5]
    │   ├─ [1445] PriceOracle::applySlippage(100000 [1e5], 100) [staticcall]
    │   │   └─ ← [Return] 101000 [1.01e5]
    │   ├─ emit ContentPurchaseInitiated(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, intentId: 0xa4fda21ee56bb9fbd55ff9f1c86373b6, paymentMethod: 0, usdcPrice: 100000 [1e5], expectedPaymentAmount: 101000 [1.01e5])
    │   └─ ← [Return] 0xa4fda21ee56bb9fbd55ff9f1c86373b6, 101000 [1.01e5], 3601
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [27544] PayPerView::grantPaymentProcessorRole(PayPerViewTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496])
    │   ├─ emit RoleGranted(role: 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919, account: PayPerViewTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [0] VM::expectEmit(true, true, true, true)
    │   └─ ← [Return]
    ├─ emit ContentPurchaseCompleted(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, intentId: 0xa4fda21ee56bb9fbd55ff9f1c86373b6, usdcPrice: 100000 [1e5], actualAmountPaid: 101000 [1.01e5], paymentToken: MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966])
    ├─ [559214] PayPerView::completePurchase(0xa4fda21ee56bb9fbd55ff9f1c86373b6, 101000 [1.01e5], true, "")
    │   ├─ [10649] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Test Content 1", description: "Test description", category: 0, payPerViewPrice: 100000 [1e5], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["test", "content"], isReported: false, reportCount: 0 })
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(100000 [1e5]) [staticcall]
    │   │   └─ ← [Return] 2500
    │   ├─ [75631] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 97500 [9.75e4], 0, 0)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 97500 [9.75e4], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ [70825] ContentRegistry::recordPurchase(1, 0x0000000000000000000000000000000000002001)
    │   │   ├─ emit ContentPurchased(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, price: 100000 [1e5], timestamp: 1)
    │   │   └─ ← [Stop]
    │   ├─ emit ContentPurchaseCompleted(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, intentId: 0xa4fda21ee56bb9fbd55ff9f1c86373b6, usdcPrice: 100000 [1e5], actualAmountPaid: 101000 [1.01e5], paymentToken: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913)
    │   └─ ← [Stop]
    └─ ← [Revert] log != expected log

[PASS] test_CreatePurchaseIntent_AlreadyPurchased() (gas: 707862)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[FAIL: EvmError: Revert] test_CreatePurchaseIntent_ETH() (gas: 110779)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [110779] PayPerViewTest::test_CreatePurchaseIntent_ETH()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [97788] PayPerView::createPurchaseIntent(1, 1, 0x0000000000000000000000000000000000000000, 100)
    │   ├─ [40649] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Test Content 1", description: "Test description", category: 0, payPerViewPrice: 100000 [1e5], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["test", "content"], isReported: false, reportCount: 0 })
    │   ├─ [9162] PriceOracle::getETHPrice(100000 [1e5])
    │   │   ├─ [0] 0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x4200000000000000000000000000000000000006, tokenOut: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, amountIn: 1000000000000000000 [1e18], fee: 3000, sqrtPriceLimitX96: 0 }))
    │   │   │   └─ ← [Stop]
    │   │   └─ ← [Revert] EvmError: Revert
    │   └─ ← [Revert] EvmError: Revert
    └─ ← [Revert] EvmError: Revert

[FAIL: Error != expected error: InvalidContentId() != Content not found] test_CreatePurchaseIntent_NonExistentContent() (gas: 25839)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [25839] PayPerViewTest::test_CreatePurchaseIntent_NonExistentContent()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Content not found)
    │   └─ ← [Return]
    ├─ [14122] PayPerView::createPurchaseIntent(999, 0, 0x0000000000000000000000000000000000000000, 100)
    │   ├─ [2980] ContentRegistry::getContent(999) [staticcall]
    │   │   └─ ← [Revert] InvalidContentId()
    │   └─ ← [Revert] InvalidContentId()
    └─ ← [Revert] Error != expected error: InvalidContentId() != Content not found

[FAIL: EvmError: Revert] test_CreatePurchaseIntent_OtherToken() (gas: 147074)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [147074] PayPerViewTest::test_CreatePurchaseIntent_OtherToken()
    ├─ [23482] MockQuoterV2::setMockPrice(0x0000000000000000000000000000000000001234, MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966], 3000, 1000000 [1e6])
    │   └─ ← [Stop]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [102650] PayPerView::createPurchaseIntent(1, 3, 0x0000000000000000000000000000000000001234, 200)
    │   ├─ [40649] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Test Content 1", description: "Test description", category: 0, payPerViewPrice: 100000 [1e5], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["test", "content"], isReported: false, reportCount: 0 })
    │   ├─ [13489] PriceOracle::getTokenAmountForUSDC(0x0000000000000000000000000000000000001234, 100000 [1e5], 0)
    │   │   ├─ [0] 0x0000000000000000000000000000000000001234::decimals() [staticcall]
    │   │   │   └─ ← [Stop]
    │   │   ├─ [0] 0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x0000000000000000000000000000000000001234, tokenOut: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, amountIn: 1000000000000000000 [1e18], fee: 10000 [1e4], sqrtPriceLimitX96: 0 }))
    │   │   │   └─ ← [Stop]
    │   │   └─ ← [Revert] EvmError: Revert
    │   └─ ← [Revert] EvmError: Revert
    └─ ← [Revert] EvmError: Revert

[FAIL: assertion failed: 101000 != 100000] test_CreatePurchaseIntent_USDC() (gas: 253742)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [253742] PayPerViewTest::test_CreatePurchaseIntent_USDC()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [0] VM::expectEmit(true, true, true, false)
    │   └─ ← [Return]
    ├─ emit ContentPurchaseInitiated(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, intentId: 0x00000000000000000000000000000000, paymentMethod: 0, usdcPrice: 100000 [1e5], expectedPaymentAmount: 100000 [1e5])
    ├─ [231956] PayPerView::createPurchaseIntent(1, 0, 0x0000000000000000000000000000000000000000, 100)
    │   ├─ [40649] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Test Content 1", description: "Test description", category: 0, payPerViewPrice: 100000 [1e5], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["test", "content"], isReported: false, reportCount: 0 })
    │   ├─ [1055] PriceOracle::getTokenAmountForUSDC(0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 100000 [1e5], 0)
    │   │   └─ ← [Return] 100000 [1e5]
    │   ├─ [1445] PriceOracle::applySlippage(100000 [1e5], 100) [staticcall]
    │   │   └─ ← [Return] 101000 [1.01e5]
    │   ├─ emit ContentPurchaseInitiated(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, intentId: 0xa4fda21ee56bb9fbd55ff9f1c86373b6, paymentMethod: 0, usdcPrice: 100000 [1e5], expectedPaymentAmount: 101000 [1.01e5])
    │   └─ ← [Return] 0xa4fda21ee56bb9fbd55ff9f1c86373b6, 101000 [1.01e5], 3601
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(101000 [1.01e5], 100000 [1e5]) [staticcall]
    │   └─ ← [Revert] assertion failed: 101000 != 100000
    └─ ← [Revert] assertion failed: 101000 != 100000

[FAIL: Error != expected error: InvalidContentId() != Content not found] test_GetPaymentOptions_NonExistentContent() (gas: 14822)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [14822] PayPerViewTest::test_GetPaymentOptions_NonExistentContent()
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Content not found)
    │   └─ ← [Return]
    ├─ [6378] PayPerView::getPaymentOptions(999)
    │   ├─ [2980] ContentRegistry::getContent(999) [staticcall]
    │   │   └─ ← [Revert] InvalidContentId()
    │   └─ ← [Revert] InvalidContentId()
    └─ ← [Revert] Error != expected error: InvalidContentId() != Content not found

[FAIL: assertion failed] test_GetPaymentOptions_Success() (gas: 82688)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [82688] PayPerViewTest::test_GetPaymentOptions_Success()
    ├─ [66424] PayPerView::getPaymentOptions(1)
    │   ├─ [40649] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Test Content 1", description: "Test description", category: 0, payPerViewPrice: 100000 [1e5], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["test", "content"], isReported: false, reportCount: 0 })
    │   ├─ [9162] PriceOracle::getETHPrice(100000 [1e5])
    │   │   ├─ [0] 0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x4200000000000000000000000000000000000006, tokenOut: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, amountIn: 1000000000000000000 [1e18], fee: 3000, sqrtPriceLimitX96: 0 }))
    │   │   │   └─ ← [Stop]
    │   │   └─ ← [Revert] EvmError: Revert
    │   └─ ← [Return] [0, 1, 2], [100000 [1e5], 0, 0]
    ├─ [0] VM::assertEq(3, 3) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(3, 3) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(100000 [1e5], 100000 [1e5]) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(false) [staticcall]
    │   └─ ← [Revert] assertion failed
    └─ ← [Revert] assertion failed

[PASS] test_HandleExternalRefund_NoPurchase() (gas: 52860)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_HandleExternalRefund_Success() (gas: 665446)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_MultiplePurchases_Success() (gas: 1132318)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_PauseUnpause_Success() (gas: 702575)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_PaymentProcessorRole_Access() (gas: 835272)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_PaymentProcessorRole_Unauthorized() (gas: 251845)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_PurchaseContentDirect_AlreadyPurchased() (gas: 733301)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_PurchaseContentDirect_InactiveContent() (gas: 131275)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_PurchaseContentDirect_InsufficientAllowance() (gas: 126995)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[FAIL: OwnableUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496)] test_PurchaseContentDirect_InsufficientBalance() (gas: 11032)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [11032] PayPerViewTest::test_PurchaseContentDirect_InsufficientBalance()
    ├─ [3202] MockERC20::forceBalance(0x0000000000000000000000000000000000002001, 99999 [9.999e4])
    │   └─ ← [Revert] OwnableUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496)
    └─ ← [Revert] OwnableUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496)

[FAIL: Error != expected error: InvalidContentId() != Content not found] test_PurchaseContentDirect_NonExistentContent() (gas: 56451)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [56451] PayPerViewTest::test_PurchaseContentDirect_NonExistentContent()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(PayPerView: [0x49C602668FE7a8B397255d678684323355754631], 100000 [1e5])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], value: 100000 [1e5])
    │   └─ ← [Return] true
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Content not found)
    │   └─ ← [Return]
    ├─ [13581] PayPerView::purchaseContentDirect(999)
    │   ├─ [2980] ContentRegistry::getContent(999) [staticcall]
    │   │   └─ ← [Revert] InvalidContentId()
    │   └─ ← [Revert] InvalidContentId()
    └─ ← [Revert] Error != expected error: InvalidContentId() != Content not found

[PASS] test_PurchaseContentDirect_Success() (gas: 722156)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_PurchaseIsolation_Success() (gas: 1058803)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[FAIL: Error != expected error: Invalid intent ID format != Content not active] test_RecordExternalPurchase_InactiveContent() (gas: 94531)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [94531] PayPerViewTest::test_RecordExternalPurchase_InactiveContent()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [32671] ContentRegistry::updateContent(1, 0, false)
    │   ├─ emit ContentUpdated(contentId: 1, newPrice: 0, isActive: false)
    │   └─ ← [Stop]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [27544] PayPerView::grantPaymentProcessorRole(PayPerViewTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496])
    │   ├─ emit RoleGranted(role: 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919, account: PayPerViewTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Content not active)
    │   └─ ← [Return]
    ├─ [7334] PayPerView::recordExternalPurchase(1, 0x0000000000000000000000000000000000002001, 0x00000000000000000000000000000000, 100000 [1e5], MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966], 100000 [1e5])
    │   └─ ← [Revert] Invalid intent ID format
    └─ ← [Revert] Error != expected error: Invalid intent ID format != Content not active

[PASS] test_RecordExternalPurchase_Success() (gas: 654453)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_RecordExternalPurchase_Unauthorized() (gas: 20448)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_RequestRefund_AlreadyRefunded() (gas: 881335)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_RequestRefund_NoPurchase() (gas: 24815)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_RequestRefund_Success() (gas: 880680)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_RequestRefund_WindowExpired() (gas: 689510)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[PASS] test_WithdrawEarnings_NoEarnings() (gas: 19119)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

[FAIL: OwnableUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496)] test_WithdrawEarnings_Success() (gas: 706448)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [706448] PayPerViewTest::test_WithdrawEarnings_Success()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(PayPerView: [0x49C602668FE7a8B397255d678684323355754631], 100000 [1e5])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], value: 100000 [1e5])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [659380] PayPerView::purchaseContentDirect(1)
    │   ├─ [40649] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Test Content 1", description: "Test description", category: 0, payPerViewPrice: 100000 [1e5], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["test", "content"], isReported: false, reportCount: 0 })
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(100000 [1e5]) [staticcall]
    │   │   └─ ← [Return] 2500
    │   ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 1000000000 [1e9]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, PayPerView: [0x49C602668FE7a8B397255d678684323355754631]) [staticcall]
    │   │   └─ ← [Return] 100000 [1e5]
    │   ├─ [54088] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, PayPerView: [0x49C602668FE7a8B397255d678684323355754631], 100000 [1e5])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], value: 100000 [1e5])
    │   │   └─ ← [Return] true
    │   ├─ [73631] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 97500 [9.75e4], 0, 0)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 97500 [9.75e4], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ [70825] ContentRegistry::recordPurchase(1, 0x0000000000000000000000000000000000002001)
    │   │   ├─ emit ContentPurchased(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, price: 100000 [1e5], timestamp: 1)
    │   │   └─ ← [Stop]
    │   ├─ emit DirectPurchaseCompleted(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 100000 [1e5], platformFee: 2500, creatorEarning: 97500 [9.75e4])
    │   └─ ← [Stop]
    ├─ [1225] MockERC20::mint(PayPerView: [0x49C602668FE7a8B397255d678684323355754631], 97500 [9.75e4])
    │   └─ ← [Revert] OwnableUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496)
    └─ ← [Revert] OwnableUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496)

Suite result: FAILED. 24 passed; 12 failed; 0 skipped; finished in 33.67ms (15.20ms CPU time)

Ran 10 test suites in 425.35ms (235.20ms CPU time): 120 tests passed, 70 failed, 0 skipped (190 total tests)

Failing tests:
Encountered 1 failing test in test/integration/BusinessScenarios.t.sol:BusinessScenariosTest
[FAIL: OwnableUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496)] setUp() (gas: 0)

Encountered 9 failing tests in test/integration/CommerceProtocolFlow.t.sol:CommerceProtocolFlowTest
[FAIL: EvmError: Revert] test_CompletePaymentFlow_Success() (gas: 156911)
[FAIL: EvmError: Revert] test_ConcurrentPaymentIntents_Success() (gas: 191846)
[FAIL: EvmError: Revert] test_CreateContentPaymentIntent_AlternativeToken() (gas: 156872)
[FAIL: call reverted as expected, but without data] test_CreatePaymentIntent_InsufficientBalance() (gas: 186902)
[FAIL: EvmError: Revert] test_CreateSubscriptionPaymentIntent_NonStandardDecimals() (gas: 90198)
[FAIL: EvmError: Revert] test_ExecutePayment_InvalidSignature() (gas: 156846)
[FAIL: EvmError: Revert] test_OperatorMetrics_Tracking() (gas: 167264)
[FAIL: EvmError: Revert] test_PaymentProcessing_Failure() (gas: 156868)
[FAIL: EvmError: Revert] test_SubscriptionFlow_AlternativeToken() (gas: 90217)

Encountered 7 failing tests in test/integration/CrossContractInteraction.t.sol:CrossContractInteractionTest
[FAIL: AccessControlUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496, 0x0000000000000000000000000000000000000000000000000000000000000000)] test_AdminRoleChanges_GlobalEffects() (gas: 17609)
[FAIL: next call did not revert as expected] test_CreatorDeactivation_CascadeEffects() (gas: 1608914)
[FAIL: assertion failed] test_CreatorProfileUpdate_PropagatesCorrectly() (gas: 1254754)
[FAIL: EvmError: Revert] test_PaymentFailure_StateConsistency() (gas: 156587)
[FAIL: panic: failed to convert value into enum type (0x21)] test_PlatformWideOperations_Consistency() (gas: 3581062)
[FAIL: AccessControlUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496, 0x0000000000000000000000000000000000000000000000000000000000000000)] test_RoleChanges_CrossContractPermissions() (gas: 168827)
[FAIL: AccessControlUnauthorizedAccount(0x0000000000000000000000000000000000002001, 0x1fa68478e710912de24d46d09a1aa735096685a61549eeb0fefb3693b245e69c)] test_SubscriptionRenewal_MultiContractUpdate() (gas: 757760)

Encountered 4 failing tests in test/integration/EndToEndFlow.t.sol:EndToEndFlowTest
[FAIL: InvalidAutoRenewalConfig()] test_AutoRenewalIntegration_Success() (gas: 667639)
[FAIL: EvmError: Revert] test_CommerceProtocolIntegration_CustomToken() (gas: 1305194)
[FAIL: assertion failed: 0 != 1] test_CompleteCreatorJourney_Success() (gas: 1488179)
[FAIL: assertion failed: 0 != 2] test_CrossContractConsistency_Success() (gas: 1280498)

Encountered 1 failing test in test/unit/CommerceProtocolIntegration.t.sol:CommerceProtocolIntegrationTest
[FAIL: AccessControlUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496, 0x0000000000000000000000000000000000000000000000000000000000000000)] setUp() (gas: 0)

Encountered 9 failing tests in test/unit/ContentRegistry.t.sol:ContentRegistryTest
[FAIL: Error != expected error: BannedWordDetected("get rich quick") != custom error 0x816a9c2b] test_BanPhrase_Success() (gas: 206743)
[FAIL: next call did not revert as expected] test_BanWord_Success() (gas: 855327)
[FAIL: panic: failed to convert value into enum type (0x21)] test_GetPlatformStats_Success() (gas: 1505422)
[FAIL: panic: failed to convert value into enum type (0x21)] test_RegisterContent_CreatorNotRegistered() (gas: 74399)
[FAIL: panic: failed to convert value into enum type (0x21)] test_RegisterContent_DifferentCategories() (gas: 5039870)
[FAIL: next call did not revert as expected] test_RegisterContent_InvalidIPFSHash() (gas: 773549)
[FAIL: panic: failed to convert value into enum type (0x21)] test_RegisterContent_Success() (gas: 906289)
[FAIL: panic: failed to convert value into enum type (0x21)] test_ResolveReport_RemoveContent() (gas: 951927)
[FAIL: panic: failed to convert value into enum type (0x21)] test_UpdateContent_Deactivation() (gas: 682838)

Encountered 2 failing tests in test/unit/CreatorRegistry.t.sol:CreatorRegistryTest
[FAIL: assertion failed] test_UpdateProfileData_EmptyData() (gas: 207017)
[FAIL: OwnableUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496)] test_WithdrawCreatorEarnings_Success() (gas: 309865)

Encountered 12 failing tests in test/unit/PayPerView.t.sol:PayPerViewTest
[FAIL: next call did not revert as expected] test_CompletePurchase_InsufficientPayment() (gas: 837913)
[FAIL: log != expected log] test_CompletePurchase_Success() (gas: 846525)
[FAIL: EvmError: Revert] test_CreatePurchaseIntent_ETH() (gas: 110779)
[FAIL: Error != expected error: InvalidContentId() != Content not found] test_CreatePurchaseIntent_NonExistentContent() (gas: 25839)
[FAIL: EvmError: Revert] test_CreatePurchaseIntent_OtherToken() (gas: 147074)
[FAIL: assertion failed: 101000 != 100000] test_CreatePurchaseIntent_USDC() (gas: 253742)
[FAIL: Error != expected error: InvalidContentId() != Content not found] test_GetPaymentOptions_NonExistentContent() (gas: 14822)
[FAIL: assertion failed] test_GetPaymentOptions_Success() (gas: 82688)
[FAIL: OwnableUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496)] test_PurchaseContentDirect_InsufficientBalance() (gas: 11032)
[FAIL: Error != expected error: InvalidContentId() != Content not found] test_PurchaseContentDirect_NonExistentContent() (gas: 56451)
[FAIL: Error != expected error: Invalid intent ID format != Content not active] test_RecordExternalPurchase_InactiveContent() (gas: 94531)
[FAIL: OwnableUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496)] test_WithdrawEarnings_Success() (gas: 706448)

Encountered 19 failing tests in test/unit/PriceOracle.t.sol:PriceOracleTest
[FAIL: EvmError: Revert] test_GetETHPrice_DifferentAmounts() (gas: 15357)
[FAIL: call reverted as expected, but without data] test_GetETHPrice_QuoterFails() (gas: 46226)
[FAIL: EvmError: Revert] test_GetETHPrice_Success() (gas: 14466)
[FAIL: EvmError: Revert] test_GetMultipleQuotes_MissingPools() (gas: 44002)
[FAIL: EvmError: Revert] test_GetMultipleQuotes_Success() (gas: 35177)
[FAIL: EvmError: Revert] test_GetTokenAmountForUSDC_AutoPoolFee() (gas: 19033)
[FAIL: EvmError: Revert] test_GetTokenAmountForUSDC_Success() (gas: 14012)
[FAIL: EvmError: Revert] test_GetTokenAmountForUSDC_ViaWETHRoute() (gas: 72470)
[FAIL: EvmError: Revert] test_GetTokenPrice_AutoPoolFee() (gas: 15487)
[FAIL: call reverted as expected, but without data] test_GetTokenPrice_QuoterFails() (gas: 42394)
[FAIL: EvmError: Revert] test_GetTokenPrice_Success() (gas: 10457)
[FAIL: EvmError: Revert] test_OptimalPoolFeeDetection() (gas: 15660)
[FAIL: EvmError: Revert] test_PriceCalculation_LargeAmounts() (gas: 14467)
[FAIL: EvmError: Revert] test_PriceCalculation_SmallAmounts() (gas: 14422)
[FAIL: EvmError: Revert] test_PriceCalculation_ZeroAmount() (gas: 14459)
[FAIL: EvmError: Revert] test_PriceConsistency() (gas: 14466)
[FAIL: EvmError: Revert] test_SetCustomPoolFee_Success() (gas: 59868)
[FAIL: EvmError: Revert] test_TokenDecimalHandling() (gas: 15843)
[FAIL: call reverted as expected, but without data] test_UnsupportedTokenPairs() (gas: 22319)

Encountered 6 failing tests in test/unit/SubscriptionManager.t.sol:SubscriptionManagerTest
[FAIL: log != expected log] test_CancelSubscription_Immediate() (gas: 651624)
[FAIL: Error != expected error: InsufficientBalance() != RenewalTooSoon()] test_ExecuteAutoRenewal_RateLimiting() (gas: 895025)
[FAIL: log != expected log] test_ExecuteAutoRenewal_Success() (gas: 868021)
[FAIL: log != expected log] test_HandleExternalRefund_Success() (gas: 711813)
[FAIL: OwnableUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496)] test_SubscribeToCreator_InsufficientBalance() (gas: 11077)
[FAIL: OwnableUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496)] test_WithdrawSubscriptionEarnings_Success() (gas: 635844)

Encountered a total of 70 failing tests, 120 tests succeeded
