No files changed, compilation skipped

Ran 38 tests for test/unit/SubscriptionManager.t.sol:SubscriptionManagerTest
[PASS] test_CancelSubscription_AlreadyExpired() (gas: 617768)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [640468] SubscriptionManagerTest::test_CancelSubscription_AlreadyExpired()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [588736] SubscriptionManager::subscribeToCreator(0x0000000000000000000000000000000000001001)
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [2946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(1000000 [1e6]) [staticcall]
    │   │   └─ ← [Return] 25000 [2.5e4]
    │   ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 1000000000 [1e9]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [54088] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   │   └─ ← [Return] true
    │   ├─ [96001] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 975000 [9.75e5], 0, 1)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 975000 [9.75e5], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ emit Subscribed(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 1000000 [1e6], platformFee: 25000 [2.5e4], creatorEarning: 975000 [9.75e5], startTime: 1, endTime: 2592001 [2.592e6])
    │   └─ ← [Stop]
    ├─ [0] VM::warp(2592002 [2.592e6])
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [0] VM::expectRevert(custom error 0xc31eb0e0: 5O)
    │   └─ ← [Return]
    ├─ [4124] SubscriptionManager::cancelSubscription(0x0000000000000000000000000000000000001001, false)
    │   └─ ← [Revert] SubscriptionNotFound()
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    └─ ← [Stop]

[FAIL: log != expected log] test_CancelSubscription_Immediate() (gas: 651624)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [38309479] SubscriptionManagerTest::setUp()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [1138080] → new MockERC20@0x22a7C94543caa0e72439289e039B35a64C79A966
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 5327 bytes of code
    ├─ [47643] MockERC20::mint(0x0000000000000000000000000000000000003001, 1000000000000 [1e12])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000003001, value: 1000000000000 [1e12])
    │   └─ ← [Stop]
    ├─ [1084925] → new MockCommerceProtocol@0xe1796e76a573113CcEDB6D266ae099471117972D
    │   └─ ← [Return] 5419 bytes of code
    ├─ [1503810] → new MockQuoterV2@0xCd54ec27b8c42B24BF58244214B5999334C58959
    │   └─ ← [Return] 6617 bytes of code
    ├─ [0] console::log("Mock dependencies deployed:") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock USDC:", MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock Commerce Protocol:", MockCommerceProtocol: [0xe1796e76a573113CcEDB6D266ae099471117972D]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock Quoter:", MockQuoterV2: [0xCd54ec27b8c42B24BF58244214B5999334C58959]) [staticcall]
    │   └─ ← [Stop]
    ├─ [1710396] → new PriceOracle@0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 8313 bytes of code
    ├─ [4031410] → new CreatorRegistry@0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 19432 bytes of code
    ├─ [5389674] → new ContentRegistry@0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 25995 bytes of code
    ├─ [6590652] → new PayPerView@0x49C602668FE7a8B397255d678684323355754631
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xc89f08b49c068684bf15b77e68611a9f601e70d1f919059510bccd18e691e535, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 32302 bytes of code
    ├─ [7122434] → new SubscriptionManager@0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x1fa68478e710912de24d46d09a1aa735096685a61549eeb0fefb3693b245e69c, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x4a2743f41a15276dad6813e73326037e88c2a55ffdd5c4cab4ea1745629b0d34, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 34738 bytes of code
    ├─ [8485998] → new CommerceProtocolIntegration@0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x501c65bac3e4ac3ac69864ba85559de0249f52b20e002f1e1d1232fd4e169231, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xe2f4eaae4a9751e85a3e4a7b9587827a877f29914755229b07a7b2da98285f70, account: 0x0000000000000000000000000000000000003003, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 41307 bytes of code
    ├─ [0] console::log("Core contracts deployed:") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- CreatorRegistry:", CreatorRegistry: [0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- ContentRegistry:", ContentRegistry: [0x483a0eDa4d8856c61347B0F2e5B84a7af717c308]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- PayPerView:", PayPerView: [0x49C602668FE7a8B397255d678684323355754631]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- SubscriptionManager:", SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- CommerceIntegration:", CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B]) [staticcall]
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25566] ContentRegistry::grantPurchaseRecorderRole(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit RoleGranted(role: 0x9587bd5d64fd9020a2c3c45e38d0e7ca3330d50e4b4dd00bfe972ac5de3bc565, account: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25544] PayPerView::grantPaymentProcessorRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25544] SubscriptionManager::grantSubscriptionProcessorRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0x4a2743f41a15276dad6813e73326037e88c2a55ffdd5c4cab4ea1745629b0d34, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25735] CommerceProtocolIntegration::setPayPerView(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit ContractAddressUpdated(contractName: "PayPerView", oldAddress: 0x0000000000000000000000000000000000000000, newAddress: PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   └─ ← [Stop]
    ├─ [25756] CommerceProtocolIntegration::setSubscriptionManager(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   ├─ emit ContractAddressUpdated(contractName: "SubscriptionManager", oldAddress: 0x0000000000000000000000000000000000000000, newAddress: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   └─ ← [Stop]
    ├─ [0] console::log("Contract permissions configured") [staticcall]
    │   └─ ← [Stop]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000001001, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000001001, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000001001, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000001002, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000001002, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000001002, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000002001, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000002001, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000002001, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000002002, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000002002, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000002002, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [0] console::log("Test users set up with initial balances") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [174504] CreatorRegistry::registerCreator(1000000 [1e6], "Creator 1")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000001001, subscriptionPrice: 1000000 [1e6], timestamp: 1, profileData: "Creator 1")
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001002)
    │   └─ ← [Return]
    ├─ [150604] CreatorRegistry::registerCreator(2000000 [2e6], "Creator 2")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000001002, subscriptionPrice: 2000000 [2e6], timestamp: 1, profileData: "Creator 2")
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    └─ ← [Stop]

  [651624] SubscriptionManagerTest::test_CancelSubscription_Immediate()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [588736] SubscriptionManager::subscribeToCreator(0x0000000000000000000000000000000000001001)
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [2946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(1000000 [1e6]) [staticcall]
    │   │   └─ ← [Return] 25000 [2.5e4]
    │   ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 1000000000 [1e9]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [54088] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   │   └─ ← [Return] true
    │   ├─ [96001] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 975000 [9.75e5], 0, 1)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 975000 [9.75e5], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ emit Subscribed(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 1000000 [1e6], platformFee: 25000 [2.5e4], creatorEarning: 975000 [9.75e5], startTime: 1, endTime: 2592001 [2.592e6])
    │   └─ ← [Stop]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [0] VM::expectEmit(true, true, false, true)
    │   └─ ← [Return]
    ├─ emit SubscriptionCancelled(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, endTime: 1, immediate: true)
    ├─ [13611] SubscriptionManager::cancelSubscription(0x0000000000000000000000000000000000001001, true)
    │   ├─ emit SubscriptionCancelled(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, endTime: 2592001 [2.592e6], immediate: true)
    │   └─ ← [Stop]
    └─ ← [Revert] log != expected log

[PASS] test_CancelSubscription_NaturalExpiry() (gas: 650700)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [676200] SubscriptionManagerTest::test_CancelSubscription_NaturalExpiry()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [588736] SubscriptionManager::subscribeToCreator(0x0000000000000000000000000000000000001001)
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [2946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(1000000 [1e6]) [staticcall]
    │   │   └─ ← [Return] 25000 [2.5e4]
    │   ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 1000000000 [1e9]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [54088] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   │   └─ ← [Return] true
    │   ├─ [96001] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 975000 [9.75e5], 0, 1)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 975000 [9.75e5], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ emit Subscribed(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 1000000 [1e6], platformFee: 25000 [2.5e4], creatorEarning: 975000 [9.75e5], startTime: 1, endTime: 2592001 [2.592e6])
    │   └─ ← [Stop]
    ├─ [1205] SubscriptionManager::getSubscriptionEndTime(0x0000000000000000000000000000000000002001, 0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] 2592001 [2.592e6]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [0] VM::expectEmit(true, true, false, true)
    │   └─ ← [Return]
    ├─ emit SubscriptionCancelled(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, endTime: 2592001 [2.592e6], immediate: false)
    ├─ [9463] SubscriptionManager::cancelSubscription(0x0000000000000000000000000000000000001001, false)
    │   ├─ emit SubscriptionCancelled(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, endTime: 2592001 [2.592e6], immediate: false)
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [1257] SubscriptionManager::isSubscribed(0x0000000000000000000000000000000000002001, 0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] true
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [1205] SubscriptionManager::getSubscriptionEndTime(0x0000000000000000000000000000000000002001, 0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] 2592001 [2.592e6]
    ├─ [0] VM::assertEq(2592001 [2.592e6], 2592001 [2.592e6]) [staticcall]
    │   └─ ← [Return]
    ├─ [10433] SubscriptionManager::getAutoRenewalConfig(0x0000000000000000000000000000000000002001, 0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] AutoRenewal({ enabled: false, maxPrice: 0, balance: 0, lastRenewalAttempt: 0, failedAttempts: 0 })
    ├─ [0] VM::assertFalse(false) [staticcall]
    │   └─ ← [Return]
    ├─ [3282] SubscriptionManager::getSubscriptionDetails(0x0000000000000000000000000000000000002001, 0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] SubscriptionRecord({ isActive: true, startTime: 1, endTime: 2592001 [2.592e6], renewalCount: 0, totalPaid: 1000000 [1e6], lastPayment: 1000000 [1e6] })
    ├─ [0] VM::assertFalse(false) [staticcall]
    │   └─ ← [Return]
    └─ ← [Stop]

[PASS] test_CancelSubscription_NotSubscribed() (gas: 21747)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [21747] SubscriptionManagerTest::test_CancelSubscription_NotSubscribed()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [0] VM::expectRevert(custom error 0xc31eb0e0: 5O)
    │   └─ ← [Return]
    ├─ [8114] SubscriptionManager::cancelSubscription(0x0000000000000000000000000000000000001001, false)
    │   └─ ← [Revert] SubscriptionNotFound()
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    └─ ← [Stop]

[PASS] test_CleanupExpiredSubscriptionsEnhanced_Success() (gas: 813620)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [1001120] SubscriptionManagerTest::test_CleanupExpiredSubscriptionsEnhanced_Success()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002002)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002002, spender: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [588736] SubscriptionManager::subscribeToCreator(0x0000000000000000000000000000000000001001)
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [2946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(1000000 [1e6]) [staticcall]
    │   │   └─ ← [Return] 25000 [2.5e4]
    │   ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 1000000000 [1e9]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [54088] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   │   └─ ← [Return] true
    │   ├─ [96001] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 975000 [9.75e5], 0, 1)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 975000 [9.75e5], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ emit Subscribed(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 1000000 [1e6], platformFee: 25000 [2.5e4], creatorEarning: 975000 [9.75e5], startTime: 1, endTime: 2592001 [2.592e6])
    │   └─ ← [Stop]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002002)
    │   └─ ← [Return]
    ├─ [287536] SubscriptionManager::subscribeToCreator(0x0000000000000000000000000000000000001001)
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [1232] CreatorRegistry::calculatePlatformFee(1000000 [1e6]) [staticcall]
    │   │   └─ ← [Return] 25000 [2.5e4]
    │   ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002002) [staticcall]
    │   │   └─ ← [Return] 1000000000 [1e9]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002002, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [8288] MockERC20::transferFrom(0x0000000000000000000000000000000000002002, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002002, to: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   │   └─ ← [Return] true
    │   ├─ [6401] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 975000 [9.75e5], 0, 1)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 975000 [9.75e5], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ emit Subscribed(user: 0x0000000000000000000000000000000000002002, creator: 0x0000000000000000000000000000000000001001, price: 1000000 [1e6], platformFee: 25000 [2.5e4], creatorEarning: 975000 [9.75e5], startTime: 1, endTime: 2592001 [2.592e6])
    │   └─ ← [Stop]
    ├─ [0] VM::warp(2851202 [2.851e6])
    │   └─ ← [Return]
    ├─ [43991] SubscriptionManager::cleanupExpiredSubscriptionsEnhanced(0x0000000000000000000000000000000000001001)
    │   ├─ emit ExpiredSubscriptionsCleaned(creator: 0x0000000000000000000000000000000000001001, cleanedCount: 2, timestamp: 2851202 [2.851e6])
    │   ├─ emit SubscriptionExpired(user: 0x0000000000000000000000000000000000002002, creator: 0x0000000000000000000000000000000000001001, timestamp: 2851202 [2.851e6])
    │   ├─ emit SubscriptionExpired(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, timestamp: 2851202 [2.851e6])
    │   └─ ← [Return] [0x0000000000000000000000000000000000002002, 0x0000000000000000000000000000000000002001]
    ├─ [0] VM::assertEq(2, 2) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    └─ ← [Stop]

[PASS] test_CleanupExpiredSubscriptions_RateLimiting() (gas: 548458)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [673458] SubscriptionManagerTest::test_CleanupExpiredSubscriptions_RateLimiting()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [588736] SubscriptionManager::subscribeToCreator(0x0000000000000000000000000000000000001001)
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [2946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(1000000 [1e6]) [staticcall]
    │   │   └─ ← [Return] 25000 [2.5e4]
    │   ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 1000000000 [1e9]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [54088] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   │   └─ ← [Return] true
    │   ├─ [96001] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 975000 [9.75e5], 0, 1)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 975000 [9.75e5], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ emit Subscribed(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 1000000 [1e6], platformFee: 25000 [2.5e4], creatorEarning: 975000 [9.75e5], startTime: 1, endTime: 2592001 [2.592e6])
    │   └─ ← [Stop]
    ├─ [0] VM::warp(2851202 [2.851e6])
    │   └─ ← [Return]
    ├─ [33201] SubscriptionManager::cleanupExpiredSubscriptions(0x0000000000000000000000000000000000001001)
    │   ├─ emit ExpiredSubscriptionsCleaned(creator: 0x0000000000000000000000000000000000001001, cleanedCount: 1, timestamp: 2851202 [2.851e6])
    │   └─ ← [Stop]
    ├─ [0] VM::expectRevert(custom error 0xc31eb0e0: e205ec1800000000000000000000000000000000000000000000000000000000)
    │   └─ ← [Return]
    ├─ [4008] SubscriptionManager::cleanupExpiredSubscriptions(0x0000000000000000000000000000000000001001)
    │   └─ ← [Revert] CleanupTooSoon()
    └─ ← [Stop]

[PASS] test_CleanupExpiredSubscriptions_Success() (gas: 828287)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [1015787] SubscriptionManagerTest::test_CleanupExpiredSubscriptions_Success()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002002)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002002, spender: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [588736] SubscriptionManager::subscribeToCreator(0x0000000000000000000000000000000000001001)
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [2946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(1000000 [1e6]) [staticcall]
    │   │   └─ ← [Return] 25000 [2.5e4]
    │   ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 1000000000 [1e9]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [54088] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   │   └─ ← [Return] true
    │   ├─ [96001] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 975000 [9.75e5], 0, 1)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 975000 [9.75e5], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ emit Subscribed(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 1000000 [1e6], platformFee: 25000 [2.5e4], creatorEarning: 975000 [9.75e5], startTime: 1, endTime: 2592001 [2.592e6])
    │   └─ ← [Stop]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002002)
    │   └─ ← [Return]
    ├─ [287536] SubscriptionManager::subscribeToCreator(0x0000000000000000000000000000000000001001)
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [1232] CreatorRegistry::calculatePlatformFee(1000000 [1e6]) [staticcall]
    │   │   └─ ← [Return] 25000 [2.5e4]
    │   ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002002) [staticcall]
    │   │   └─ ← [Return] 1000000000 [1e9]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002002, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [8288] MockERC20::transferFrom(0x0000000000000000000000000000000000002002, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002002, to: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   │   └─ ← [Return] true
    │   ├─ [6401] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 975000 [9.75e5], 0, 1)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 975000 [9.75e5], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ emit Subscribed(user: 0x0000000000000000000000000000000000002002, creator: 0x0000000000000000000000000000000000001001, price: 1000000 [1e6], platformFee: 25000 [2.5e4], creatorEarning: 975000 [9.75e5], startTime: 1, endTime: 2592001 [2.592e6])
    │   └─ ← [Stop]
    ├─ [2456] SubscriptionManager::getCreatorSubscribers(0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] [0x0000000000000000000000000000000000002001, 0x0000000000000000000000000000000000002002]
    ├─ [0] VM::assertEq(2, 2) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::warp(2851202 [2.851e6])
    │   └─ ← [Return]
    ├─ [0] VM::expectEmit(true, false, false, true)
    │   └─ ← [Return]
    ├─ emit ExpiredSubscriptionsCleaned(creator: 0x0000000000000000000000000000000000001001, cleanedCount: 2, timestamp: 2851202 [2.851e6])
    ├─ [38008] SubscriptionManager::cleanupExpiredSubscriptions(0x0000000000000000000000000000000000001001)
    │   ├─ emit ExpiredSubscriptionsCleaned(creator: 0x0000000000000000000000000000000000001001, cleanedCount: 2, timestamp: 2851202 [2.851e6])
    │   └─ ← [Stop]
    ├─ [1375] SubscriptionManager::getCreatorSubscribers(0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] []
    ├─ [0] VM::assertEq(0, 0) [staticcall]
    │   └─ ← [Return]
    ├─ [3282] SubscriptionManager::getSubscriptionDetails(0x0000000000000000000000000000000000002001, 0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] SubscriptionRecord({ isActive: false, startTime: 1, endTime: 2592001 [2.592e6], renewalCount: 0, totalPaid: 1000000 [1e6], lastPayment: 1000000 [1e6] })
    ├─ [3282] SubscriptionManager::getSubscriptionDetails(0x0000000000000000000000000000000000002002, 0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] SubscriptionRecord({ isActive: false, startTime: 1, endTime: 2592001 [2.592e6], renewalCount: 0, totalPaid: 1000000 [1e6], lastPayment: 1000000 [1e6] })
    ├─ [0] VM::assertFalse(false) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertFalse(false) [staticcall]
    │   └─ ← [Return]
    └─ ← [Stop]

[PASS] test_ConfigureAutoRenewal_CreatorNotRegistered() (gas: 26505)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [26505] SubscriptionManagerTest::test_ConfigureAutoRenewal_CreatorNotRegistered()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [0] VM::expectRevert(custom error 0xc31eb0e0: 2bad89bb00000000000000000000000000000000000000000000000000000000)
    │   └─ ← [Return]
    ├─ [14620] SubscriptionManager::configureAutoRenewal(0x0000000000000000000000000000000000009999, true, 1000000 [1e6], 0)
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000009999) [staticcall]
    │   │   └─ ← [Return] false
    │   └─ ← [Revert] CreatorNotRegistered()
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    └─ ← [Stop]

[PASS] test_ConfigureAutoRenewal_Disable() (gas: 189099)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [241639] SubscriptionManagerTest::test_ConfigureAutoRenewal_Disable()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [171292] SubscriptionManager::configureAutoRenewal(0x0000000000000000000000000000000000001001, true, 1000000 [1e6], 1000000 [1e6])
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [2946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 1000000000 [1e9]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [54088] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   │   └─ ← [Return] true
    │   ├─ emit AutoRenewalConfigured(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, enabled: true, maxPrice: 1000000 [1e6], depositAmount: 1000000 [1e6])
    │   └─ ← [Stop]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [0] VM::expectEmit(true, true, false, true)
    │   └─ ← [Return]
    ├─ emit AutoRenewalConfigured(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, enabled: false, maxPrice: 0, depositAmount: 0)
    ├─ [10141] SubscriptionManager::configureAutoRenewal(0x0000000000000000000000000000000000001001, false, 0, 0)
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ emit AutoRenewalConfigured(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, enabled: false, maxPrice: 0, depositAmount: 0)
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [6433] SubscriptionManager::getAutoRenewalConfig(0x0000000000000000000000000000000000002001, 0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] AutoRenewal({ enabled: false, maxPrice: 0, balance: 1000000 [1e6], lastRenewalAttempt: 0, failedAttempts: 0 })
    ├─ [0] VM::assertFalse(false) [staticcall]
    │   └─ ← [Return]
    └─ ← [Stop]

[PASS] test_ConfigureAutoRenewal_InvalidMaxPrice() (gas: 32514)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [32514] SubscriptionManagerTest::test_ConfigureAutoRenewal_InvalidMaxPrice()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [0] VM::expectRevert(custom error 0xc31eb0e0: 4c9aed5100000000000000000000000000000000000000000000000000000000)
    │   └─ ← [Return]
    ├─ [18308] SubscriptionManager::configureAutoRenewal(0x0000000000000000000000000000000000001001, true, 999999 [9.999e5], 0)
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [2946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   └─ ← [Revert] InvalidAutoRenewalConfig()
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    └─ ← [Stop]

[PASS] test_ConfigureAutoRenewal_Success() (gas: 208976)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [231676] SubscriptionManagerTest::test_ConfigureAutoRenewal_Success()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 3000000 [3e6])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 3000000 [3e6])
    │   └─ ← [Return] true
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [0] VM::expectEmit(true, true, false, true)
    │   └─ ← [Return]
    ├─ emit AutoRenewalConfigured(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, enabled: true, maxPrice: 2000000 [2e6], depositAmount: 3000000 [3e6])
    ├─ [171292] SubscriptionManager::configureAutoRenewal(0x0000000000000000000000000000000000001001, true, 2000000 [2e6], 3000000 [3e6])
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [2946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 1000000000 [1e9]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   │   └─ ← [Return] 3000000 [3e6]
    │   ├─ [54088] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 3000000 [3e6])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 3000000 [3e6])
    │   │   └─ ← [Return] true
    │   ├─ emit AutoRenewalConfigured(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, enabled: true, maxPrice: 2000000 [2e6], depositAmount: 3000000 [3e6])
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [6433] SubscriptionManager::getAutoRenewalConfig(0x0000000000000000000000000000000000002001, 0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] AutoRenewal({ enabled: true, maxPrice: 2000000 [2e6], balance: 3000000 [3e6], lastRenewalAttempt: 0, failedAttempts: 0 })
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(2000000 [2e6], 2000000 [2e6]) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(3000000 [3e6], 3000000 [3e6]) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(0, 0) [staticcall]
    │   └─ ← [Return]
    └─ ← [Stop]

[PASS] test_ExecuteAutoRenewal_InsufficientBalance() (gas: 792455)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [837855] SubscriptionManagerTest::test_ExecuteAutoRenewal_InsufficientBalance()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [588736] SubscriptionManager::subscribeToCreator(0x0000000000000000000000000000000000001001)
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [2946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(1000000 [1e6]) [staticcall]
    │   │   └─ ← [Return] 25000 [2.5e4]
    │   ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 1000000000 [1e9]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [54088] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   │   └─ ← [Return] true
    │   ├─ [96001] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 975000 [9.75e5], 0, 1)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 975000 [9.75e5], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ emit Subscribed(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 1000000 [1e6], platformFee: 25000 [2.5e4], creatorEarning: 975000 [9.75e5], startTime: 1, endTime: 2592001 [2.592e6])
    │   └─ ← [Stop]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [23221] MockERC20::approve(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 999999 [9.999e5])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 999999 [9.999e5])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [108192] SubscriptionManager::configureAutoRenewal(0x0000000000000000000000000000000000001001, true, 1000000 [1e6], 999999 [9.999e5])
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 999000000 [9.99e8]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   │   └─ ← [Return] 999999 [9.999e5]
    │   ├─ [5488] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 999999 [9.999e5])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 999999 [9.999e5])
    │   │   └─ ← [Return] true
    │   ├─ emit AutoRenewalConfigured(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, enabled: true, maxPrice: 1000000 [1e6], depositAmount: 999999 [9.999e5])
    │   └─ ← [Stop]
    ├─ [0] VM::warp(2505602 [2.505e6])
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [0] VM::expectEmit(true, true, false, true)
    │   └─ ← [Return]
    ├─ emit AutoRenewalFailed(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, reason: "Insufficient balance", attemptTime: 2505602 [2.505e6])
    ├─ [0] VM::expectRevert(custom error 0xc31eb0e0: f4d678b800000000000000000000000000000000000000000000000000000000)
    │   └─ ← [Return]
    ├─ [59891] SubscriptionManager::executeAutoRenewal(0x0000000000000000000000000000000000002001, 0x0000000000000000000000000000000000001001)
    │   ├─ [946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ emit AutoRenewalFailed(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, reason: "Insufficient balance", attemptTime: 2505602 [2.505e6])
    │   └─ ← [Revert] InsufficientBalance()
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    └─ ← [Stop]

[PASS] test_ExecuteAutoRenewal_NotEnabled() (gas: 624903)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [647603] SubscriptionManagerTest::test_ExecuteAutoRenewal_NotEnabled()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [588736] SubscriptionManager::subscribeToCreator(0x0000000000000000000000000000000000001001)
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [2946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(1000000 [1e6]) [staticcall]
    │   │   └─ ← [Return] 25000 [2.5e4]
    │   ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 1000000000 [1e9]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [54088] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   │   └─ ← [Return] true
    │   ├─ [96001] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 975000 [9.75e5], 0, 1)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 975000 [9.75e5], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ emit Subscribed(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 1000000 [1e6], platformFee: 25000 [2.5e4], creatorEarning: 975000 [9.75e5], startTime: 1, endTime: 2592001 [2.592e6])
    │   └─ ← [Stop]
    ├─ [0] VM::warp(2505602 [2.505e6])
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [0] VM::expectRevert(custom error 0xc31eb0e0: 4c9aed5100000000000000000000000000000000000000000000000000000000)
    │   └─ ← [Return]
    ├─ [8895] SubscriptionManager::executeAutoRenewal(0x0000000000000000000000000000000000002001, 0x0000000000000000000000000000000000001001)
    │   └─ ← [Revert] InvalidAutoRenewalConfig()
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    └─ ← [Stop]

[PASS] test_ExecuteAutoRenewal_PriceExceeded() (gas: 806417)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [854617] SubscriptionManagerTest::test_ExecuteAutoRenewal_PriceExceeded()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [588736] SubscriptionManager::subscribeToCreator(0x0000000000000000000000000000000000001001)
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [2946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(1000000 [1e6]) [staticcall]
    │   │   └─ ← [Return] 25000 [2.5e4]
    │   ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 1000000000 [1e9]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [54088] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   │   └─ ← [Return] true
    │   ├─ [96001] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 975000 [9.75e5], 0, 1)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 975000 [9.75e5], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ emit Subscribed(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 1000000 [1e6], platformFee: 25000 [2.5e4], creatorEarning: 975000 [9.75e5], startTime: 1, endTime: 2592001 [2.592e6])
    │   └─ ← [Stop]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [23221] MockERC20::approve(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [108192] SubscriptionManager::configureAutoRenewal(0x0000000000000000000000000000000000001001, true, 1000000 [1e6], 1000000 [1e6])
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 999000000 [9.99e8]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [5488] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   │   └─ ← [Return] true
    │   ├─ emit AutoRenewalConfigured(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, enabled: true, maxPrice: 1000000 [1e6], depositAmount: 1000000 [1e6])
    │   └─ ← [Stop]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [13365] CreatorRegistry::updateSubscriptionPrice(2000000 [2e6])
    │   ├─ emit SubscriptionPriceUpdated(creator: 0x0000000000000000000000000000000000001001, oldPrice: 1000000 [1e6], newPrice: 2000000 [2e6])
    │   └─ ← [Stop]
    ├─ [0] VM::warp(2505602 [2.505e6])
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [0] VM::expectEmit(true, true, false, true)
    │   └─ ← [Return]
    ├─ emit AutoRenewalFailed(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, reason: "Price exceeded maximum", attemptTime: 2505602 [2.505e6])
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  AutoRenewalFailed)
    │   └─ ← [Return]
    ├─ [59999] SubscriptionManager::executeAutoRenewal(0x0000000000000000000000000000000000002001, 0x0000000000000000000000000000000000001001)
    │   ├─ [946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 2000000 [2e6]
    │   ├─ emit AutoRenewalFailed(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, reason: "Price exceeded maximum", attemptTime: 2505602 [2.505e6])
    │   └─ ← [Revert] AutoRenewalFailed
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    └─ ← [Stop]

[FAIL: Error != expected error: InsufficientBalance() != RenewalTooSoon()] test_ExecuteAutoRenewal_RateLimiting() (gas: 895025)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [38309479] SubscriptionManagerTest::setUp()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [1138080] → new MockERC20@0x22a7C94543caa0e72439289e039B35a64C79A966
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 5327 bytes of code
    ├─ [47643] MockERC20::mint(0x0000000000000000000000000000000000003001, 1000000000000 [1e12])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000003001, value: 1000000000000 [1e12])
    │   └─ ← [Stop]
    ├─ [1084925] → new MockCommerceProtocol@0xe1796e76a573113CcEDB6D266ae099471117972D
    │   └─ ← [Return] 5419 bytes of code
    ├─ [1503810] → new MockQuoterV2@0xCd54ec27b8c42B24BF58244214B5999334C58959
    │   └─ ← [Return] 6617 bytes of code
    ├─ [0] console::log("Mock dependencies deployed:") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock USDC:", MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock Commerce Protocol:", MockCommerceProtocol: [0xe1796e76a573113CcEDB6D266ae099471117972D]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock Quoter:", MockQuoterV2: [0xCd54ec27b8c42B24BF58244214B5999334C58959]) [staticcall]
    │   └─ ← [Stop]
    ├─ [1710396] → new PriceOracle@0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 8313 bytes of code
    ├─ [4031410] → new CreatorRegistry@0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 19432 bytes of code
    ├─ [5389674] → new ContentRegistry@0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 25995 bytes of code
    ├─ [6590652] → new PayPerView@0x49C602668FE7a8B397255d678684323355754631
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xc89f08b49c068684bf15b77e68611a9f601e70d1f919059510bccd18e691e535, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 32302 bytes of code
    ├─ [7122434] → new SubscriptionManager@0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x1fa68478e710912de24d46d09a1aa735096685a61549eeb0fefb3693b245e69c, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x4a2743f41a15276dad6813e73326037e88c2a55ffdd5c4cab4ea1745629b0d34, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 34738 bytes of code
    ├─ [8485998] → new CommerceProtocolIntegration@0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x501c65bac3e4ac3ac69864ba85559de0249f52b20e002f1e1d1232fd4e169231, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xe2f4eaae4a9751e85a3e4a7b9587827a877f29914755229b07a7b2da98285f70, account: 0x0000000000000000000000000000000000003003, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 41307 bytes of code
    ├─ [0] console::log("Core contracts deployed:") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- CreatorRegistry:", CreatorRegistry: [0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- ContentRegistry:", ContentRegistry: [0x483a0eDa4d8856c61347B0F2e5B84a7af717c308]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- PayPerView:", PayPerView: [0x49C602668FE7a8B397255d678684323355754631]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- SubscriptionManager:", SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- CommerceIntegration:", CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B]) [staticcall]
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25566] ContentRegistry::grantPurchaseRecorderRole(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit RoleGranted(role: 0x9587bd5d64fd9020a2c3c45e38d0e7ca3330d50e4b4dd00bfe972ac5de3bc565, account: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25544] PayPerView::grantPaymentProcessorRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25544] SubscriptionManager::grantSubscriptionProcessorRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0x4a2743f41a15276dad6813e73326037e88c2a55ffdd5c4cab4ea1745629b0d34, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25735] CommerceProtocolIntegration::setPayPerView(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit ContractAddressUpdated(contractName: "PayPerView", oldAddress: 0x0000000000000000000000000000000000000000, newAddress: PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   └─ ← [Stop]
    ├─ [25756] CommerceProtocolIntegration::setSubscriptionManager(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   ├─ emit ContractAddressUpdated(contractName: "SubscriptionManager", oldAddress: 0x0000000000000000000000000000000000000000, newAddress: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   └─ ← [Stop]
    ├─ [0] console::log("Contract permissions configured") [staticcall]
    │   └─ ← [Stop]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000001001, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000001001, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000001001, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000001002, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000001002, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000001002, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000002001, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000002001, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000002001, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000002002, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000002002, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000002002, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [0] console::log("Test users set up with initial balances") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [174504] CreatorRegistry::registerCreator(1000000 [1e6], "Creator 1")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000001001, subscriptionPrice: 1000000 [1e6], timestamp: 1, profileData: "Creator 1")
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001002)
    │   └─ ← [Return]
    ├─ [150604] CreatorRegistry::registerCreator(2000000 [2e6], "Creator 2")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000001002, subscriptionPrice: 2000000 [2e6], timestamp: 1, profileData: "Creator 2")
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    └─ ← [Stop]

  [895025] SubscriptionManagerTest::test_ExecuteAutoRenewal_RateLimiting()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [588736] SubscriptionManager::subscribeToCreator(0x0000000000000000000000000000000000001001)
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [2946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(1000000 [1e6]) [staticcall]
    │   │   └─ ← [Return] 25000 [2.5e4]
    │   ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 1000000000 [1e9]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [54088] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   │   └─ ← [Return] true
    │   ├─ [96001] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 975000 [9.75e5], 0, 1)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 975000 [9.75e5], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ emit Subscribed(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 1000000 [1e6], platformFee: 25000 [2.5e4], creatorEarning: 975000 [9.75e5], startTime: 1, endTime: 2592001 [2.592e6])
    │   └─ ← [Stop]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [23221] MockERC20::approve(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 999999 [9.999e5])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 999999 [9.999e5])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [108192] SubscriptionManager::configureAutoRenewal(0x0000000000000000000000000000000000001001, true, 1000000 [1e6], 999999 [9.999e5])
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 999000000 [9.99e8]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   │   └─ ← [Return] 999999 [9.999e5]
    │   ├─ [5488] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 999999 [9.999e5])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 999999 [9.999e5])
    │   │   └─ ← [Return] true
    │   ├─ emit AutoRenewalConfigured(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, enabled: true, maxPrice: 1000000 [1e6], depositAmount: 999999 [9.999e5])
    │   └─ ← [Stop]
    ├─ [0] VM::warp(2505602 [2.505e6])
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [0] VM::expectRevert(custom error 0xc31eb0e0: f4d678b800000000000000000000000000000000000000000000000000000000)
    │   └─ ← [Return]
    ├─ [59891] SubscriptionManager::executeAutoRenewal(0x0000000000000000000000000000000000002001, 0x0000000000000000000000000000000000001001)
    │   ├─ [946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ emit AutoRenewalFailed(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, reason: "Insufficient balance", attemptTime: 2505602 [2.505e6])
    │   └─ ← [Revert] InsufficientBalance()
    ├─ [0] VM::expectRevert(custom error 0xc31eb0e0: fb8c2e9c00000000000000000000000000000000000000000000000000000000)
    │   └─ ← [Return]
    ├─ [59891] SubscriptionManager::executeAutoRenewal(0x0000000000000000000000000000000000002001, 0x0000000000000000000000000000000000001001)
    │   ├─ [946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ emit AutoRenewalFailed(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, reason: "Insufficient balance", attemptTime: 2505602 [2.505e6])
    │   └─ ← [Revert] InsufficientBalance()
    └─ ← [Revert] Error != expected error: InsufficientBalance() != RenewalTooSoon()

[FAIL: log != expected log] test_ExecuteAutoRenewal_Success() (gas: 868021)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [38309479] SubscriptionManagerTest::setUp()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [1138080] → new MockERC20@0x22a7C94543caa0e72439289e039B35a64C79A966
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 5327 bytes of code
    ├─ [47643] MockERC20::mint(0x0000000000000000000000000000000000003001, 1000000000000 [1e12])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000003001, value: 1000000000000 [1e12])
    │   └─ ← [Stop]
    ├─ [1084925] → new MockCommerceProtocol@0xe1796e76a573113CcEDB6D266ae099471117972D
    │   └─ ← [Return] 5419 bytes of code
    ├─ [1503810] → new MockQuoterV2@0xCd54ec27b8c42B24BF58244214B5999334C58959
    │   └─ ← [Return] 6617 bytes of code
    ├─ [0] console::log("Mock dependencies deployed:") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock USDC:", MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock Commerce Protocol:", MockCommerceProtocol: [0xe1796e76a573113CcEDB6D266ae099471117972D]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock Quoter:", MockQuoterV2: [0xCd54ec27b8c42B24BF58244214B5999334C58959]) [staticcall]
    │   └─ ← [Stop]
    ├─ [1710396] → new PriceOracle@0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 8313 bytes of code
    ├─ [4031410] → new CreatorRegistry@0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 19432 bytes of code
    ├─ [5389674] → new ContentRegistry@0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 25995 bytes of code
    ├─ [6590652] → new PayPerView@0x49C602668FE7a8B397255d678684323355754631
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xc89f08b49c068684bf15b77e68611a9f601e70d1f919059510bccd18e691e535, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 32302 bytes of code
    ├─ [7122434] → new SubscriptionManager@0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x1fa68478e710912de24d46d09a1aa735096685a61549eeb0fefb3693b245e69c, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x4a2743f41a15276dad6813e73326037e88c2a55ffdd5c4cab4ea1745629b0d34, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 34738 bytes of code
    ├─ [8485998] → new CommerceProtocolIntegration@0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x501c65bac3e4ac3ac69864ba85559de0249f52b20e002f1e1d1232fd4e169231, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xe2f4eaae4a9751e85a3e4a7b9587827a877f29914755229b07a7b2da98285f70, account: 0x0000000000000000000000000000000000003003, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 41307 bytes of code
    ├─ [0] console::log("Core contracts deployed:") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- CreatorRegistry:", CreatorRegistry: [0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- ContentRegistry:", ContentRegistry: [0x483a0eDa4d8856c61347B0F2e5B84a7af717c308]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- PayPerView:", PayPerView: [0x49C602668FE7a8B397255d678684323355754631]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- SubscriptionManager:", SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- CommerceIntegration:", CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B]) [staticcall]
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25566] ContentRegistry::grantPurchaseRecorderRole(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit RoleGranted(role: 0x9587bd5d64fd9020a2c3c45e38d0e7ca3330d50e4b4dd00bfe972ac5de3bc565, account: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25544] PayPerView::grantPaymentProcessorRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25544] SubscriptionManager::grantSubscriptionProcessorRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0x4a2743f41a15276dad6813e73326037e88c2a55ffdd5c4cab4ea1745629b0d34, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25735] CommerceProtocolIntegration::setPayPerView(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit ContractAddressUpdated(contractName: "PayPerView", oldAddress: 0x0000000000000000000000000000000000000000, newAddress: PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   └─ ← [Stop]
    ├─ [25756] CommerceProtocolIntegration::setSubscriptionManager(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   ├─ emit ContractAddressUpdated(contractName: "SubscriptionManager", oldAddress: 0x0000000000000000000000000000000000000000, newAddress: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   └─ ← [Stop]
    ├─ [0] console::log("Contract permissions configured") [staticcall]
    │   └─ ← [Stop]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000001001, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000001001, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000001001, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000001002, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000001002, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000001002, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000002001, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000002001, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000002001, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000002002, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000002002, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000002002, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [0] console::log("Test users set up with initial balances") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [174504] CreatorRegistry::registerCreator(1000000 [1e6], "Creator 1")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000001001, subscriptionPrice: 1000000 [1e6], timestamp: 1, profileData: "Creator 1")
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001002)
    │   └─ ← [Return]
    ├─ [150604] CreatorRegistry::registerCreator(2000000 [2e6], "Creator 2")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000001002, subscriptionPrice: 2000000 [2e6], timestamp: 1, profileData: "Creator 2")
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    └─ ← [Stop]

  [868021] SubscriptionManagerTest::test_ExecuteAutoRenewal_Success()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [588736] SubscriptionManager::subscribeToCreator(0x0000000000000000000000000000000000001001)
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [2946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(1000000 [1e6]) [staticcall]
    │   │   └─ ← [Return] 25000 [2.5e4]
    │   ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 1000000000 [1e9]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [54088] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   │   └─ ← [Return] true
    │   ├─ [96001] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 975000 [9.75e5], 0, 1)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 975000 [9.75e5], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ emit Subscribed(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 1000000 [1e6], platformFee: 25000 [2.5e4], creatorEarning: 975000 [9.75e5], startTime: 1, endTime: 2592001 [2.592e6])
    │   └─ ← [Stop]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [23221] MockERC20::approve(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 2000000 [2e6])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 2000000 [2e6])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [108192] SubscriptionManager::configureAutoRenewal(0x0000000000000000000000000000000000001001, true, 2000000 [2e6], 2000000 [2e6])
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 999000000 [9.99e8]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   │   └─ ← [Return] 2000000 [2e6]
    │   ├─ [5488] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 2000000 [2e6])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 2000000 [2e6])
    │   │   └─ ← [Return] true
    │   ├─ emit AutoRenewalConfigured(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, enabled: true, maxPrice: 2000000 [2e6], depositAmount: 2000000 [2e6])
    │   └─ ← [Stop]
    ├─ [0] VM::warp(2505602 [2.505e6])
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [0] VM::expectEmit(true, true, false, true)
    │   └─ ← [Return]
    ├─ emit AutoRenewalExecuted(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 1000000 [1e6], newEndTime: 5097602 [5.097e6])
    ├─ [90874] SubscriptionManager::executeAutoRenewal(0x0000000000000000000000000000000000002001, 0x0000000000000000000000000000000000001001)
    │   ├─ [946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [1232] CreatorRegistry::calculatePlatformFee(1000000 [1e6]) [staticcall]
    │   │   └─ ← [Return] 25000 [2.5e4]
    │   ├─ emit AutoRenewalExecuted(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 1000000 [1e6], newEndTime: 5184001 [5.184e6])
    │   ├─ emit SubscriptionRenewed(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 1000000 [1e6], newEndTime: 5184001 [5.184e6], renewalCount: 1)
    │   └─ ← [Stop]
    └─ ← [Revert] log != expected log

[PASS] test_GetPlatformSubscriptionMetrics_Success() (gas: 1076949)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [1122349] SubscriptionManagerTest::test_GetPlatformSubscriptionMetrics_Success()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002002)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 2000000 [2e6])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002002, spender: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 2000000 [2e6])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [588736] SubscriptionManager::subscribeToCreator(0x0000000000000000000000000000000000001001)
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [2946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(1000000 [1e6]) [staticcall]
    │   │   └─ ← [Return] 25000 [2.5e4]
    │   ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 1000000000 [1e9]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [54088] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   │   └─ ← [Return] true
    │   ├─ [96001] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 975000 [9.75e5], 0, 1)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 975000 [9.75e5], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ emit Subscribed(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 1000000 [1e6], platformFee: 25000 [2.5e4], creatorEarning: 975000 [9.75e5], startTime: 1, endTime: 2592001 [2.592e6])
    │   └─ ← [Stop]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002002)
    │   └─ ← [Return]
    ├─ [444836] SubscriptionManager::subscribeToCreator(0x0000000000000000000000000000000000001002)
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001002) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [2946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001002) [staticcall]
    │   │   └─ ← [Return] 2000000 [2e6]
    │   ├─ [1232] CreatorRegistry::calculatePlatformFee(2000000 [2e6]) [staticcall]
    │   │   └─ ← [Return] 50000 [5e4]
    │   ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002002) [staticcall]
    │   │   └─ ← [Return] 1000000000 [1e9]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002002, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   │   └─ ← [Return] 2000000 [2e6]
    │   ├─ [8288] MockERC20::transferFrom(0x0000000000000000000000000000000000002002, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 2000000 [2e6])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002002, to: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 2000000 [2e6])
    │   │   └─ ← [Return] true
    │   ├─ [72101] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001002, 1950000 [1.95e6], 0, 1)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001002, amount: 1950000 [1.95e6], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ emit Subscribed(user: 0x0000000000000000000000000000000000002002, creator: 0x0000000000000000000000000000000000001002, price: 2000000 [2e6], platformFee: 50000 [5e4], creatorEarning: 1950000 [1.95e6], startTime: 1, endTime: 2592001 [2.592e6])
    │   └─ ← [Stop]
    ├─ [5415] SubscriptionManager::getPlatformSubscriptionMetrics() [staticcall]
    │   └─ ← [Return] 2, 3000000 [3e6], 75000 [7.5e4], 0, 0
    ├─ [0] VM::assertEq(2, 2) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(3000000 [3e6], 3000000 [3e6]) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(75000 [7.5e4], 75000 [7.5e4]) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(0, 0) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(0, 0) [staticcall]
    │   └─ ← [Return]
    └─ ← [Stop]

[PASS] test_GetSubscriptionStatus_Success() (gas: 627571)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [650271] SubscriptionManagerTest::test_GetSubscriptionStatus_Success()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [588736] SubscriptionManager::subscribeToCreator(0x0000000000000000000000000000000000001001)
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [2946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(1000000 [1e6]) [staticcall]
    │   │   └─ ← [Return] 25000 [2.5e4]
    │   ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 1000000000 [1e9]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [54088] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   │   └─ ← [Return] true
    │   ├─ [96001] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 975000 [9.75e5], 0, 1)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 975000 [9.75e5], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ emit Subscribed(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 1000000 [1e6], platformFee: 25000 [2.5e4], creatorEarning: 975000 [9.75e5], startTime: 1, endTime: 2592001 [2.592e6])
    │   └─ ← [Stop]
    ├─ [1767] SubscriptionManager::getSubscriptionStatus(0x0000000000000000000000000000000000002001, 0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] true, false, 2592001 [2.592e6], 2851201 [2.851e6]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertFalse(false) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(2592001 [2.592e6], 2592001 [2.592e6]) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(2851201 [2.851e6], 2851201 [2.851e6]) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::warp(2592002 [2.592e6])
    │   └─ ← [Return]
    ├─ [1780] SubscriptionManager::getSubscriptionStatus(0x0000000000000000000000000000000000002001, 0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] false, true, 2592001 [2.592e6], 2851201 [2.851e6]
    ├─ [0] VM::assertFalse(false) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::warp(2851203 [2.851e6])
    │   └─ ← [Return]
    ├─ [1780] SubscriptionManager::getSubscriptionStatus(0x0000000000000000000000000000000000002001, 0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] false, false, 2592001 [2.592e6], 2851201 [2.851e6]
    ├─ [0] VM::assertFalse(false) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertFalse(false) [staticcall]
    │   └─ ← [Return]
    └─ ← [Stop]

[PASS] test_HandleExternalRefund_NoSubscription() (gas: 53018)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [53018] SubscriptionManagerTest::test_HandleExternalRefund_NoSubscription()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [27544] SubscriptionManager::grantSubscriptionProcessorRole(SubscriptionManagerTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496])
    │   ├─ emit RoleGranted(role: 0x4a2743f41a15276dad6813e73326037e88c2a55ffdd5c4cab4ea1745629b0d34, account: SubscriptionManagerTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  No subscription found)
    │   └─ ← [Return]
    ├─ [9073] SubscriptionManager::handleExternalRefund(0x00000000000000000000000000000000, 0x0000000000000000000000000000000000002001, 0x0000000000000000000000000000000000001001)
    │   └─ ← [Revert] No subscription found
    └─ ← [Stop]

[FAIL: log != expected log] test_HandleExternalRefund_Success() (gas: 711813)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [38309479] SubscriptionManagerTest::setUp()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [1138080] → new MockERC20@0x22a7C94543caa0e72439289e039B35a64C79A966
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 5327 bytes of code
    ├─ [47643] MockERC20::mint(0x0000000000000000000000000000000000003001, 1000000000000 [1e12])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000003001, value: 1000000000000 [1e12])
    │   └─ ← [Stop]
    ├─ [1084925] → new MockCommerceProtocol@0xe1796e76a573113CcEDB6D266ae099471117972D
    │   └─ ← [Return] 5419 bytes of code
    ├─ [1503810] → new MockQuoterV2@0xCd54ec27b8c42B24BF58244214B5999334C58959
    │   └─ ← [Return] 6617 bytes of code
    ├─ [0] console::log("Mock dependencies deployed:") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock USDC:", MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock Commerce Protocol:", MockCommerceProtocol: [0xe1796e76a573113CcEDB6D266ae099471117972D]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock Quoter:", MockQuoterV2: [0xCd54ec27b8c42B24BF58244214B5999334C58959]) [staticcall]
    │   └─ ← [Stop]
    ├─ [1710396] → new PriceOracle@0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 8313 bytes of code
    ├─ [4031410] → new CreatorRegistry@0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 19432 bytes of code
    ├─ [5389674] → new ContentRegistry@0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 25995 bytes of code
    ├─ [6590652] → new PayPerView@0x49C602668FE7a8B397255d678684323355754631
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xc89f08b49c068684bf15b77e68611a9f601e70d1f919059510bccd18e691e535, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 32302 bytes of code
    ├─ [7122434] → new SubscriptionManager@0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x1fa68478e710912de24d46d09a1aa735096685a61549eeb0fefb3693b245e69c, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x4a2743f41a15276dad6813e73326037e88c2a55ffdd5c4cab4ea1745629b0d34, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 34738 bytes of code
    ├─ [8485998] → new CommerceProtocolIntegration@0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x501c65bac3e4ac3ac69864ba85559de0249f52b20e002f1e1d1232fd4e169231, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xe2f4eaae4a9751e85a3e4a7b9587827a877f29914755229b07a7b2da98285f70, account: 0x0000000000000000000000000000000000003003, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 41307 bytes of code
    ├─ [0] console::log("Core contracts deployed:") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- CreatorRegistry:", CreatorRegistry: [0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- ContentRegistry:", ContentRegistry: [0x483a0eDa4d8856c61347B0F2e5B84a7af717c308]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- PayPerView:", PayPerView: [0x49C602668FE7a8B397255d678684323355754631]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- SubscriptionManager:", SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- CommerceIntegration:", CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B]) [staticcall]
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25566] ContentRegistry::grantPurchaseRecorderRole(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit RoleGranted(role: 0x9587bd5d64fd9020a2c3c45e38d0e7ca3330d50e4b4dd00bfe972ac5de3bc565, account: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25544] PayPerView::grantPaymentProcessorRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25544] SubscriptionManager::grantSubscriptionProcessorRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0x4a2743f41a15276dad6813e73326037e88c2a55ffdd5c4cab4ea1745629b0d34, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25735] CommerceProtocolIntegration::setPayPerView(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit ContractAddressUpdated(contractName: "PayPerView", oldAddress: 0x0000000000000000000000000000000000000000, newAddress: PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   └─ ← [Stop]
    ├─ [25756] CommerceProtocolIntegration::setSubscriptionManager(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   ├─ emit ContractAddressUpdated(contractName: "SubscriptionManager", oldAddress: 0x0000000000000000000000000000000000000000, newAddress: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   └─ ← [Stop]
    ├─ [0] console::log("Contract permissions configured") [staticcall]
    │   └─ ← [Stop]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000001001, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000001001, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000001001, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000001002, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000001002, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000001002, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000002001, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000002001, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000002001, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000002002, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000002002, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000002002, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [0] console::log("Test users set up with initial balances") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [174504] CreatorRegistry::registerCreator(1000000 [1e6], "Creator 1")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000001001, subscriptionPrice: 1000000 [1e6], timestamp: 1, profileData: "Creator 1")
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001002)
    │   └─ ← [Return]
    ├─ [150604] CreatorRegistry::registerCreator(2000000 [2e6], "Creator 2")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000001002, subscriptionPrice: 2000000 [2e6], timestamp: 1, profileData: "Creator 2")
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    └─ ← [Stop]

  [711813] SubscriptionManagerTest::test_HandleExternalRefund_Success()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [588736] SubscriptionManager::subscribeToCreator(0x0000000000000000000000000000000000001001)
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [2946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(1000000 [1e6]) [staticcall]
    │   │   └─ ← [Return] 25000 [2.5e4]
    │   ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 1000000000 [1e9]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [54088] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   │   └─ ← [Return] true
    │   ├─ [96001] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 975000 [9.75e5], 0, 1)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 975000 [9.75e5], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ emit Subscribed(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 1000000 [1e6], platformFee: 25000 [2.5e4], creatorEarning: 975000 [9.75e5], startTime: 1, endTime: 2592001 [2.592e6])
    │   └─ ← [Stop]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [27544] SubscriptionManager::grantSubscriptionProcessorRole(SubscriptionManagerTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496])
    │   ├─ emit RoleGranted(role: 0x4a2743f41a15276dad6813e73326037e88c2a55ffdd5c4cab4ea1745629b0d34, account: SubscriptionManagerTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [0] VM::expectEmit(true, true, true, true)
    │   └─ ← [Return]
    ├─ emit ExternalRefundProcessed(intentId: 0x66e9107f2683cb949d9f50bfe72e06bd, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, refundAmount: 1000000 [1e6])
    ├─ [43294] SubscriptionManager::handleExternalRefund(0x66e9107f2683cb949d9f50bfe72e06bd, 0x0000000000000000000000000000000000002001, 0x0000000000000000000000000000000000001001)
    │   ├─ [1232] CreatorRegistry::calculatePlatformFee(1000000 [1e6]) [staticcall]
    │   │   └─ ← [Return] 25000 [2.5e4]
    │   ├─ [3042] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 0, 0, -1)
    │   │   └─ ← [Stop]
    │   ├─ emit ExternalRefundProcessed(intentId: 0x66e9107f2683cb949d9f50bfe72e06bd, user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, refundAmount: 1000000 [1e6])
    │   └─ ← [Stop]
    └─ ← [Revert] log != expected log

[PASS] test_MultipleSubscriptions_Success() (gas: 1026446)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [1051946] SubscriptionManagerTest::test_MultipleSubscriptions_Success()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 3000000 [3e6])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 3000000 [3e6])
    │   └─ ← [Return] true
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [588736] SubscriptionManager::subscribeToCreator(0x0000000000000000000000000000000000001001)
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [2946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(1000000 [1e6]) [staticcall]
    │   │   └─ ← [Return] 25000 [2.5e4]
    │   ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 1000000000 [1e9]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   │   └─ ← [Return] 3000000 [3e6]
    │   ├─ [54088] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   │   └─ ← [Return] true
    │   ├─ [96001] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 975000 [9.75e5], 0, 1)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 975000 [9.75e5], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ emit Subscribed(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 1000000 [1e6], platformFee: 25000 [2.5e4], creatorEarning: 975000 [9.75e5], startTime: 1, endTime: 2592001 [2.592e6])
    │   └─ ← [Stop]
    ├─ [396236] SubscriptionManager::subscribeToCreator(0x0000000000000000000000000000000000001002)
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001002) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [2946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001002) [staticcall]
    │   │   └─ ← [Return] 2000000 [2e6]
    │   ├─ [1232] CreatorRegistry::calculatePlatformFee(2000000 [2e6]) [staticcall]
    │   │   └─ ← [Return] 50000 [5e4]
    │   ├─ [940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 999000000 [9.99e8]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   │   └─ ← [Return] 2000000 [2e6]
    │   ├─ [5488] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 2000000 [2e6])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 2000000 [2e6])
    │   │   └─ ← [Return] true
    │   ├─ [72101] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001002, 1950000 [1.95e6], 0, 1)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001002, amount: 1950000 [1.95e6], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ emit Subscribed(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001002, price: 2000000 [2e6], platformFee: 50000 [5e4], creatorEarning: 1950000 [1.95e6], startTime: 1, endTime: 2592001 [2.592e6])
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [1257] SubscriptionManager::isSubscribed(0x0000000000000000000000000000000000002001, 0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] true
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [1257] SubscriptionManager::isSubscribed(0x0000000000000000000000000000000000002001, 0x0000000000000000000000000000000000001002) [staticcall]
    │   └─ ← [Return] true
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [2457] SubscriptionManager::getUserSubscriptions(0x0000000000000000000000000000000000002001) [staticcall]
    │   └─ ← [Return] [0x0000000000000000000000000000000000001001, 0x0000000000000000000000000000000000001002]
    ├─ [0] VM::assertEq(2, 2) [staticcall]
    │   └─ ← [Return]
    ├─ [5312] SubscriptionManager::getUserActiveSubscriptions(0x0000000000000000000000000000000000002001) [staticcall]
    │   └─ ← [Return] [0x0000000000000000000000000000000000001001, 0x0000000000000000000000000000000000001002]
    ├─ [0] VM::assertEq(2, 2) [staticcall]
    │   └─ ← [Return]
    └─ ← [Stop]

[PASS] test_PauseUnpause_Success() (gas: 632098)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [674698] SubscriptionManagerTest::test_PauseUnpause_Success()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [26167] SubscriptionManager::pause()
    │   ├─ emit Paused(account: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [0] VM::expectRevert(custom error 0xf4844814)
    │   └─ ← [Return]
    ├─ [5836] SubscriptionManager::subscribeToCreator(0x0000000000000000000000000000000000001001)
    │   └─ ← [Revert] EnforcedPause()
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [2240] SubscriptionManager::unpause()
    │   ├─ emit Unpaused(account: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [586736] SubscriptionManager::subscribeToCreator(0x0000000000000000000000000000000000001001)
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [2946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(1000000 [1e6]) [staticcall]
    │   │   └─ ← [Return] 25000 [2.5e4]
    │   ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 1000000000 [1e9]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [54088] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   │   └─ ← [Return] true
    │   ├─ [96001] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 975000 [9.75e5], 0, 1)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 975000 [9.75e5], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ emit Subscribed(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 1000000 [1e6], platformFee: 25000 [2.5e4], creatorEarning: 975000 [9.75e5], startTime: 1, endTime: 2592001 [2.592e6])
    │   └─ ← [Stop]
    ├─ [1257] SubscriptionManager::isSubscribed(0x0000000000000000000000000000000000002001, 0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] true
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    └─ ← [Stop]

[PASS] test_RecordSubscriptionPayment_CreatorNotRegistered() (gas: 57786)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [57786] SubscriptionManagerTest::test_RecordSubscriptionPayment_CreatorNotRegistered()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [27544] SubscriptionManager::grantSubscriptionProcessorRole(SubscriptionManagerTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496])
    │   ├─ emit RoleGranted(role: 0x4a2743f41a15276dad6813e73326037e88c2a55ffdd5c4cab4ea1745629b0d34, account: SubscriptionManagerTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Creator not registered)
    │   └─ ← [Return]
    ├─ [13555] SubscriptionManager::recordSubscriptionPayment(0x0000000000000000000000000000000000002001, 0x0000000000000000000000000000000000009999, 0x00000000000000000000000000000000, 1000000 [1e6], MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966], 1000000 [1e6])
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000009999) [staticcall]
    │   │   └─ ← [Return] false
    │   └─ ← [Revert] Creator not registered
    └─ ← [Stop]

[PASS] test_RecordSubscriptionPayment_Renewal() (gas: 723872)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [749372] SubscriptionManagerTest::test_RecordSubscriptionPayment_Renewal()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [588736] SubscriptionManager::subscribeToCreator(0x0000000000000000000000000000000000001001)
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [2946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(1000000 [1e6]) [staticcall]
    │   │   └─ ← [Return] 25000 [2.5e4]
    │   ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 1000000000 [1e9]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [54088] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   │   └─ ← [Return] true
    │   ├─ [96001] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 975000 [9.75e5], 0, 1)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 975000 [9.75e5], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ emit Subscribed(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 1000000 [1e6], platformFee: 25000 [2.5e4], creatorEarning: 975000 [9.75e5], startTime: 1, endTime: 2592001 [2.592e6])
    │   └─ ← [Stop]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [27544] SubscriptionManager::grantSubscriptionProcessorRole(SubscriptionManagerTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496])
    │   ├─ emit RoleGranted(role: 0x4a2743f41a15276dad6813e73326037e88c2a55ffdd5c4cab4ea1745629b0d34, account: SubscriptionManagerTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [0] VM::expectEmit(true, true, false, true)
    │   └─ ← [Return]
    ├─ [1205] SubscriptionManager::getSubscriptionEndTime(0x0000000000000000000000000000000000002001, 0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] 2592001 [2.592e6]
    ├─ emit SubscriptionRenewed(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 1000000 [1e6], newEndTime: 5184001 [5.184e6], renewalCount: 1)
    ├─ [69642] SubscriptionManager::recordSubscriptionPayment(0x0000000000000000000000000000000000002001, 0x0000000000000000000000000000000000001001, 0x6c72a2be3a6a8e74f31b0563442cad26, 1000000 [1e6], MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966], 1000000 [1e6])
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ emit SubscriptionRenewed(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 1000000 [1e6], newEndTime: 5184001 [5.184e6], renewalCount: 1)
    │   ├─ [1232] CreatorRegistry::calculatePlatformFee(1000000 [1e6]) [staticcall]
    │   │   └─ ← [Return] 25000 [2.5e4]
    │   ├─ [5931] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 975000 [9.75e5], 0, 0)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 975000 [9.75e5], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ emit ExternalSubscriptionRecorded(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, intentId: 0x6c72a2be3a6a8e74f31b0563442cad26, usdcAmount: 1000000 [1e6], paymentToken: MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966], actualAmountPaid: 1000000 [1e6], endTime: 5184001 [5.184e6])
    │   └─ ← [Stop]
    ├─ [3282] SubscriptionManager::getSubscriptionDetails(0x0000000000000000000000000000000000002001, 0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] SubscriptionRecord({ isActive: true, startTime: 1, endTime: 5184001 [5.184e6], renewalCount: 1, totalPaid: 2000000 [2e6], lastPayment: 1000000 [1e6] })
    ├─ [0] VM::assertEq(1, 1) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(2000000 [2e6], 2000000 [2e6]) [staticcall]
    │   └─ ← [Return]
    └─ ← [Stop]

[PASS] test_RecordSubscriptionPayment_Success() (gas: 587710)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [590510] SubscriptionManagerTest::test_RecordSubscriptionPayment_Success()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [27544] SubscriptionManager::grantSubscriptionProcessorRole(SubscriptionManagerTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496])
    │   ├─ emit RoleGranted(role: 0x4a2743f41a15276dad6813e73326037e88c2a55ffdd5c4cab4ea1745629b0d34, account: SubscriptionManagerTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [0] VM::expectEmit(true, true, false, true)
    │   └─ ← [Return]
    ├─ emit ExternalSubscriptionRecorded(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, intentId: 0x561bd84a4d203d1bf8c6c8aa801686d2, usdcAmount: 1000000 [1e6], paymentToken: MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966], actualAmountPaid: 1000000 [1e6], endTime: 2592001 [2.592e6])
    ├─ [529097] SubscriptionManager::recordSubscriptionPayment(0x0000000000000000000000000000000000002001, 0x0000000000000000000000000000000000001001, 0x561bd84a4d203d1bf8c6c8aa801686d2, 1000000 [1e6], MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966], 1000000 [1e6])
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(1000000 [1e6]) [staticcall]
    │   │   └─ ← [Return] 25000 [2.5e4]
    │   ├─ emit Subscribed(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 1000000 [1e6], platformFee: 25000 [2.5e4], creatorEarning: 975000 [9.75e5], startTime: 1, endTime: 2592001 [2.592e6])
    │   ├─ [1232] CreatorRegistry::calculatePlatformFee(1000000 [1e6]) [staticcall]
    │   │   └─ ← [Return] 25000 [2.5e4]
    │   ├─ [96001] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 975000 [9.75e5], 0, 1)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 975000 [9.75e5], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ emit ExternalSubscriptionRecorded(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, intentId: 0x561bd84a4d203d1bf8c6c8aa801686d2, usdcAmount: 1000000 [1e6], paymentToken: MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966], actualAmountPaid: 1000000 [1e6], endTime: 2592001 [2.592e6])
    │   └─ ← [Stop]
    ├─ [1257] SubscriptionManager::isSubscribed(0x0000000000000000000000000000000000002001, 0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] true
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [3282] SubscriptionManager::getSubscriptionDetails(0x0000000000000000000000000000000000002001, 0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] SubscriptionRecord({ isActive: true, startTime: 1, endTime: 2592001 [2.592e6], renewalCount: 0, totalPaid: 1000000 [1e6], lastPayment: 1000000 [1e6] })
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(1000000 [1e6], 1000000 [1e6]) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(1000000 [1e6], 1000000 [1e6]) [staticcall]
    │   └─ ← [Return]
    └─ ← [Stop]

[PASS] test_SubscribeToCreator_AlreadySubscribed() (gas: 643584)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [666284] SubscriptionManagerTest::test_SubscribeToCreator_AlreadySubscribed()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [588736] SubscriptionManager::subscribeToCreator(0x0000000000000000000000000000000000001001)
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [2946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(1000000 [1e6]) [staticcall]
    │   │   └─ ← [Return] 25000 [2.5e4]
    │   ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 1000000000 [1e9]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [54088] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   │   └─ ← [Return] true
    │   ├─ [96001] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 975000 [9.75e5], 0, 1)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 975000 [9.75e5], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ emit Subscribed(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 1000000 [1e6], platformFee: 25000 [2.5e4], creatorEarning: 975000 [9.75e5], startTime: 1, endTime: 2592001 [2.592e6])
    │   └─ ← [Stop]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [23221] MockERC20::approve(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   └─ ← [Return] true
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [0] VM::expectRevert(custom error 0xc31eb0e0: _ء2)
    │   └─ ← [Return]
    ├─ [5911] SubscriptionManager::subscribeToCreator(0x0000000000000000000000000000000000001001)
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   └─ ← [Revert] AlreadySubscribed()
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    └─ ← [Stop]

[PASS] test_SubscribeToCreator_CreatorNotRegistered() (gas: 57060)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [57060] SubscriptionManagerTest::test_SubscribeToCreator_CreatorNotRegistered()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   └─ ← [Return] true
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [0] VM::expectRevert(custom error 0xc31eb0e0: 2bad89bb00000000000000000000000000000000000000000000000000000000)
    │   └─ ← [Return]
    ├─ [14064] SubscriptionManager::subscribeToCreator(0x0000000000000000000000000000000000009999)
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000009999) [staticcall]
    │   │   └─ ← [Return] false
    │   └─ ← [Revert] CreatorNotRegistered()
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    └─ ← [Stop]

[PASS] test_SubscribeToCreator_InsufficientAllowance() (gas: 75192)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [75192] SubscriptionManagerTest::test_SubscribeToCreator_InsufficientAllowance()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 999999 [9.999e5])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 999999 [9.999e5])
    │   └─ ← [Return] true
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [0] VM::expectRevert(custom error 0xc31eb0e0: cd1c886700000000000000000000000000000000000000000000000000000000)
    │   └─ ← [Return]
    ├─ [29823] SubscriptionManager::subscribeToCreator(0x0000000000000000000000000000000000001001)
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [2946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(1000000 [1e6]) [staticcall]
    │   │   └─ ← [Return] 25000 [2.5e4]
    │   ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 1000000000 [1e9]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   │   └─ ← [Return] 999999 [9.999e5]
    │   └─ ← [Revert] InsufficientPayment()
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    └─ ← [Stop]

[FAIL: OwnableUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496)] test_SubscribeToCreator_InsufficientBalance() (gas: 11077)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [38309479] SubscriptionManagerTest::setUp()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [1138080] → new MockERC20@0x22a7C94543caa0e72439289e039B35a64C79A966
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 5327 bytes of code
    ├─ [47643] MockERC20::mint(0x0000000000000000000000000000000000003001, 1000000000000 [1e12])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000003001, value: 1000000000000 [1e12])
    │   └─ ← [Stop]
    ├─ [1084925] → new MockCommerceProtocol@0xe1796e76a573113CcEDB6D266ae099471117972D
    │   └─ ← [Return] 5419 bytes of code
    ├─ [1503810] → new MockQuoterV2@0xCd54ec27b8c42B24BF58244214B5999334C58959
    │   └─ ← [Return] 6617 bytes of code
    ├─ [0] console::log("Mock dependencies deployed:") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock USDC:", MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock Commerce Protocol:", MockCommerceProtocol: [0xe1796e76a573113CcEDB6D266ae099471117972D]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock Quoter:", MockQuoterV2: [0xCd54ec27b8c42B24BF58244214B5999334C58959]) [staticcall]
    │   └─ ← [Stop]
    ├─ [1710396] → new PriceOracle@0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 8313 bytes of code
    ├─ [4031410] → new CreatorRegistry@0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 19432 bytes of code
    ├─ [5389674] → new ContentRegistry@0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 25995 bytes of code
    ├─ [6590652] → new PayPerView@0x49C602668FE7a8B397255d678684323355754631
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xc89f08b49c068684bf15b77e68611a9f601e70d1f919059510bccd18e691e535, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 32302 bytes of code
    ├─ [7122434] → new SubscriptionManager@0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x1fa68478e710912de24d46d09a1aa735096685a61549eeb0fefb3693b245e69c, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x4a2743f41a15276dad6813e73326037e88c2a55ffdd5c4cab4ea1745629b0d34, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 34738 bytes of code
    ├─ [8485998] → new CommerceProtocolIntegration@0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x501c65bac3e4ac3ac69864ba85559de0249f52b20e002f1e1d1232fd4e169231, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xe2f4eaae4a9751e85a3e4a7b9587827a877f29914755229b07a7b2da98285f70, account: 0x0000000000000000000000000000000000003003, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 41307 bytes of code
    ├─ [0] console::log("Core contracts deployed:") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- CreatorRegistry:", CreatorRegistry: [0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- ContentRegistry:", ContentRegistry: [0x483a0eDa4d8856c61347B0F2e5B84a7af717c308]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- PayPerView:", PayPerView: [0x49C602668FE7a8B397255d678684323355754631]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- SubscriptionManager:", SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- CommerceIntegration:", CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B]) [staticcall]
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25566] ContentRegistry::grantPurchaseRecorderRole(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit RoleGranted(role: 0x9587bd5d64fd9020a2c3c45e38d0e7ca3330d50e4b4dd00bfe972ac5de3bc565, account: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25544] PayPerView::grantPaymentProcessorRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25544] SubscriptionManager::grantSubscriptionProcessorRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0x4a2743f41a15276dad6813e73326037e88c2a55ffdd5c4cab4ea1745629b0d34, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25735] CommerceProtocolIntegration::setPayPerView(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit ContractAddressUpdated(contractName: "PayPerView", oldAddress: 0x0000000000000000000000000000000000000000, newAddress: PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   └─ ← [Stop]
    ├─ [25756] CommerceProtocolIntegration::setSubscriptionManager(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   ├─ emit ContractAddressUpdated(contractName: "SubscriptionManager", oldAddress: 0x0000000000000000000000000000000000000000, newAddress: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   └─ ← [Stop]
    ├─ [0] console::log("Contract permissions configured") [staticcall]
    │   └─ ← [Stop]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000001001, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000001001, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000001001, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000001002, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000001002, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000001002, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000002001, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000002001, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000002001, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000002002, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000002002, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000002002, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [0] console::log("Test users set up with initial balances") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [174504] CreatorRegistry::registerCreator(1000000 [1e6], "Creator 1")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000001001, subscriptionPrice: 1000000 [1e6], timestamp: 1, profileData: "Creator 1")
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001002)
    │   └─ ← [Return]
    ├─ [150604] CreatorRegistry::registerCreator(2000000 [2e6], "Creator 2")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000001002, subscriptionPrice: 2000000 [2e6], timestamp: 1, profileData: "Creator 2")
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    └─ ← [Stop]

  [11077] SubscriptionManagerTest::test_SubscribeToCreator_InsufficientBalance()
    ├─ [3202] MockERC20::forceBalance(0x0000000000000000000000000000000000002001, 999999 [9.999e5])
    │   └─ ← [Revert] OwnableUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496)
    └─ ← [Revert] OwnableUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496)

[PASS] test_SubscribeToCreator_Renewal() (gas: 711635)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [757035] SubscriptionManagerTest::test_SubscribeToCreator_Renewal()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [588736] SubscriptionManager::subscribeToCreator(0x0000000000000000000000000000000000001001)
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [2946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(1000000 [1e6]) [staticcall]
    │   │   └─ ← [Return] 25000 [2.5e4]
    │   ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 1000000000 [1e9]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [54088] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   │   └─ ← [Return] true
    │   ├─ [96001] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 975000 [9.75e5], 0, 1)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 975000 [9.75e5], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ emit Subscribed(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 1000000 [1e6], platformFee: 25000 [2.5e4], creatorEarning: 975000 [9.75e5], startTime: 1, endTime: 2592001 [2.592e6])
    │   └─ ← [Stop]
    ├─ [0] VM::warp(2592002 [2.592e6])
    │   └─ ← [Return]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [23221] MockERC20::approve(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   └─ ← [Return] true
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [0] VM::expectEmit(true, true, false, true)
    │   └─ ← [Return]
    ├─ emit SubscriptionRenewed(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 1000000 [1e6], newEndTime: 5184002 [5.184e6], renewalCount: 1)
    ├─ [81122] SubscriptionManager::subscribeToCreator(0x0000000000000000000000000000000000001001)
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [1232] CreatorRegistry::calculatePlatformFee(1000000 [1e6]) [staticcall]
    │   │   └─ ← [Return] 25000 [2.5e4]
    │   ├─ [940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 999000000 [9.99e8]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [5488] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   │   └─ ← [Return] true
    │   ├─ emit SubscriptionRenewed(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 1000000 [1e6], newEndTime: 5184002 [5.184e6], renewalCount: 1)
    │   ├─ [6401] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 975000 [9.75e5], 0, 1)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 975000 [9.75e5], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ emit Subscribed(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 1000000 [1e6], platformFee: 25000 [2.5e4], creatorEarning: 975000 [9.75e5], startTime: 2592002 [2.592e6], endTime: 5184002 [5.184e6])
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [1257] SubscriptionManager::isSubscribed(0x0000000000000000000000000000000000002001, 0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] true
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [3282] SubscriptionManager::getSubscriptionDetails(0x0000000000000000000000000000000000002001, 0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] SubscriptionRecord({ isActive: true, startTime: 1, endTime: 5184002 [5.184e6], renewalCount: 1, totalPaid: 2000000 [2e6], lastPayment: 1000000 [1e6] })
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(1, 1) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(2000000 [2e6], 2000000 [2e6]) [staticcall]
    │   └─ ← [Return]
    └─ ← [Stop]

[PASS] test_SubscribeToCreator_Success() (gas: 646943)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [669643] SubscriptionManagerTest::test_SubscribeToCreator_Success()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   └─ ← [Return] true
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [0] VM::expectEmit(true, true, false, true)
    │   └─ ← [Return]
    ├─ emit Subscribed(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 1000000 [1e6], platformFee: 25000 [2.5e4], creatorEarning: 975000 [9.75e5], startTime: 1, endTime: 2592001 [2.592e6])
    ├─ [588736] SubscriptionManager::subscribeToCreator(0x0000000000000000000000000000000000001001)
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [2946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(1000000 [1e6]) [staticcall]
    │   │   └─ ← [Return] 25000 [2.5e4]
    │   ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 1000000000 [1e9]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [54088] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   │   └─ ← [Return] true
    │   ├─ [96001] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 975000 [9.75e5], 0, 1)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 975000 [9.75e5], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ emit Subscribed(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 1000000 [1e6], platformFee: 25000 [2.5e4], creatorEarning: 975000 [9.75e5], startTime: 1, endTime: 2592001 [2.592e6])
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [1257] SubscriptionManager::isSubscribed(0x0000000000000000000000000000000000002001, 0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] true
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [1205] SubscriptionManager::getSubscriptionEndTime(0x0000000000000000000000000000000000002001, 0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] 2592001 [2.592e6]
    ├─ [0] VM::assertEq(2592001 [2.592e6], 2592001 [2.592e6]) [staticcall]
    │   └─ ← [Return]
    ├─ [3282] SubscriptionManager::getSubscriptionDetails(0x0000000000000000000000000000000000002001, 0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] SubscriptionRecord({ isActive: true, startTime: 1, endTime: 2592001 [2.592e6], renewalCount: 0, totalPaid: 1000000 [1e6], lastPayment: 1000000 [1e6] })
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(1, 1) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(2592001 [2.592e6], 2592001 [2.592e6]) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(0, 0) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(1000000 [1e6], 1000000 [1e6]) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(1000000 [1e6], 1000000 [1e6]) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(1, 1) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertFalse(false) [staticcall]
    │   └─ ← [Return]
    ├─ [1950] SubscriptionManager::getCreatorSubscribers(0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] [0x0000000000000000000000000000000000002001]
    ├─ [0] VM::assertEq(1, 1) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(0x0000000000000000000000000000000000002001, 0x0000000000000000000000000000000000002001) [staticcall]
    │   └─ ← [Return]
    ├─ [1951] SubscriptionManager::getUserSubscriptions(0x0000000000000000000000000000000000002001) [staticcall]
    │   └─ ← [Return] [0x0000000000000000000000000000000000001001]
    ├─ [0] VM::assertEq(1, 1) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(0x0000000000000000000000000000000000001001, 0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return]
    ├─ [1194] SubscriptionManager::getCreatorSubscriptionEarnings(0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] 975000 [9.75e5], 975000 [9.75e5]
    ├─ [0] VM::assertEq(975000 [9.75e5], 975000 [9.75e5]) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(975000 [9.75e5], 975000 [9.75e5]) [staticcall]
    │   └─ ← [Return]
    └─ ← [Stop]

[PASS] test_SubscriptionExpiration_Timing() (gas: 621029)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [643729] SubscriptionManagerTest::test_SubscriptionExpiration_Timing()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [588736] SubscriptionManager::subscribeToCreator(0x0000000000000000000000000000000000001001)
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [2946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(1000000 [1e6]) [staticcall]
    │   │   └─ ← [Return] 25000 [2.5e4]
    │   ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 1000000000 [1e9]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [54088] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   │   └─ ← [Return] true
    │   ├─ [96001] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 975000 [9.75e5], 0, 1)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 975000 [9.75e5], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ emit Subscribed(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 1000000 [1e6], platformFee: 25000 [2.5e4], creatorEarning: 975000 [9.75e5], startTime: 1, endTime: 2592001 [2.592e6])
    │   └─ ← [Stop]
    ├─ [1257] SubscriptionManager::isSubscribed(0x0000000000000000000000000000000000002001, 0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] true
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::warp(2592000 [2.592e6])
    │   └─ ← [Return]
    ├─ [1257] SubscriptionManager::isSubscribed(0x0000000000000000000000000000000000002001, 0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] true
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::warp(2592001 [2.592e6])
    │   └─ ← [Return]
    ├─ [1257] SubscriptionManager::isSubscribed(0x0000000000000000000000000000000000002001, 0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] false
    ├─ [0] VM::assertFalse(false) [staticcall]
    │   └─ ← [Return]
    └─ ← [Stop]

[PASS] test_SubscriptionIsolation_Success() (gas: 931373)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [976773] SubscriptionManagerTest::test_SubscriptionIsolation_Success()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002002)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002002, spender: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [588736] SubscriptionManager::subscribeToCreator(0x0000000000000000000000000000000000001001)
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [2946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(1000000 [1e6]) [staticcall]
    │   │   └─ ← [Return] 25000 [2.5e4]
    │   ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 1000000000 [1e9]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [54088] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   │   └─ ← [Return] true
    │   ├─ [96001] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 975000 [9.75e5], 0, 1)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 975000 [9.75e5], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ emit Subscribed(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 1000000 [1e6], platformFee: 25000 [2.5e4], creatorEarning: 975000 [9.75e5], startTime: 1, endTime: 2592001 [2.592e6])
    │   └─ ← [Stop]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002002)
    │   └─ ← [Return]
    ├─ [287536] SubscriptionManager::subscribeToCreator(0x0000000000000000000000000000000000001001)
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [1232] CreatorRegistry::calculatePlatformFee(1000000 [1e6]) [staticcall]
    │   │   └─ ← [Return] 25000 [2.5e4]
    │   ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002002) [staticcall]
    │   │   └─ ← [Return] 1000000000 [1e9]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002002, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [8288] MockERC20::transferFrom(0x0000000000000000000000000000000000002002, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002002, to: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   │   └─ ← [Return] true
    │   ├─ [6401] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 975000 [9.75e5], 0, 1)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 975000 [9.75e5], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ emit Subscribed(user: 0x0000000000000000000000000000000000002002, creator: 0x0000000000000000000000000000000000001001, price: 1000000 [1e6], platformFee: 25000 [2.5e4], creatorEarning: 975000 [9.75e5], startTime: 1, endTime: 2592001 [2.592e6])
    │   └─ ← [Stop]
    ├─ [1257] SubscriptionManager::isSubscribed(0x0000000000000000000000000000000000002001, 0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] true
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [1257] SubscriptionManager::isSubscribed(0x0000000000000000000000000000000000002002, 0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] true
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [3282] SubscriptionManager::getSubscriptionDetails(0x0000000000000000000000000000000000002001, 0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] SubscriptionRecord({ isActive: true, startTime: 1, endTime: 2592001 [2.592e6], renewalCount: 0, totalPaid: 1000000 [1e6], lastPayment: 1000000 [1e6] })
    ├─ [3282] SubscriptionManager::getSubscriptionDetails(0x0000000000000000000000000000000000002002, 0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] SubscriptionRecord({ isActive: true, startTime: 1, endTime: 2592001 [2.592e6], renewalCount: 0, totalPaid: 1000000 [1e6], lastPayment: 1000000 [1e6] })
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(1000000 [1e6], 1000000 [1e6]) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(1000000 [1e6], 1000000 [1e6]) [staticcall]
    │   └─ ← [Return]
    ├─ [2456] SubscriptionManager::getCreatorSubscribers(0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] [0x0000000000000000000000000000000000002001, 0x0000000000000000000000000000000000002002]
    ├─ [0] VM::assertEq(2, 2) [staticcall]
    │   └─ ← [Return]
    └─ ← [Stop]

[PASS] test_WithdrawAutoRenewalBalance_Full() (gas: 189315)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [241909] SubscriptionManagerTest::test_WithdrawAutoRenewalBalance_Full()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [171292] SubscriptionManager::configureAutoRenewal(0x0000000000000000000000000000000000001001, true, 1000000 [1e6], 1000000 [1e6])
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [2946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 1000000000 [1e9]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [54088] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   │   └─ ← [Return] true
    │   ├─ emit AutoRenewalConfigured(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, enabled: true, maxPrice: 1000000 [1e6], depositAmount: 1000000 [1e6])
    │   └─ ← [Stop]
    ├─ [940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   └─ ← [Return] 999000000 [9.99e8]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [9995] SubscriptionManager::withdrawAutoRenewalBalance(0x0000000000000000000000000000000000001001, 0)
    │   ├─ [4414] MockERC20::transfer(0x0000000000000000000000000000000000002001, 1000000 [1e6])
    │   │   ├─ emit Transfer(from: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], to: 0x0000000000000000000000000000000000002001, value: 1000000 [1e6])
    │   │   └─ ← [Return] true
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   └─ ← [Return] 1000000000 [1e9]
    ├─ [0] VM::assertEq(1000000000 [1e9], 1000000000 [1e9]) [staticcall]
    │   └─ ← [Return]
    ├─ [6433] SubscriptionManager::getAutoRenewalConfig(0x0000000000000000000000000000000000002001, 0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] AutoRenewal({ enabled: true, maxPrice: 1000000 [1e6], balance: 0, lastRenewalAttempt: 0, failedAttempts: 0 })
    ├─ [0] VM::assertEq(0, 0) [staticcall]
    │   └─ ← [Return]
    └─ ← [Stop]

[PASS] test_WithdrawAutoRenewalBalance_InsufficientBalance() (gas: 199995)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [222695] SubscriptionManagerTest::test_WithdrawAutoRenewalBalance_InsufficientBalance()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [171292] SubscriptionManager::configureAutoRenewal(0x0000000000000000000000000000000000001001, true, 1000000 [1e6], 1000000 [1e6])
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [2946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 1000000000 [1e9]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [54088] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   │   └─ ← [Return] true
    │   ├─ emit AutoRenewalConfigured(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, enabled: true, maxPrice: 1000000 [1e6], depositAmount: 1000000 [1e6])
    │   └─ ← [Stop]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [0] VM::expectRevert(custom error 0xc31eb0e0: f4d678b800000000000000000000000000000000000000000000000000000000)
    │   └─ ← [Return]
    ├─ [4163] SubscriptionManager::withdrawAutoRenewalBalance(0x0000000000000000000000000000000000001001, 1000001 [1e6])
    │   └─ ← [Revert] InsufficientBalance()
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    └─ ← [Stop]

[PASS] test_WithdrawAutoRenewalBalance_Success() (gas: 216622)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [242122] SubscriptionManagerTest::test_WithdrawAutoRenewalBalance_Success()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 2000000 [2e6])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 2000000 [2e6])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [171292] SubscriptionManager::configureAutoRenewal(0x0000000000000000000000000000000000001001, true, 1000000 [1e6], 2000000 [2e6])
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [2946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 1000000000 [1e9]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   │   └─ ← [Return] 2000000 [2e6]
    │   ├─ [54088] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 2000000 [2e6])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 2000000 [2e6])
    │   │   └─ ← [Return] true
    │   ├─ emit AutoRenewalConfigured(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, enabled: true, maxPrice: 1000000 [1e6], depositAmount: 2000000 [2e6])
    │   └─ ← [Stop]
    ├─ [940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   └─ ← [Return] 998000000 [9.98e8]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [9881] SubscriptionManager::withdrawAutoRenewalBalance(0x0000000000000000000000000000000000001001, 1000000 [1e6])
    │   ├─ [4414] MockERC20::transfer(0x0000000000000000000000000000000000002001, 1000000 [1e6])
    │   │   ├─ emit Transfer(from: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], to: 0x0000000000000000000000000000000000002001, value: 1000000 [1e6])
    │   │   └─ ← [Return] true
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   └─ ← [Return] 999000000 [9.99e8]
    ├─ [0] VM::assertEq(999000000 [9.99e8], 999000000 [9.99e8]) [staticcall]
    │   └─ ← [Return]
    ├─ [6433] SubscriptionManager::getAutoRenewalConfig(0x0000000000000000000000000000000000002001, 0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] AutoRenewal({ enabled: true, maxPrice: 1000000 [1e6], balance: 1000000 [1e6], lastRenewalAttempt: 0, failedAttempts: 0 })
    ├─ [0] VM::assertEq(1000000 [1e6], 1000000 [1e6]) [staticcall]
    │   └─ ← [Return]
    └─ ← [Stop]

[PASS] test_WithdrawSubscriptionEarnings_NoEarnings() (gas: 18810)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [18810] SubscriptionManagerTest::test_WithdrawSubscriptionEarnings_NoEarnings()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [0] VM::expectRevert(custom error 0xc31eb0e0: R*ל)
    │   └─ ← [Return]
    ├─ [7549] SubscriptionManager::withdrawSubscriptionEarnings()
    │   └─ ← [Revert] NoEarningsToWithdraw()
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    └─ ← [Stop]

[FAIL: OwnableUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496)] test_WithdrawSubscriptionEarnings_Success() (gas: 635844)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [38309479] SubscriptionManagerTest::setUp()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [1138080] → new MockERC20@0x22a7C94543caa0e72439289e039B35a64C79A966
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 5327 bytes of code
    ├─ [47643] MockERC20::mint(0x0000000000000000000000000000000000003001, 1000000000000 [1e12])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000003001, value: 1000000000000 [1e12])
    │   └─ ← [Stop]
    ├─ [1084925] → new MockCommerceProtocol@0xe1796e76a573113CcEDB6D266ae099471117972D
    │   └─ ← [Return] 5419 bytes of code
    ├─ [1503810] → new MockQuoterV2@0xCd54ec27b8c42B24BF58244214B5999334C58959
    │   └─ ← [Return] 6617 bytes of code
    ├─ [0] console::log("Mock dependencies deployed:") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock USDC:", MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock Commerce Protocol:", MockCommerceProtocol: [0xe1796e76a573113CcEDB6D266ae099471117972D]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock Quoter:", MockQuoterV2: [0xCd54ec27b8c42B24BF58244214B5999334C58959]) [staticcall]
    │   └─ ← [Stop]
    ├─ [1710396] → new PriceOracle@0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 8313 bytes of code
    ├─ [4031410] → new CreatorRegistry@0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 19432 bytes of code
    ├─ [5389674] → new ContentRegistry@0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 25995 bytes of code
    ├─ [6590652] → new PayPerView@0x49C602668FE7a8B397255d678684323355754631
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xc89f08b49c068684bf15b77e68611a9f601e70d1f919059510bccd18e691e535, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 32302 bytes of code
    ├─ [7122434] → new SubscriptionManager@0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x1fa68478e710912de24d46d09a1aa735096685a61549eeb0fefb3693b245e69c, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x4a2743f41a15276dad6813e73326037e88c2a55ffdd5c4cab4ea1745629b0d34, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 34738 bytes of code
    ├─ [8485998] → new CommerceProtocolIntegration@0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x501c65bac3e4ac3ac69864ba85559de0249f52b20e002f1e1d1232fd4e169231, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xe2f4eaae4a9751e85a3e4a7b9587827a877f29914755229b07a7b2da98285f70, account: 0x0000000000000000000000000000000000003003, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 41307 bytes of code
    ├─ [0] console::log("Core contracts deployed:") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- CreatorRegistry:", CreatorRegistry: [0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- ContentRegistry:", ContentRegistry: [0x483a0eDa4d8856c61347B0F2e5B84a7af717c308]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- PayPerView:", PayPerView: [0x49C602668FE7a8B397255d678684323355754631]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- SubscriptionManager:", SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- CommerceIntegration:", CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B]) [staticcall]
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25566] ContentRegistry::grantPurchaseRecorderRole(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit RoleGranted(role: 0x9587bd5d64fd9020a2c3c45e38d0e7ca3330d50e4b4dd00bfe972ac5de3bc565, account: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25544] PayPerView::grantPaymentProcessorRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25544] SubscriptionManager::grantSubscriptionProcessorRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0x4a2743f41a15276dad6813e73326037e88c2a55ffdd5c4cab4ea1745629b0d34, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25735] CommerceProtocolIntegration::setPayPerView(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit ContractAddressUpdated(contractName: "PayPerView", oldAddress: 0x0000000000000000000000000000000000000000, newAddress: PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   └─ ← [Stop]
    ├─ [25756] CommerceProtocolIntegration::setSubscriptionManager(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   ├─ emit ContractAddressUpdated(contractName: "SubscriptionManager", oldAddress: 0x0000000000000000000000000000000000000000, newAddress: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   └─ ← [Stop]
    ├─ [0] console::log("Contract permissions configured") [staticcall]
    │   └─ ← [Stop]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000001001, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000001001, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000001001, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000001002, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000001002, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000001002, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000002001, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000002001, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000002001, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000002002, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000002002, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000002002, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [0] console::log("Test users set up with initial balances") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [174504] CreatorRegistry::registerCreator(1000000 [1e6], "Creator 1")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000001001, subscriptionPrice: 1000000 [1e6], timestamp: 1, profileData: "Creator 1")
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001002)
    │   └─ ← [Return]
    ├─ [150604] CreatorRegistry::registerCreator(2000000 [2e6], "Creator 2")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000001002, subscriptionPrice: 2000000 [2e6], timestamp: 1, profileData: "Creator 2")
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    └─ ← [Stop]

  [635844] SubscriptionManagerTest::test_WithdrawSubscriptionEarnings_Success()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [588736] SubscriptionManager::subscribeToCreator(0x0000000000000000000000000000000000001001)
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [2946] CreatorRegistry::getSubscriptionPrice(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(1000000 [1e6]) [staticcall]
    │   │   └─ ← [Return] 25000 [2.5e4]
    │   ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 1000000000 [1e9]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   │   └─ ← [Return] 1000000 [1e6]
    │   ├─ [54088] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 1000000 [1e6])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], value: 1000000 [1e6])
    │   │   └─ ← [Return] true
    │   ├─ [96001] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 975000 [9.75e5], 0, 1)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 975000 [9.75e5], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ emit Subscribed(user: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 1000000 [1e6], platformFee: 25000 [2.5e4], creatorEarning: 975000 [9.75e5], startTime: 1, endTime: 2592001 [2.592e6])
    │   └─ ← [Stop]
    ├─ [1225] MockERC20::mint(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], 975000 [9.75e5])
    │   └─ ← [Revert] OwnableUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496)
    └─ ← [Revert] OwnableUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496)

Suite result: FAILED. 32 passed; 6 failed; 0 skipped; finished in 7.62ms (17.75ms CPU time)

Ran 1 test suite in 277.36ms (7.62ms CPU time): 32 tests passed, 6 failed, 0 skipped (38 total tests)

Failing tests:
Encountered 6 failing tests in test/unit/SubscriptionManager.t.sol:SubscriptionManagerTest
[FAIL: log != expected log] test_CancelSubscription_Immediate() (gas: 651624)
[FAIL: Error != expected error: InsufficientBalance() != RenewalTooSoon()] test_ExecuteAutoRenewal_RateLimiting() (gas: 895025)
[FAIL: log != expected log] test_ExecuteAutoRenewal_Success() (gas: 868021)
[FAIL: log != expected log] test_HandleExternalRefund_Success() (gas: 711813)
[FAIL: OwnableUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496)] test_SubscribeToCreator_InsufficientBalance() (gas: 11077)
[FAIL: OwnableUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496)] test_WithdrawSubscriptionEarnings_Success() (gas: 635844)

Encountered a total of 6 failing tests, 32 tests succeeded
