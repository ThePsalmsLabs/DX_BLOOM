No files changed, compilation skipped

Ran 36 tests for test/unit/PayPerView.t.sol:PayPerViewTest
[PASS] testContentId1() (gas: 2583)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [2583] PayPerViewTest::testContentId1()
    └─ ← [Return] 1

[PASS] testContentId2() (gas: 2537)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [2537] PayPerViewTest::testContentId2()
    └─ ← [Return] 2

[PASS] test_CanPurchaseContent_Success() (gas: 688660)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [711360] PayPerViewTest::test_CanPurchaseContent_Success()
    ├─ [18377] PayPerView::canPurchaseContent(1, 0x0000000000000000000000000000000000002001) [staticcall]
    │   └─ ← [Return] true
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(PayPerView: [0x49C602668FE7a8B397255d678684323355754631], 100000 [1e5])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], value: 100000 [1e5])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [642980] PayPerView::purchaseContentDirect(1)
    │   ├─ [40649] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Test Content 1", description: "Test description", category: 0, payPerViewPrice: 100000 [1e5], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["test", "content"], isReported: false, reportCount: 0 })
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(100000 [1e5]) [staticcall]
    │   │   └─ ← [Return] 2500
    │   ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 1000000000 [1e9]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, PayPerView: [0x49C602668FE7a8B397255d678684323355754631]) [staticcall]
    │   │   └─ ← [Return] 100000 [1e5]
    │   ├─ [54088] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, PayPerView: [0x49C602668FE7a8B397255d678684323355754631], 100000 [1e5])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], value: 100000 [1e5])
    │   │   └─ ← [Return] true
    │   ├─ [73631] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 97500 [9.75e4], 0, 0)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 97500 [9.75e4], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ [70825] ContentRegistry::recordPurchase(1, 0x0000000000000000000000000000000000002001)
    │   │   ├─ emit ContentPurchased(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, price: 100000 [1e5], timestamp: 1)
    │   │   └─ ← [Stop]
    │   ├─ emit DirectPurchaseCompleted(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 100000 [1e5], platformFee: 2500, creatorEarning: 97500 [9.75e4])
    │   └─ ← [Stop]
    ├─ [2431] PayPerView::canPurchaseContent(1, 0x0000000000000000000000000000000000002001) [staticcall]
    │   └─ ← [Return] false
    ├─ [0] VM::assertFalse(false) [staticcall]
    │   └─ ← [Return]
    └─ ← [Stop]

[PASS] test_CompletePurchase_ExpiredIntent() (gas: 282234)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [285034] PayPerViewTest::test_CompletePurchase_ExpiredIntent()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [231956] PayPerView::createPurchaseIntent(1, 0, 0x0000000000000000000000000000000000000000, 100)
    │   ├─ [40649] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Test Content 1", description: "Test description", category: 0, payPerViewPrice: 100000 [1e5], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["test", "content"], isReported: false, reportCount: 0 })
    │   ├─ [1055] PriceOracle::getTokenAmountForUSDC(0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 100000 [1e5], 0)
    │   │   └─ ← [Return] 100000 [1e5]
    │   ├─ [1445] PriceOracle::applySlippage(100000 [1e5], 100) [staticcall]
    │   │   └─ ← [Return] 101000 [1.01e5]
    │   ├─ emit ContentPurchaseInitiated(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, intentId: 0xa4fda21ee56bb9fbd55ff9f1c86373b6, paymentMethod: 0, usdcPrice: 100000 [1e5], expectedPaymentAmount: 101000 [1.01e5])
    │   └─ ← [Return] 0xa4fda21ee56bb9fbd55ff9f1c86373b6, 101000 [1.01e5], 3601
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [27544] PayPerView::grantPaymentProcessorRole(PayPerViewTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496])
    │   ├─ emit RoleGranted(role: 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919, account: PayPerViewTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [0] VM::warp(7201)
    │   └─ ← [Return]
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Purchase expired)
    │   └─ ← [Return]
    ├─ [5888] PayPerView::completePurchase(0xa4fda21ee56bb9fbd55ff9f1c86373b6, 101000 [1.01e5], true, "")
    │   └─ ← [Revert] Purchase expired
    └─ ← [Stop]

[FAIL: next call did not revert as expected] test_CompletePurchase_InsufficientPayment() (gas: 837913)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [39358787] PayPerViewTest::setUp()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [1138080] → new MockERC20@0x22a7C94543caa0e72439289e039B35a64C79A966
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 5327 bytes of code
    ├─ [47643] MockERC20::mint(0x0000000000000000000000000000000000003001, 1000000000000 [1e12])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000003001, value: 1000000000000 [1e12])
    │   └─ ← [Stop]
    ├─ [1084925] → new MockCommerceProtocol@0xe1796e76a573113CcEDB6D266ae099471117972D
    │   └─ ← [Return] 5419 bytes of code
    ├─ [1503810] → new MockQuoterV2@0xCd54ec27b8c42B24BF58244214B5999334C58959
    │   └─ ← [Return] 6617 bytes of code
    ├─ [0] console::log("Mock dependencies deployed:") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock USDC:", MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock Commerce Protocol:", MockCommerceProtocol: [0xe1796e76a573113CcEDB6D266ae099471117972D]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock Quoter:", MockQuoterV2: [0xCd54ec27b8c42B24BF58244214B5999334C58959]) [staticcall]
    │   └─ ← [Stop]
    ├─ [1710396] → new PriceOracle@0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 8313 bytes of code
    ├─ [4031410] → new CreatorRegistry@0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 19432 bytes of code
    ├─ [5389674] → new ContentRegistry@0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 25995 bytes of code
    ├─ [6590652] → new PayPerView@0x49C602668FE7a8B397255d678684323355754631
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xc89f08b49c068684bf15b77e68611a9f601e70d1f919059510bccd18e691e535, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 32302 bytes of code
    ├─ [7122434] → new SubscriptionManager@0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x1fa68478e710912de24d46d09a1aa735096685a61549eeb0fefb3693b245e69c, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x4a2743f41a15276dad6813e73326037e88c2a55ffdd5c4cab4ea1745629b0d34, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 34738 bytes of code
    ├─ [8485998] → new CommerceProtocolIntegration@0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x501c65bac3e4ac3ac69864ba85559de0249f52b20e002f1e1d1232fd4e169231, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xe2f4eaae4a9751e85a3e4a7b9587827a877f29914755229b07a7b2da98285f70, account: 0x0000000000000000000000000000000000003003, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 41307 bytes of code
    ├─ [0] console::log("Core contracts deployed:") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- CreatorRegistry:", CreatorRegistry: [0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- ContentRegistry:", ContentRegistry: [0x483a0eDa4d8856c61347B0F2e5B84a7af717c308]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- PayPerView:", PayPerView: [0x49C602668FE7a8B397255d678684323355754631]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- SubscriptionManager:", SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- CommerceIntegration:", CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B]) [staticcall]
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25566] ContentRegistry::grantPurchaseRecorderRole(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit RoleGranted(role: 0x9587bd5d64fd9020a2c3c45e38d0e7ca3330d50e4b4dd00bfe972ac5de3bc565, account: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25544] PayPerView::grantPaymentProcessorRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25544] SubscriptionManager::grantSubscriptionProcessorRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0x4a2743f41a15276dad6813e73326037e88c2a55ffdd5c4cab4ea1745629b0d34, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25735] CommerceProtocolIntegration::setPayPerView(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit ContractAddressUpdated(contractName: "PayPerView", oldAddress: 0x0000000000000000000000000000000000000000, newAddress: PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   └─ ← [Stop]
    ├─ [25756] CommerceProtocolIntegration::setSubscriptionManager(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   ├─ emit ContractAddressUpdated(contractName: "SubscriptionManager", oldAddress: 0x0000000000000000000000000000000000000000, newAddress: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   └─ ← [Stop]
    ├─ [0] console::log("Contract permissions configured") [staticcall]
    │   └─ ← [Stop]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000001001, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000001001, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000001001, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000001002, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000001002, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000001002, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000002001, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000002001, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000002001, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000002002, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000002002, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000002002, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [0] console::log("Test users set up with initial balances") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [174504] CreatorRegistry::registerCreator(1000000 [1e6], "Default profile")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000001001, subscriptionPrice: 1000000 [1e6], timestamp: 1, profileData: "Default profile")
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001002)
    │   └─ ← [Return]
    ├─ [150604] CreatorRegistry::registerCreator(1000000 [1e6], "Default profile")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000001002, subscriptionPrice: 1000000 [1e6], timestamp: 1, profileData: "Default profile")
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [574377] ContentRegistry::registerContent("QmTestHash123456789", "Test Content 1", "Test description", 0, 100000 [1e5], ["test", "content"])
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 1, creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Test Content 1", category: 0, payPerViewPrice: 100000 [1e5], timestamp: 1)
    │   └─ ← [Return] 1
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001002)
    │   └─ ← [Return]
    ├─ [411077] ContentRegistry::registerContent("QmTestHash123456789", "Test Content 2", "Test description", 0, 200000 [2e5], ["test", "content"])
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001002) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001002, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 2, creator: 0x0000000000000000000000000000000000001002, ipfsHash: "QmTestHash123456789", title: "Test Content 2", category: 0, payPerViewPrice: 200000 [2e5], timestamp: 1)
    │   └─ ← [Return] 2
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [462] PriceOracle::WETH() [staticcall]
    │   └─ ← [Return] 0x4200000000000000000000000000000000000006
    ├─ [396] PriceOracle::USDC() [staticcall]
    │   └─ ← [Return] 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913
    ├─ [1482] MockQuoterV2::setMockPrice(0x4200000000000000000000000000000000000006, 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 3000, 2000000000 [2e9])
    │   └─ ← [Stop]
    ├─ [396] PriceOracle::USDC() [staticcall]
    │   └─ ← [Return] 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913
    ├─ [462] PriceOracle::WETH() [staticcall]
    │   └─ ← [Return] 0x4200000000000000000000000000000000000006
    ├─ [1482] MockQuoterV2::setMockPrice(0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 0x4200000000000000000000000000000000000006, 3000, 500000000000000 [5e14])
    │   └─ ← [Stop]
    └─ ← [Stop]

  [837913] PayPerViewTest::test_CompletePurchase_InsufficientPayment()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [231956] PayPerView::createPurchaseIntent(1, 0, 0x0000000000000000000000000000000000000000, 100)
    │   ├─ [40649] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Test Content 1", description: "Test description", category: 0, payPerViewPrice: 100000 [1e5], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["test", "content"], isReported: false, reportCount: 0 })
    │   ├─ [1055] PriceOracle::getTokenAmountForUSDC(0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 100000 [1e5], 0)
    │   │   └─ ← [Return] 100000 [1e5]
    │   ├─ [1445] PriceOracle::applySlippage(100000 [1e5], 100) [staticcall]
    │   │   └─ ← [Return] 101000 [1.01e5]
    │   ├─ emit ContentPurchaseInitiated(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, intentId: 0xa4fda21ee56bb9fbd55ff9f1c86373b6, paymentMethod: 0, usdcPrice: 100000 [1e5], expectedPaymentAmount: 101000 [1.01e5])
    │   └─ ← [Return] 0xa4fda21ee56bb9fbd55ff9f1c86373b6, 101000 [1.01e5], 3601
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [27544] PayPerView::grantPaymentProcessorRole(PayPerViewTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496])
    │   ├─ emit RoleGranted(role: 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919, account: PayPerViewTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Insufficient payment)
    │   └─ ← [Return]
    ├─ [559214] PayPerView::completePurchase(0xa4fda21ee56bb9fbd55ff9f1c86373b6, 100999 [1.009e5], true, "")
    │   ├─ [10649] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Test Content 1", description: "Test description", category: 0, payPerViewPrice: 100000 [1e5], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["test", "content"], isReported: false, reportCount: 0 })
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(100000 [1e5]) [staticcall]
    │   │   └─ ← [Return] 2500
    │   ├─ [75631] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 97500 [9.75e4], 0, 0)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 97500 [9.75e4], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ [70825] ContentRegistry::recordPurchase(1, 0x0000000000000000000000000000000000002001)
    │   │   ├─ emit ContentPurchased(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, price: 100000 [1e5], timestamp: 1)
    │   │   └─ ← [Stop]
    │   ├─ emit ContentPurchaseCompleted(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, intentId: 0xa4fda21ee56bb9fbd55ff9f1c86373b6, usdcPrice: 100000 [1e5], actualAmountPaid: 100999 [1.009e5], paymentToken: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913)
    │   └─ ← [Stop]
    └─ ← [Revert] next call did not revert as expected

[PASS] test_CompletePurchase_PaymentFailed() (gas: 457395)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [462995] PayPerViewTest::test_CompletePurchase_PaymentFailed()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [231956] PayPerView::createPurchaseIntent(1, 0, 0x0000000000000000000000000000000000000000, 100)
    │   ├─ [40649] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Test Content 1", description: "Test description", category: 0, payPerViewPrice: 100000 [1e5], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["test", "content"], isReported: false, reportCount: 0 })
    │   ├─ [1055] PriceOracle::getTokenAmountForUSDC(0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 100000 [1e5], 0)
    │   │   └─ ← [Return] 100000 [1e5]
    │   ├─ [1445] PriceOracle::applySlippage(100000 [1e5], 100) [staticcall]
    │   │   └─ ← [Return] 101000 [1.01e5]
    │   ├─ emit ContentPurchaseInitiated(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, intentId: 0xa4fda21ee56bb9fbd55ff9f1c86373b6, paymentMethod: 0, usdcPrice: 100000 [1e5], expectedPaymentAmount: 101000 [1.01e5])
    │   └─ ← [Return] 0xa4fda21ee56bb9fbd55ff9f1c86373b6, 101000 [1.01e5], 3601
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [27544] PayPerView::grantPaymentProcessorRole(PayPerViewTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496])
    │   ├─ emit RoleGranted(role: 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919, account: PayPerViewTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [0] VM::expectEmit(true, true, true, true)
    │   └─ ← [Return]
    ├─ emit PurchaseFailed(intentId: 0xa4fda21ee56bb9fbd55ff9f1c86373b6, contentId: 1, user: 0x0000000000000000000000000000000000002001, reason: "Payment failed")
    ├─ [168511] PayPerView::completePurchase(0xa4fda21ee56bb9fbd55ff9f1c86373b6, 101000 [1.01e5], false, "Payment failed")
    │   ├─ emit PurchaseFailed(intentId: 0xa4fda21ee56bb9fbd55ff9f1c86373b6, contentId: 1, user: 0x0000000000000000000000000000000000002001, reason: "Payment failed")
    │   └─ ← [Stop]
    ├─ [1277] PayPerView::hasAccess(1, 0x0000000000000000000000000000000000002001) [staticcall]
    │   └─ ← [Return] false
    ├─ [0] VM::assertFalse(false) [staticcall]
    │   └─ ← [Return]
    ├─ [5261] PayPerView::getCreatorEarnings(0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] 0, 0
    ├─ [0] VM::assertEq(0, 0) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(0, 0) [staticcall]
    │   └─ ← [Return]
    └─ ← [Stop]

[FAIL: log != expected log] test_CompletePurchase_Success() (gas: 846525)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [39358787] PayPerViewTest::setUp()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [1138080] → new MockERC20@0x22a7C94543caa0e72439289e039B35a64C79A966
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 5327 bytes of code
    ├─ [47643] MockERC20::mint(0x0000000000000000000000000000000000003001, 1000000000000 [1e12])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000003001, value: 1000000000000 [1e12])
    │   └─ ← [Stop]
    ├─ [1084925] → new MockCommerceProtocol@0xe1796e76a573113CcEDB6D266ae099471117972D
    │   └─ ← [Return] 5419 bytes of code
    ├─ [1503810] → new MockQuoterV2@0xCd54ec27b8c42B24BF58244214B5999334C58959
    │   └─ ← [Return] 6617 bytes of code
    ├─ [0] console::log("Mock dependencies deployed:") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock USDC:", MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock Commerce Protocol:", MockCommerceProtocol: [0xe1796e76a573113CcEDB6D266ae099471117972D]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock Quoter:", MockQuoterV2: [0xCd54ec27b8c42B24BF58244214B5999334C58959]) [staticcall]
    │   └─ ← [Stop]
    ├─ [1710396] → new PriceOracle@0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 8313 bytes of code
    ├─ [4031410] → new CreatorRegistry@0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 19432 bytes of code
    ├─ [5389674] → new ContentRegistry@0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 25995 bytes of code
    ├─ [6590652] → new PayPerView@0x49C602668FE7a8B397255d678684323355754631
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xc89f08b49c068684bf15b77e68611a9f601e70d1f919059510bccd18e691e535, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 32302 bytes of code
    ├─ [7122434] → new SubscriptionManager@0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x1fa68478e710912de24d46d09a1aa735096685a61549eeb0fefb3693b245e69c, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x4a2743f41a15276dad6813e73326037e88c2a55ffdd5c4cab4ea1745629b0d34, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 34738 bytes of code
    ├─ [8485998] → new CommerceProtocolIntegration@0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x501c65bac3e4ac3ac69864ba85559de0249f52b20e002f1e1d1232fd4e169231, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xe2f4eaae4a9751e85a3e4a7b9587827a877f29914755229b07a7b2da98285f70, account: 0x0000000000000000000000000000000000003003, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 41307 bytes of code
    ├─ [0] console::log("Core contracts deployed:") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- CreatorRegistry:", CreatorRegistry: [0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- ContentRegistry:", ContentRegistry: [0x483a0eDa4d8856c61347B0F2e5B84a7af717c308]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- PayPerView:", PayPerView: [0x49C602668FE7a8B397255d678684323355754631]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- SubscriptionManager:", SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- CommerceIntegration:", CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B]) [staticcall]
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25566] ContentRegistry::grantPurchaseRecorderRole(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit RoleGranted(role: 0x9587bd5d64fd9020a2c3c45e38d0e7ca3330d50e4b4dd00bfe972ac5de3bc565, account: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25544] PayPerView::grantPaymentProcessorRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25544] SubscriptionManager::grantSubscriptionProcessorRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0x4a2743f41a15276dad6813e73326037e88c2a55ffdd5c4cab4ea1745629b0d34, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25735] CommerceProtocolIntegration::setPayPerView(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit ContractAddressUpdated(contractName: "PayPerView", oldAddress: 0x0000000000000000000000000000000000000000, newAddress: PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   └─ ← [Stop]
    ├─ [25756] CommerceProtocolIntegration::setSubscriptionManager(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   ├─ emit ContractAddressUpdated(contractName: "SubscriptionManager", oldAddress: 0x0000000000000000000000000000000000000000, newAddress: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   └─ ← [Stop]
    ├─ [0] console::log("Contract permissions configured") [staticcall]
    │   └─ ← [Stop]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000001001, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000001001, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000001001, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000001002, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000001002, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000001002, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000002001, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000002001, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000002001, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000002002, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000002002, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000002002, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [0] console::log("Test users set up with initial balances") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [174504] CreatorRegistry::registerCreator(1000000 [1e6], "Default profile")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000001001, subscriptionPrice: 1000000 [1e6], timestamp: 1, profileData: "Default profile")
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001002)
    │   └─ ← [Return]
    ├─ [150604] CreatorRegistry::registerCreator(1000000 [1e6], "Default profile")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000001002, subscriptionPrice: 1000000 [1e6], timestamp: 1, profileData: "Default profile")
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [574377] ContentRegistry::registerContent("QmTestHash123456789", "Test Content 1", "Test description", 0, 100000 [1e5], ["test", "content"])
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 1, creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Test Content 1", category: 0, payPerViewPrice: 100000 [1e5], timestamp: 1)
    │   └─ ← [Return] 1
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001002)
    │   └─ ← [Return]
    ├─ [411077] ContentRegistry::registerContent("QmTestHash123456789", "Test Content 2", "Test description", 0, 200000 [2e5], ["test", "content"])
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001002) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001002, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 2, creator: 0x0000000000000000000000000000000000001002, ipfsHash: "QmTestHash123456789", title: "Test Content 2", category: 0, payPerViewPrice: 200000 [2e5], timestamp: 1)
    │   └─ ← [Return] 2
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [462] PriceOracle::WETH() [staticcall]
    │   └─ ← [Return] 0x4200000000000000000000000000000000000006
    ├─ [396] PriceOracle::USDC() [staticcall]
    │   └─ ← [Return] 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913
    ├─ [1482] MockQuoterV2::setMockPrice(0x4200000000000000000000000000000000000006, 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 3000, 2000000000 [2e9])
    │   └─ ← [Stop]
    ├─ [396] PriceOracle::USDC() [staticcall]
    │   └─ ← [Return] 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913
    ├─ [462] PriceOracle::WETH() [staticcall]
    │   └─ ← [Return] 0x4200000000000000000000000000000000000006
    ├─ [1482] MockQuoterV2::setMockPrice(0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 0x4200000000000000000000000000000000000006, 3000, 500000000000000 [5e14])
    │   └─ ← [Stop]
    └─ ← [Stop]

  [846525] PayPerViewTest::test_CompletePurchase_Success()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [231956] PayPerView::createPurchaseIntent(1, 0, 0x0000000000000000000000000000000000000000, 100)
    │   ├─ [40649] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Test Content 1", description: "Test description", category: 0, payPerViewPrice: 100000 [1e5], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["test", "content"], isReported: false, reportCount: 0 })
    │   ├─ [1055] PriceOracle::getTokenAmountForUSDC(0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 100000 [1e5], 0)
    │   │   └─ ← [Return] 100000 [1e5]
    │   ├─ [1445] PriceOracle::applySlippage(100000 [1e5], 100) [staticcall]
    │   │   └─ ← [Return] 101000 [1.01e5]
    │   ├─ emit ContentPurchaseInitiated(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, intentId: 0xa4fda21ee56bb9fbd55ff9f1c86373b6, paymentMethod: 0, usdcPrice: 100000 [1e5], expectedPaymentAmount: 101000 [1.01e5])
    │   └─ ← [Return] 0xa4fda21ee56bb9fbd55ff9f1c86373b6, 101000 [1.01e5], 3601
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [27544] PayPerView::grantPaymentProcessorRole(PayPerViewTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496])
    │   ├─ emit RoleGranted(role: 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919, account: PayPerViewTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [0] VM::expectEmit(true, true, true, true)
    │   └─ ← [Return]
    ├─ emit ContentPurchaseCompleted(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, intentId: 0xa4fda21ee56bb9fbd55ff9f1c86373b6, usdcPrice: 100000 [1e5], actualAmountPaid: 101000 [1.01e5], paymentToken: MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966])
    ├─ [559214] PayPerView::completePurchase(0xa4fda21ee56bb9fbd55ff9f1c86373b6, 101000 [1.01e5], true, "")
    │   ├─ [10649] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Test Content 1", description: "Test description", category: 0, payPerViewPrice: 100000 [1e5], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["test", "content"], isReported: false, reportCount: 0 })
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(100000 [1e5]) [staticcall]
    │   │   └─ ← [Return] 2500
    │   ├─ [75631] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 97500 [9.75e4], 0, 0)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 97500 [9.75e4], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ [70825] ContentRegistry::recordPurchase(1, 0x0000000000000000000000000000000000002001)
    │   │   ├─ emit ContentPurchased(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, price: 100000 [1e5], timestamp: 1)
    │   │   └─ ← [Stop]
    │   ├─ emit ContentPurchaseCompleted(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, intentId: 0xa4fda21ee56bb9fbd55ff9f1c86373b6, usdcPrice: 100000 [1e5], actualAmountPaid: 101000 [1.01e5], paymentToken: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913)
    │   └─ ← [Stop]
    └─ ← [Revert] log != expected log

[PASS] test_CreatePurchaseIntent_AlreadyPurchased() (gas: 707862)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [730562] PayPerViewTest::test_CreatePurchaseIntent_AlreadyPurchased()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(PayPerView: [0x49C602668FE7a8B397255d678684323355754631], 100000 [1e5])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], value: 100000 [1e5])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [659380] PayPerView::purchaseContentDirect(1)
    │   ├─ [40649] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Test Content 1", description: "Test description", category: 0, payPerViewPrice: 100000 [1e5], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["test", "content"], isReported: false, reportCount: 0 })
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(100000 [1e5]) [staticcall]
    │   │   └─ ← [Return] 2500
    │   ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 1000000000 [1e9]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, PayPerView: [0x49C602668FE7a8B397255d678684323355754631]) [staticcall]
    │   │   └─ ← [Return] 100000 [1e5]
    │   ├─ [54088] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, PayPerView: [0x49C602668FE7a8B397255d678684323355754631], 100000 [1e5])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], value: 100000 [1e5])
    │   │   └─ ← [Return] true
    │   ├─ [73631] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 97500 [9.75e4], 0, 0)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 97500 [9.75e4], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ [70825] ContentRegistry::recordPurchase(1, 0x0000000000000000000000000000000000002001)
    │   │   ├─ emit ContentPurchased(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, price: 100000 [1e5], timestamp: 1)
    │   │   └─ ← [Stop]
    │   ├─ emit DirectPurchaseCompleted(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 100000 [1e5], platformFee: 2500, creatorEarning: 97500 [9.75e4])
    │   └─ ← [Stop]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Already purchased)
    │   └─ ← [Return]
    ├─ [22719] PayPerView::createPurchaseIntent(1, 0, 0x0000000000000000000000000000000000000000, 100)
    │   ├─ [10649] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Test Content 1", description: "Test description", category: 0, payPerViewPrice: 100000 [1e5], isActive: true, createdAt: 1, purchaseCount: 1, tags: ["test", "content"], isReported: false, reportCount: 0 })
    │   └─ ← [Revert] Already purchased
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    └─ ← [Stop]

[FAIL: EvmError: Revert] test_CreatePurchaseIntent_ETH() (gas: 110779)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [39358787] PayPerViewTest::setUp()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [1138080] → new MockERC20@0x22a7C94543caa0e72439289e039B35a64C79A966
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 5327 bytes of code
    ├─ [47643] MockERC20::mint(0x0000000000000000000000000000000000003001, 1000000000000 [1e12])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000003001, value: 1000000000000 [1e12])
    │   └─ ← [Stop]
    ├─ [1084925] → new MockCommerceProtocol@0xe1796e76a573113CcEDB6D266ae099471117972D
    │   └─ ← [Return] 5419 bytes of code
    ├─ [1503810] → new MockQuoterV2@0xCd54ec27b8c42B24BF58244214B5999334C58959
    │   └─ ← [Return] 6617 bytes of code
    ├─ [0] console::log("Mock dependencies deployed:") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock USDC:", MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock Commerce Protocol:", MockCommerceProtocol: [0xe1796e76a573113CcEDB6D266ae099471117972D]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock Quoter:", MockQuoterV2: [0xCd54ec27b8c42B24BF58244214B5999334C58959]) [staticcall]
    │   └─ ← [Stop]
    ├─ [1710396] → new PriceOracle@0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 8313 bytes of code
    ├─ [4031410] → new CreatorRegistry@0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 19432 bytes of code
    ├─ [5389674] → new ContentRegistry@0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 25995 bytes of code
    ├─ [6590652] → new PayPerView@0x49C602668FE7a8B397255d678684323355754631
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xc89f08b49c068684bf15b77e68611a9f601e70d1f919059510bccd18e691e535, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 32302 bytes of code
    ├─ [7122434] → new SubscriptionManager@0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x1fa68478e710912de24d46d09a1aa735096685a61549eeb0fefb3693b245e69c, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x4a2743f41a15276dad6813e73326037e88c2a55ffdd5c4cab4ea1745629b0d34, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 34738 bytes of code
    ├─ [8485998] → new CommerceProtocolIntegration@0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x501c65bac3e4ac3ac69864ba85559de0249f52b20e002f1e1d1232fd4e169231, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xe2f4eaae4a9751e85a3e4a7b9587827a877f29914755229b07a7b2da98285f70, account: 0x0000000000000000000000000000000000003003, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 41307 bytes of code
    ├─ [0] console::log("Core contracts deployed:") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- CreatorRegistry:", CreatorRegistry: [0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- ContentRegistry:", ContentRegistry: [0x483a0eDa4d8856c61347B0F2e5B84a7af717c308]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- PayPerView:", PayPerView: [0x49C602668FE7a8B397255d678684323355754631]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- SubscriptionManager:", SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- CommerceIntegration:", CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B]) [staticcall]
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25566] ContentRegistry::grantPurchaseRecorderRole(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit RoleGranted(role: 0x9587bd5d64fd9020a2c3c45e38d0e7ca3330d50e4b4dd00bfe972ac5de3bc565, account: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25544] PayPerView::grantPaymentProcessorRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25544] SubscriptionManager::grantSubscriptionProcessorRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0x4a2743f41a15276dad6813e73326037e88c2a55ffdd5c4cab4ea1745629b0d34, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25735] CommerceProtocolIntegration::setPayPerView(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit ContractAddressUpdated(contractName: "PayPerView", oldAddress: 0x0000000000000000000000000000000000000000, newAddress: PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   └─ ← [Stop]
    ├─ [25756] CommerceProtocolIntegration::setSubscriptionManager(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   ├─ emit ContractAddressUpdated(contractName: "SubscriptionManager", oldAddress: 0x0000000000000000000000000000000000000000, newAddress: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   └─ ← [Stop]
    ├─ [0] console::log("Contract permissions configured") [staticcall]
    │   └─ ← [Stop]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000001001, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000001001, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000001001, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000001002, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000001002, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000001002, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000002001, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000002001, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000002001, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000002002, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000002002, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000002002, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [0] console::log("Test users set up with initial balances") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [174504] CreatorRegistry::registerCreator(1000000 [1e6], "Default profile")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000001001, subscriptionPrice: 1000000 [1e6], timestamp: 1, profileData: "Default profile")
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001002)
    │   └─ ← [Return]
    ├─ [150604] CreatorRegistry::registerCreator(1000000 [1e6], "Default profile")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000001002, subscriptionPrice: 1000000 [1e6], timestamp: 1, profileData: "Default profile")
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [574377] ContentRegistry::registerContent("QmTestHash123456789", "Test Content 1", "Test description", 0, 100000 [1e5], ["test", "content"])
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 1, creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Test Content 1", category: 0, payPerViewPrice: 100000 [1e5], timestamp: 1)
    │   └─ ← [Return] 1
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001002)
    │   └─ ← [Return]
    ├─ [411077] ContentRegistry::registerContent("QmTestHash123456789", "Test Content 2", "Test description", 0, 200000 [2e5], ["test", "content"])
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001002) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001002, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 2, creator: 0x0000000000000000000000000000000000001002, ipfsHash: "QmTestHash123456789", title: "Test Content 2", category: 0, payPerViewPrice: 200000 [2e5], timestamp: 1)
    │   └─ ← [Return] 2
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [462] PriceOracle::WETH() [staticcall]
    │   └─ ← [Return] 0x4200000000000000000000000000000000000006
    ├─ [396] PriceOracle::USDC() [staticcall]
    │   └─ ← [Return] 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913
    ├─ [1482] MockQuoterV2::setMockPrice(0x4200000000000000000000000000000000000006, 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 3000, 2000000000 [2e9])
    │   └─ ← [Stop]
    ├─ [396] PriceOracle::USDC() [staticcall]
    │   └─ ← [Return] 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913
    ├─ [462] PriceOracle::WETH() [staticcall]
    │   └─ ← [Return] 0x4200000000000000000000000000000000000006
    ├─ [1482] MockQuoterV2::setMockPrice(0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 0x4200000000000000000000000000000000000006, 3000, 500000000000000 [5e14])
    │   └─ ← [Stop]
    └─ ← [Stop]

  [110779] PayPerViewTest::test_CreatePurchaseIntent_ETH()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [97788] PayPerView::createPurchaseIntent(1, 1, 0x0000000000000000000000000000000000000000, 100)
    │   ├─ [40649] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Test Content 1", description: "Test description", category: 0, payPerViewPrice: 100000 [1e5], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["test", "content"], isReported: false, reportCount: 0 })
    │   ├─ [9162] PriceOracle::getETHPrice(100000 [1e5])
    │   │   ├─ [0] 0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x4200000000000000000000000000000000000006, tokenOut: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, amountIn: 1000000000000000000 [1e18], fee: 3000, sqrtPriceLimitX96: 0 }))
    │   │   │   └─ ← [Stop]
    │   │   └─ ← [Revert] EvmError: Revert
    │   └─ ← [Revert] EvmError: Revert
    └─ ← [Revert] EvmError: Revert

[FAIL: Error != expected error: InvalidContentId() != Content not found] test_CreatePurchaseIntent_NonExistentContent() (gas: 25839)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [39358787] PayPerViewTest::setUp()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [1138080] → new MockERC20@0x22a7C94543caa0e72439289e039B35a64C79A966
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 5327 bytes of code
    ├─ [47643] MockERC20::mint(0x0000000000000000000000000000000000003001, 1000000000000 [1e12])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000003001, value: 1000000000000 [1e12])
    │   └─ ← [Stop]
    ├─ [1084925] → new MockCommerceProtocol@0xe1796e76a573113CcEDB6D266ae099471117972D
    │   └─ ← [Return] 5419 bytes of code
    ├─ [1503810] → new MockQuoterV2@0xCd54ec27b8c42B24BF58244214B5999334C58959
    │   └─ ← [Return] 6617 bytes of code
    ├─ [0] console::log("Mock dependencies deployed:") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock USDC:", MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock Commerce Protocol:", MockCommerceProtocol: [0xe1796e76a573113CcEDB6D266ae099471117972D]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock Quoter:", MockQuoterV2: [0xCd54ec27b8c42B24BF58244214B5999334C58959]) [staticcall]
    │   └─ ← [Stop]
    ├─ [1710396] → new PriceOracle@0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 8313 bytes of code
    ├─ [4031410] → new CreatorRegistry@0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 19432 bytes of code
    ├─ [5389674] → new ContentRegistry@0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 25995 bytes of code
    ├─ [6590652] → new PayPerView@0x49C602668FE7a8B397255d678684323355754631
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xc89f08b49c068684bf15b77e68611a9f601e70d1f919059510bccd18e691e535, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 32302 bytes of code
    ├─ [7122434] → new SubscriptionManager@0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x1fa68478e710912de24d46d09a1aa735096685a61549eeb0fefb3693b245e69c, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x4a2743f41a15276dad6813e73326037e88c2a55ffdd5c4cab4ea1745629b0d34, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 34738 bytes of code
    ├─ [8485998] → new CommerceProtocolIntegration@0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x501c65bac3e4ac3ac69864ba85559de0249f52b20e002f1e1d1232fd4e169231, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xe2f4eaae4a9751e85a3e4a7b9587827a877f29914755229b07a7b2da98285f70, account: 0x0000000000000000000000000000000000003003, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 41307 bytes of code
    ├─ [0] console::log("Core contracts deployed:") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- CreatorRegistry:", CreatorRegistry: [0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- ContentRegistry:", ContentRegistry: [0x483a0eDa4d8856c61347B0F2e5B84a7af717c308]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- PayPerView:", PayPerView: [0x49C602668FE7a8B397255d678684323355754631]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- SubscriptionManager:", SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- CommerceIntegration:", CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B]) [staticcall]
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25566] ContentRegistry::grantPurchaseRecorderRole(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit RoleGranted(role: 0x9587bd5d64fd9020a2c3c45e38d0e7ca3330d50e4b4dd00bfe972ac5de3bc565, account: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25544] PayPerView::grantPaymentProcessorRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25544] SubscriptionManager::grantSubscriptionProcessorRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0x4a2743f41a15276dad6813e73326037e88c2a55ffdd5c4cab4ea1745629b0d34, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25735] CommerceProtocolIntegration::setPayPerView(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit ContractAddressUpdated(contractName: "PayPerView", oldAddress: 0x0000000000000000000000000000000000000000, newAddress: PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   └─ ← [Stop]
    ├─ [25756] CommerceProtocolIntegration::setSubscriptionManager(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   ├─ emit ContractAddressUpdated(contractName: "SubscriptionManager", oldAddress: 0x0000000000000000000000000000000000000000, newAddress: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   └─ ← [Stop]
    ├─ [0] console::log("Contract permissions configured") [staticcall]
    │   └─ ← [Stop]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000001001, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000001001, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000001001, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000001002, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000001002, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000001002, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000002001, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000002001, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000002001, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000002002, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000002002, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000002002, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [0] console::log("Test users set up with initial balances") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [174504] CreatorRegistry::registerCreator(1000000 [1e6], "Default profile")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000001001, subscriptionPrice: 1000000 [1e6], timestamp: 1, profileData: "Default profile")
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001002)
    │   └─ ← [Return]
    ├─ [150604] CreatorRegistry::registerCreator(1000000 [1e6], "Default profile")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000001002, subscriptionPrice: 1000000 [1e6], timestamp: 1, profileData: "Default profile")
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [574377] ContentRegistry::registerContent("QmTestHash123456789", "Test Content 1", "Test description", 0, 100000 [1e5], ["test", "content"])
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 1, creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Test Content 1", category: 0, payPerViewPrice: 100000 [1e5], timestamp: 1)
    │   └─ ← [Return] 1
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001002)
    │   └─ ← [Return]
    ├─ [411077] ContentRegistry::registerContent("QmTestHash123456789", "Test Content 2", "Test description", 0, 200000 [2e5], ["test", "content"])
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001002) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001002, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 2, creator: 0x0000000000000000000000000000000000001002, ipfsHash: "QmTestHash123456789", title: "Test Content 2", category: 0, payPerViewPrice: 200000 [2e5], timestamp: 1)
    │   └─ ← [Return] 2
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [462] PriceOracle::WETH() [staticcall]
    │   └─ ← [Return] 0x4200000000000000000000000000000000000006
    ├─ [396] PriceOracle::USDC() [staticcall]
    │   └─ ← [Return] 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913
    ├─ [1482] MockQuoterV2::setMockPrice(0x4200000000000000000000000000000000000006, 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 3000, 2000000000 [2e9])
    │   └─ ← [Stop]
    ├─ [396] PriceOracle::USDC() [staticcall]
    │   └─ ← [Return] 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913
    ├─ [462] PriceOracle::WETH() [staticcall]
    │   └─ ← [Return] 0x4200000000000000000000000000000000000006
    ├─ [1482] MockQuoterV2::setMockPrice(0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 0x4200000000000000000000000000000000000006, 3000, 500000000000000 [5e14])
    │   └─ ← [Stop]
    └─ ← [Stop]

  [25839] PayPerViewTest::test_CreatePurchaseIntent_NonExistentContent()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Content not found)
    │   └─ ← [Return]
    ├─ [14122] PayPerView::createPurchaseIntent(999, 0, 0x0000000000000000000000000000000000000000, 100)
    │   ├─ [2980] ContentRegistry::getContent(999) [staticcall]
    │   │   └─ ← [Revert] InvalidContentId()
    │   └─ ← [Revert] InvalidContentId()
    └─ ← [Revert] Error != expected error: InvalidContentId() != Content not found

[FAIL: EvmError: Revert] test_CreatePurchaseIntent_OtherToken() (gas: 147074)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [39358787] PayPerViewTest::setUp()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [1138080] → new MockERC20@0x22a7C94543caa0e72439289e039B35a64C79A966
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 5327 bytes of code
    ├─ [47643] MockERC20::mint(0x0000000000000000000000000000000000003001, 1000000000000 [1e12])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000003001, value: 1000000000000 [1e12])
    │   └─ ← [Stop]
    ├─ [1084925] → new MockCommerceProtocol@0xe1796e76a573113CcEDB6D266ae099471117972D
    │   └─ ← [Return] 5419 bytes of code
    ├─ [1503810] → new MockQuoterV2@0xCd54ec27b8c42B24BF58244214B5999334C58959
    │   └─ ← [Return] 6617 bytes of code
    ├─ [0] console::log("Mock dependencies deployed:") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock USDC:", MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock Commerce Protocol:", MockCommerceProtocol: [0xe1796e76a573113CcEDB6D266ae099471117972D]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock Quoter:", MockQuoterV2: [0xCd54ec27b8c42B24BF58244214B5999334C58959]) [staticcall]
    │   └─ ← [Stop]
    ├─ [1710396] → new PriceOracle@0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 8313 bytes of code
    ├─ [4031410] → new CreatorRegistry@0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 19432 bytes of code
    ├─ [5389674] → new ContentRegistry@0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 25995 bytes of code
    ├─ [6590652] → new PayPerView@0x49C602668FE7a8B397255d678684323355754631
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xc89f08b49c068684bf15b77e68611a9f601e70d1f919059510bccd18e691e535, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 32302 bytes of code
    ├─ [7122434] → new SubscriptionManager@0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x1fa68478e710912de24d46d09a1aa735096685a61549eeb0fefb3693b245e69c, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x4a2743f41a15276dad6813e73326037e88c2a55ffdd5c4cab4ea1745629b0d34, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 34738 bytes of code
    ├─ [8485998] → new CommerceProtocolIntegration@0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x501c65bac3e4ac3ac69864ba85559de0249f52b20e002f1e1d1232fd4e169231, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xe2f4eaae4a9751e85a3e4a7b9587827a877f29914755229b07a7b2da98285f70, account: 0x0000000000000000000000000000000000003003, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 41307 bytes of code
    ├─ [0] console::log("Core contracts deployed:") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- CreatorRegistry:", CreatorRegistry: [0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- ContentRegistry:", ContentRegistry: [0x483a0eDa4d8856c61347B0F2e5B84a7af717c308]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- PayPerView:", PayPerView: [0x49C602668FE7a8B397255d678684323355754631]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- SubscriptionManager:", SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- CommerceIntegration:", CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B]) [staticcall]
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25566] ContentRegistry::grantPurchaseRecorderRole(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit RoleGranted(role: 0x9587bd5d64fd9020a2c3c45e38d0e7ca3330d50e4b4dd00bfe972ac5de3bc565, account: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25544] PayPerView::grantPaymentProcessorRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25544] SubscriptionManager::grantSubscriptionProcessorRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0x4a2743f41a15276dad6813e73326037e88c2a55ffdd5c4cab4ea1745629b0d34, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25735] CommerceProtocolIntegration::setPayPerView(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit ContractAddressUpdated(contractName: "PayPerView", oldAddress: 0x0000000000000000000000000000000000000000, newAddress: PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   └─ ← [Stop]
    ├─ [25756] CommerceProtocolIntegration::setSubscriptionManager(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   ├─ emit ContractAddressUpdated(contractName: "SubscriptionManager", oldAddress: 0x0000000000000000000000000000000000000000, newAddress: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   └─ ← [Stop]
    ├─ [0] console::log("Contract permissions configured") [staticcall]
    │   └─ ← [Stop]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000001001, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000001001, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000001001, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000001002, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000001002, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000001002, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000002001, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000002001, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000002001, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000002002, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000002002, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000002002, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [0] console::log("Test users set up with initial balances") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [174504] CreatorRegistry::registerCreator(1000000 [1e6], "Default profile")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000001001, subscriptionPrice: 1000000 [1e6], timestamp: 1, profileData: "Default profile")
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001002)
    │   └─ ← [Return]
    ├─ [150604] CreatorRegistry::registerCreator(1000000 [1e6], "Default profile")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000001002, subscriptionPrice: 1000000 [1e6], timestamp: 1, profileData: "Default profile")
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [574377] ContentRegistry::registerContent("QmTestHash123456789", "Test Content 1", "Test description", 0, 100000 [1e5], ["test", "content"])
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 1, creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Test Content 1", category: 0, payPerViewPrice: 100000 [1e5], timestamp: 1)
    │   └─ ← [Return] 1
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001002)
    │   └─ ← [Return]
    ├─ [411077] ContentRegistry::registerContent("QmTestHash123456789", "Test Content 2", "Test description", 0, 200000 [2e5], ["test", "content"])
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001002) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001002, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 2, creator: 0x0000000000000000000000000000000000001002, ipfsHash: "QmTestHash123456789", title: "Test Content 2", category: 0, payPerViewPrice: 200000 [2e5], timestamp: 1)
    │   └─ ← [Return] 2
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [462] PriceOracle::WETH() [staticcall]
    │   └─ ← [Return] 0x4200000000000000000000000000000000000006
    ├─ [396] PriceOracle::USDC() [staticcall]
    │   └─ ← [Return] 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913
    ├─ [1482] MockQuoterV2::setMockPrice(0x4200000000000000000000000000000000000006, 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 3000, 2000000000 [2e9])
    │   └─ ← [Stop]
    ├─ [396] PriceOracle::USDC() [staticcall]
    │   └─ ← [Return] 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913
    ├─ [462] PriceOracle::WETH() [staticcall]
    │   └─ ← [Return] 0x4200000000000000000000000000000000000006
    ├─ [1482] MockQuoterV2::setMockPrice(0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 0x4200000000000000000000000000000000000006, 3000, 500000000000000 [5e14])
    │   └─ ← [Stop]
    └─ ← [Stop]

  [147074] PayPerViewTest::test_CreatePurchaseIntent_OtherToken()
    ├─ [23482] MockQuoterV2::setMockPrice(0x0000000000000000000000000000000000001234, MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966], 3000, 1000000 [1e6])
    │   └─ ← [Stop]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [102650] PayPerView::createPurchaseIntent(1, 3, 0x0000000000000000000000000000000000001234, 200)
    │   ├─ [40649] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Test Content 1", description: "Test description", category: 0, payPerViewPrice: 100000 [1e5], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["test", "content"], isReported: false, reportCount: 0 })
    │   ├─ [13489] PriceOracle::getTokenAmountForUSDC(0x0000000000000000000000000000000000001234, 100000 [1e5], 0)
    │   │   ├─ [0] 0x0000000000000000000000000000000000001234::decimals() [staticcall]
    │   │   │   └─ ← [Stop]
    │   │   ├─ [0] 0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x0000000000000000000000000000000000001234, tokenOut: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, amountIn: 1000000000000000000 [1e18], fee: 10000 [1e4], sqrtPriceLimitX96: 0 }))
    │   │   │   └─ ← [Stop]
    │   │   └─ ← [Revert] EvmError: Revert
    │   └─ ← [Revert] EvmError: Revert
    └─ ← [Revert] EvmError: Revert

[FAIL: assertion failed: 101000 != 100000] test_CreatePurchaseIntent_USDC() (gas: 253742)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [39358787] PayPerViewTest::setUp()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [1138080] → new MockERC20@0x22a7C94543caa0e72439289e039B35a64C79A966
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 5327 bytes of code
    ├─ [47643] MockERC20::mint(0x0000000000000000000000000000000000003001, 1000000000000 [1e12])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000003001, value: 1000000000000 [1e12])
    │   └─ ← [Stop]
    ├─ [1084925] → new MockCommerceProtocol@0xe1796e76a573113CcEDB6D266ae099471117972D
    │   └─ ← [Return] 5419 bytes of code
    ├─ [1503810] → new MockQuoterV2@0xCd54ec27b8c42B24BF58244214B5999334C58959
    │   └─ ← [Return] 6617 bytes of code
    ├─ [0] console::log("Mock dependencies deployed:") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock USDC:", MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock Commerce Protocol:", MockCommerceProtocol: [0xe1796e76a573113CcEDB6D266ae099471117972D]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock Quoter:", MockQuoterV2: [0xCd54ec27b8c42B24BF58244214B5999334C58959]) [staticcall]
    │   └─ ← [Stop]
    ├─ [1710396] → new PriceOracle@0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 8313 bytes of code
    ├─ [4031410] → new CreatorRegistry@0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 19432 bytes of code
    ├─ [5389674] → new ContentRegistry@0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 25995 bytes of code
    ├─ [6590652] → new PayPerView@0x49C602668FE7a8B397255d678684323355754631
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xc89f08b49c068684bf15b77e68611a9f601e70d1f919059510bccd18e691e535, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 32302 bytes of code
    ├─ [7122434] → new SubscriptionManager@0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x1fa68478e710912de24d46d09a1aa735096685a61549eeb0fefb3693b245e69c, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x4a2743f41a15276dad6813e73326037e88c2a55ffdd5c4cab4ea1745629b0d34, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 34738 bytes of code
    ├─ [8485998] → new CommerceProtocolIntegration@0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x501c65bac3e4ac3ac69864ba85559de0249f52b20e002f1e1d1232fd4e169231, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xe2f4eaae4a9751e85a3e4a7b9587827a877f29914755229b07a7b2da98285f70, account: 0x0000000000000000000000000000000000003003, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 41307 bytes of code
    ├─ [0] console::log("Core contracts deployed:") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- CreatorRegistry:", CreatorRegistry: [0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- ContentRegistry:", ContentRegistry: [0x483a0eDa4d8856c61347B0F2e5B84a7af717c308]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- PayPerView:", PayPerView: [0x49C602668FE7a8B397255d678684323355754631]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- SubscriptionManager:", SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- CommerceIntegration:", CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B]) [staticcall]
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25566] ContentRegistry::grantPurchaseRecorderRole(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit RoleGranted(role: 0x9587bd5d64fd9020a2c3c45e38d0e7ca3330d50e4b4dd00bfe972ac5de3bc565, account: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25544] PayPerView::grantPaymentProcessorRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25544] SubscriptionManager::grantSubscriptionProcessorRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0x4a2743f41a15276dad6813e73326037e88c2a55ffdd5c4cab4ea1745629b0d34, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25735] CommerceProtocolIntegration::setPayPerView(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit ContractAddressUpdated(contractName: "PayPerView", oldAddress: 0x0000000000000000000000000000000000000000, newAddress: PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   └─ ← [Stop]
    ├─ [25756] CommerceProtocolIntegration::setSubscriptionManager(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   ├─ emit ContractAddressUpdated(contractName: "SubscriptionManager", oldAddress: 0x0000000000000000000000000000000000000000, newAddress: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   └─ ← [Stop]
    ├─ [0] console::log("Contract permissions configured") [staticcall]
    │   └─ ← [Stop]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000001001, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000001001, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000001001, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000001002, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000001002, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000001002, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000002001, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000002001, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000002001, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000002002, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000002002, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000002002, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [0] console::log("Test users set up with initial balances") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [174504] CreatorRegistry::registerCreator(1000000 [1e6], "Default profile")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000001001, subscriptionPrice: 1000000 [1e6], timestamp: 1, profileData: "Default profile")
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001002)
    │   └─ ← [Return]
    ├─ [150604] CreatorRegistry::registerCreator(1000000 [1e6], "Default profile")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000001002, subscriptionPrice: 1000000 [1e6], timestamp: 1, profileData: "Default profile")
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [574377] ContentRegistry::registerContent("QmTestHash123456789", "Test Content 1", "Test description", 0, 100000 [1e5], ["test", "content"])
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 1, creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Test Content 1", category: 0, payPerViewPrice: 100000 [1e5], timestamp: 1)
    │   └─ ← [Return] 1
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001002)
    │   └─ ← [Return]
    ├─ [411077] ContentRegistry::registerContent("QmTestHash123456789", "Test Content 2", "Test description", 0, 200000 [2e5], ["test", "content"])
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001002) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001002, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 2, creator: 0x0000000000000000000000000000000000001002, ipfsHash: "QmTestHash123456789", title: "Test Content 2", category: 0, payPerViewPrice: 200000 [2e5], timestamp: 1)
    │   └─ ← [Return] 2
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [462] PriceOracle::WETH() [staticcall]
    │   └─ ← [Return] 0x4200000000000000000000000000000000000006
    ├─ [396] PriceOracle::USDC() [staticcall]
    │   └─ ← [Return] 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913
    ├─ [1482] MockQuoterV2::setMockPrice(0x4200000000000000000000000000000000000006, 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 3000, 2000000000 [2e9])
    │   └─ ← [Stop]
    ├─ [396] PriceOracle::USDC() [staticcall]
    │   └─ ← [Return] 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913
    ├─ [462] PriceOracle::WETH() [staticcall]
    │   └─ ← [Return] 0x4200000000000000000000000000000000000006
    ├─ [1482] MockQuoterV2::setMockPrice(0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 0x4200000000000000000000000000000000000006, 3000, 500000000000000 [5e14])
    │   └─ ← [Stop]
    └─ ← [Stop]

  [253742] PayPerViewTest::test_CreatePurchaseIntent_USDC()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [0] VM::expectEmit(true, true, true, false)
    │   └─ ← [Return]
    ├─ emit ContentPurchaseInitiated(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, intentId: 0x00000000000000000000000000000000, paymentMethod: 0, usdcPrice: 100000 [1e5], expectedPaymentAmount: 100000 [1e5])
    ├─ [231956] PayPerView::createPurchaseIntent(1, 0, 0x0000000000000000000000000000000000000000, 100)
    │   ├─ [40649] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Test Content 1", description: "Test description", category: 0, payPerViewPrice: 100000 [1e5], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["test", "content"], isReported: false, reportCount: 0 })
    │   ├─ [1055] PriceOracle::getTokenAmountForUSDC(0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 100000 [1e5], 0)
    │   │   └─ ← [Return] 100000 [1e5]
    │   ├─ [1445] PriceOracle::applySlippage(100000 [1e5], 100) [staticcall]
    │   │   └─ ← [Return] 101000 [1.01e5]
    │   ├─ emit ContentPurchaseInitiated(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, intentId: 0xa4fda21ee56bb9fbd55ff9f1c86373b6, paymentMethod: 0, usdcPrice: 100000 [1e5], expectedPaymentAmount: 101000 [1.01e5])
    │   └─ ← [Return] 0xa4fda21ee56bb9fbd55ff9f1c86373b6, 101000 [1.01e5], 3601
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(101000 [1.01e5], 100000 [1e5]) [staticcall]
    │   └─ ← [Revert] assertion failed: 101000 != 100000
    └─ ← [Revert] assertion failed: 101000 != 100000

[FAIL: Error != expected error: InvalidContentId() != Content not found] test_GetPaymentOptions_NonExistentContent() (gas: 14822)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [39358787] PayPerViewTest::setUp()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [1138080] → new MockERC20@0x22a7C94543caa0e72439289e039B35a64C79A966
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 5327 bytes of code
    ├─ [47643] MockERC20::mint(0x0000000000000000000000000000000000003001, 1000000000000 [1e12])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000003001, value: 1000000000000 [1e12])
    │   └─ ← [Stop]
    ├─ [1084925] → new MockCommerceProtocol@0xe1796e76a573113CcEDB6D266ae099471117972D
    │   └─ ← [Return] 5419 bytes of code
    ├─ [1503810] → new MockQuoterV2@0xCd54ec27b8c42B24BF58244214B5999334C58959
    │   └─ ← [Return] 6617 bytes of code
    ├─ [0] console::log("Mock dependencies deployed:") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock USDC:", MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock Commerce Protocol:", MockCommerceProtocol: [0xe1796e76a573113CcEDB6D266ae099471117972D]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock Quoter:", MockQuoterV2: [0xCd54ec27b8c42B24BF58244214B5999334C58959]) [staticcall]
    │   └─ ← [Stop]
    ├─ [1710396] → new PriceOracle@0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 8313 bytes of code
    ├─ [4031410] → new CreatorRegistry@0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 19432 bytes of code
    ├─ [5389674] → new ContentRegistry@0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 25995 bytes of code
    ├─ [6590652] → new PayPerView@0x49C602668FE7a8B397255d678684323355754631
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xc89f08b49c068684bf15b77e68611a9f601e70d1f919059510bccd18e691e535, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 32302 bytes of code
    ├─ [7122434] → new SubscriptionManager@0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x1fa68478e710912de24d46d09a1aa735096685a61549eeb0fefb3693b245e69c, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x4a2743f41a15276dad6813e73326037e88c2a55ffdd5c4cab4ea1745629b0d34, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 34738 bytes of code
    ├─ [8485998] → new CommerceProtocolIntegration@0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x501c65bac3e4ac3ac69864ba85559de0249f52b20e002f1e1d1232fd4e169231, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xe2f4eaae4a9751e85a3e4a7b9587827a877f29914755229b07a7b2da98285f70, account: 0x0000000000000000000000000000000000003003, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 41307 bytes of code
    ├─ [0] console::log("Core contracts deployed:") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- CreatorRegistry:", CreatorRegistry: [0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- ContentRegistry:", ContentRegistry: [0x483a0eDa4d8856c61347B0F2e5B84a7af717c308]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- PayPerView:", PayPerView: [0x49C602668FE7a8B397255d678684323355754631]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- SubscriptionManager:", SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- CommerceIntegration:", CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B]) [staticcall]
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25566] ContentRegistry::grantPurchaseRecorderRole(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit RoleGranted(role: 0x9587bd5d64fd9020a2c3c45e38d0e7ca3330d50e4b4dd00bfe972ac5de3bc565, account: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25544] PayPerView::grantPaymentProcessorRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25544] SubscriptionManager::grantSubscriptionProcessorRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0x4a2743f41a15276dad6813e73326037e88c2a55ffdd5c4cab4ea1745629b0d34, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25735] CommerceProtocolIntegration::setPayPerView(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit ContractAddressUpdated(contractName: "PayPerView", oldAddress: 0x0000000000000000000000000000000000000000, newAddress: PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   └─ ← [Stop]
    ├─ [25756] CommerceProtocolIntegration::setSubscriptionManager(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   ├─ emit ContractAddressUpdated(contractName: "SubscriptionManager", oldAddress: 0x0000000000000000000000000000000000000000, newAddress: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   └─ ← [Stop]
    ├─ [0] console::log("Contract permissions configured") [staticcall]
    │   └─ ← [Stop]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000001001, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000001001, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000001001, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000001002, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000001002, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000001002, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000002001, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000002001, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000002001, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000002002, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000002002, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000002002, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [0] console::log("Test users set up with initial balances") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [174504] CreatorRegistry::registerCreator(1000000 [1e6], "Default profile")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000001001, subscriptionPrice: 1000000 [1e6], timestamp: 1, profileData: "Default profile")
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001002)
    │   └─ ← [Return]
    ├─ [150604] CreatorRegistry::registerCreator(1000000 [1e6], "Default profile")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000001002, subscriptionPrice: 1000000 [1e6], timestamp: 1, profileData: "Default profile")
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [574377] ContentRegistry::registerContent("QmTestHash123456789", "Test Content 1", "Test description", 0, 100000 [1e5], ["test", "content"])
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 1, creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Test Content 1", category: 0, payPerViewPrice: 100000 [1e5], timestamp: 1)
    │   └─ ← [Return] 1
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001002)
    │   └─ ← [Return]
    ├─ [411077] ContentRegistry::registerContent("QmTestHash123456789", "Test Content 2", "Test description", 0, 200000 [2e5], ["test", "content"])
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001002) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001002, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 2, creator: 0x0000000000000000000000000000000000001002, ipfsHash: "QmTestHash123456789", title: "Test Content 2", category: 0, payPerViewPrice: 200000 [2e5], timestamp: 1)
    │   └─ ← [Return] 2
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [462] PriceOracle::WETH() [staticcall]
    │   └─ ← [Return] 0x4200000000000000000000000000000000000006
    ├─ [396] PriceOracle::USDC() [staticcall]
    │   └─ ← [Return] 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913
    ├─ [1482] MockQuoterV2::setMockPrice(0x4200000000000000000000000000000000000006, 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 3000, 2000000000 [2e9])
    │   └─ ← [Stop]
    ├─ [396] PriceOracle::USDC() [staticcall]
    │   └─ ← [Return] 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913
    ├─ [462] PriceOracle::WETH() [staticcall]
    │   └─ ← [Return] 0x4200000000000000000000000000000000000006
    ├─ [1482] MockQuoterV2::setMockPrice(0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 0x4200000000000000000000000000000000000006, 3000, 500000000000000 [5e14])
    │   └─ ← [Stop]
    └─ ← [Stop]

  [14822] PayPerViewTest::test_GetPaymentOptions_NonExistentContent()
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Content not found)
    │   └─ ← [Return]
    ├─ [6378] PayPerView::getPaymentOptions(999)
    │   ├─ [2980] ContentRegistry::getContent(999) [staticcall]
    │   │   └─ ← [Revert] InvalidContentId()
    │   └─ ← [Revert] InvalidContentId()
    └─ ← [Revert] Error != expected error: InvalidContentId() != Content not found

[FAIL: assertion failed] test_GetPaymentOptions_Success() (gas: 82688)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [39358787] PayPerViewTest::setUp()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [1138080] → new MockERC20@0x22a7C94543caa0e72439289e039B35a64C79A966
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 5327 bytes of code
    ├─ [47643] MockERC20::mint(0x0000000000000000000000000000000000003001, 1000000000000 [1e12])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000003001, value: 1000000000000 [1e12])
    │   └─ ← [Stop]
    ├─ [1084925] → new MockCommerceProtocol@0xe1796e76a573113CcEDB6D266ae099471117972D
    │   └─ ← [Return] 5419 bytes of code
    ├─ [1503810] → new MockQuoterV2@0xCd54ec27b8c42B24BF58244214B5999334C58959
    │   └─ ← [Return] 6617 bytes of code
    ├─ [0] console::log("Mock dependencies deployed:") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock USDC:", MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock Commerce Protocol:", MockCommerceProtocol: [0xe1796e76a573113CcEDB6D266ae099471117972D]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock Quoter:", MockQuoterV2: [0xCd54ec27b8c42B24BF58244214B5999334C58959]) [staticcall]
    │   └─ ← [Stop]
    ├─ [1710396] → new PriceOracle@0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 8313 bytes of code
    ├─ [4031410] → new CreatorRegistry@0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 19432 bytes of code
    ├─ [5389674] → new ContentRegistry@0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 25995 bytes of code
    ├─ [6590652] → new PayPerView@0x49C602668FE7a8B397255d678684323355754631
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xc89f08b49c068684bf15b77e68611a9f601e70d1f919059510bccd18e691e535, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 32302 bytes of code
    ├─ [7122434] → new SubscriptionManager@0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x1fa68478e710912de24d46d09a1aa735096685a61549eeb0fefb3693b245e69c, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x4a2743f41a15276dad6813e73326037e88c2a55ffdd5c4cab4ea1745629b0d34, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 34738 bytes of code
    ├─ [8485998] → new CommerceProtocolIntegration@0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x501c65bac3e4ac3ac69864ba85559de0249f52b20e002f1e1d1232fd4e169231, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xe2f4eaae4a9751e85a3e4a7b9587827a877f29914755229b07a7b2da98285f70, account: 0x0000000000000000000000000000000000003003, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 41307 bytes of code
    ├─ [0] console::log("Core contracts deployed:") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- CreatorRegistry:", CreatorRegistry: [0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- ContentRegistry:", ContentRegistry: [0x483a0eDa4d8856c61347B0F2e5B84a7af717c308]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- PayPerView:", PayPerView: [0x49C602668FE7a8B397255d678684323355754631]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- SubscriptionManager:", SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- CommerceIntegration:", CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B]) [staticcall]
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25566] ContentRegistry::grantPurchaseRecorderRole(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit RoleGranted(role: 0x9587bd5d64fd9020a2c3c45e38d0e7ca3330d50e4b4dd00bfe972ac5de3bc565, account: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25544] PayPerView::grantPaymentProcessorRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25544] SubscriptionManager::grantSubscriptionProcessorRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0x4a2743f41a15276dad6813e73326037e88c2a55ffdd5c4cab4ea1745629b0d34, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25735] CommerceProtocolIntegration::setPayPerView(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit ContractAddressUpdated(contractName: "PayPerView", oldAddress: 0x0000000000000000000000000000000000000000, newAddress: PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   └─ ← [Stop]
    ├─ [25756] CommerceProtocolIntegration::setSubscriptionManager(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   ├─ emit ContractAddressUpdated(contractName: "SubscriptionManager", oldAddress: 0x0000000000000000000000000000000000000000, newAddress: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   └─ ← [Stop]
    ├─ [0] console::log("Contract permissions configured") [staticcall]
    │   └─ ← [Stop]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000001001, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000001001, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000001001, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000001002, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000001002, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000001002, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000002001, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000002001, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000002001, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000002002, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000002002, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000002002, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [0] console::log("Test users set up with initial balances") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [174504] CreatorRegistry::registerCreator(1000000 [1e6], "Default profile")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000001001, subscriptionPrice: 1000000 [1e6], timestamp: 1, profileData: "Default profile")
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001002)
    │   └─ ← [Return]
    ├─ [150604] CreatorRegistry::registerCreator(1000000 [1e6], "Default profile")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000001002, subscriptionPrice: 1000000 [1e6], timestamp: 1, profileData: "Default profile")
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [574377] ContentRegistry::registerContent("QmTestHash123456789", "Test Content 1", "Test description", 0, 100000 [1e5], ["test", "content"])
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 1, creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Test Content 1", category: 0, payPerViewPrice: 100000 [1e5], timestamp: 1)
    │   └─ ← [Return] 1
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001002)
    │   └─ ← [Return]
    ├─ [411077] ContentRegistry::registerContent("QmTestHash123456789", "Test Content 2", "Test description", 0, 200000 [2e5], ["test", "content"])
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001002) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001002, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 2, creator: 0x0000000000000000000000000000000000001002, ipfsHash: "QmTestHash123456789", title: "Test Content 2", category: 0, payPerViewPrice: 200000 [2e5], timestamp: 1)
    │   └─ ← [Return] 2
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [462] PriceOracle::WETH() [staticcall]
    │   └─ ← [Return] 0x4200000000000000000000000000000000000006
    ├─ [396] PriceOracle::USDC() [staticcall]
    │   └─ ← [Return] 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913
    ├─ [1482] MockQuoterV2::setMockPrice(0x4200000000000000000000000000000000000006, 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 3000, 2000000000 [2e9])
    │   └─ ← [Stop]
    ├─ [396] PriceOracle::USDC() [staticcall]
    │   └─ ← [Return] 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913
    ├─ [462] PriceOracle::WETH() [staticcall]
    │   └─ ← [Return] 0x4200000000000000000000000000000000000006
    ├─ [1482] MockQuoterV2::setMockPrice(0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 0x4200000000000000000000000000000000000006, 3000, 500000000000000 [5e14])
    │   └─ ← [Stop]
    └─ ← [Stop]

  [82688] PayPerViewTest::test_GetPaymentOptions_Success()
    ├─ [66424] PayPerView::getPaymentOptions(1)
    │   ├─ [40649] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Test Content 1", description: "Test description", category: 0, payPerViewPrice: 100000 [1e5], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["test", "content"], isReported: false, reportCount: 0 })
    │   ├─ [9162] PriceOracle::getETHPrice(100000 [1e5])
    │   │   ├─ [0] 0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a::quoteExactInputSingle(QuoteExactInputSingleParams({ tokenIn: 0x4200000000000000000000000000000000000006, tokenOut: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, amountIn: 1000000000000000000 [1e18], fee: 3000, sqrtPriceLimitX96: 0 }))
    │   │   │   └─ ← [Stop]
    │   │   └─ ← [Revert] EvmError: Revert
    │   └─ ← [Return] [0, 1, 2], [100000 [1e5], 0, 0]
    ├─ [0] VM::assertEq(3, 3) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(3, 3) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(100000 [1e5], 100000 [1e5]) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(false) [staticcall]
    │   └─ ← [Revert] assertion failed
    └─ ← [Revert] assertion failed

[PASS] test_HandleExternalRefund_NoPurchase() (gas: 52860)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [52860] PayPerViewTest::test_HandleExternalRefund_NoPurchase()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [27544] PayPerView::grantPaymentProcessorRole(PayPerViewTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496])
    │   ├─ emit RoleGranted(role: 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919, account: PayPerViewTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  No purchase found)
    │   └─ ← [Return]
    ├─ [9020] PayPerView::handleExternalRefund(0x00000000000000000000000000000000, 0x0000000000000000000000000000000000002001, 1)
    │   └─ ← [Revert] No purchase found
    └─ ← [Stop]

[PASS] test_HandleExternalRefund_Success() (gas: 665446)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [810346] PayPerViewTest::test_HandleExternalRefund_Success()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(PayPerView: [0x49C602668FE7a8B397255d678684323355754631], 100000 [1e5])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], value: 100000 [1e5])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [659380] PayPerView::purchaseContentDirect(1)
    │   ├─ [40649] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Test Content 1", description: "Test description", category: 0, payPerViewPrice: 100000 [1e5], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["test", "content"], isReported: false, reportCount: 0 })
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(100000 [1e5]) [staticcall]
    │   │   └─ ← [Return] 2500
    │   ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 1000000000 [1e9]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, PayPerView: [0x49C602668FE7a8B397255d678684323355754631]) [staticcall]
    │   │   └─ ← [Return] 100000 [1e5]
    │   ├─ [54088] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, PayPerView: [0x49C602668FE7a8B397255d678684323355754631], 100000 [1e5])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], value: 100000 [1e5])
    │   │   └─ ← [Return] true
    │   ├─ [73631] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 97500 [9.75e4], 0, 0)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 97500 [9.75e4], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ [70825] ContentRegistry::recordPurchase(1, 0x0000000000000000000000000000000000002001)
    │   │   ├─ emit ContentPurchased(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, price: 100000 [1e5], timestamp: 1)
    │   │   └─ ← [Stop]
    │   ├─ emit DirectPurchaseCompleted(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 100000 [1e5], platformFee: 2500, creatorEarning: 97500 [9.75e4])
    │   └─ ← [Stop]
    ├─ [3370] PayPerView::getPurchaseDetails(1, 0x0000000000000000000000000000000000002001) [staticcall]
    │   └─ ← [Return] PurchaseRecord({ hasPurchased: true, purchasePrice: 100000 [1e5], purchaseTime: 1, intentId: 0xa4fda21ee56bb9fbd55ff9f1c86373b6, paymentToken: 0x22a7C94543caa0e72439289e039B35a64C79A966, actualAmountPaid: 100000 [1e5] })
    ├─ [0] VM::prank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [27544] PayPerView::grantPaymentProcessorRole(PayPerViewTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496])
    │   ├─ emit RoleGranted(role: 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919, account: PayPerViewTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [0] VM::expectEmit(true, true, true, true)
    │   └─ ← [Return]
    ├─ emit ExternalRefundProcessed(intentId: 0xa4fda21ee56bb9fbd55ff9f1c86373b6, user: 0x0000000000000000000000000000000000002001, contentId: 1, amount: 100000 [1e5])
    ├─ [58528] PayPerView::handleExternalRefund(0xa4fda21ee56bb9fbd55ff9f1c86373b6, 0x0000000000000000000000000000000000002001, 1)
    │   ├─ [1232] CreatorRegistry::calculatePlatformFee(100000 [1e5]) [staticcall]
    │   │   └─ ← [Return] 2500
    │   ├─ [10649] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Test Content 1", description: "Test description", category: 0, payPerViewPrice: 100000 [1e5], isActive: true, createdAt: 1, purchaseCount: 1, tags: ["test", "content"], isReported: false, reportCount: 0 })
    │   ├─ [4181] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 0, -1, 0)
    │   │   └─ ← [Stop]
    │   ├─ emit ExternalRefundProcessed(intentId: 0xa4fda21ee56bb9fbd55ff9f1c86373b6, user: 0x0000000000000000000000000000000000002001, contentId: 1, amount: 100000 [1e5])
    │   └─ ← [Stop]
    ├─ [3370] PayPerView::getPurchaseDetails(1, 0x0000000000000000000000000000000000002001) [staticcall]
    │   └─ ← [Return] PurchaseRecord({ hasPurchased: true, purchasePrice: 100000 [1e5], purchaseTime: 1, intentId: 0xa4fda21ee56bb9fbd55ff9f1c86373b6, paymentToken: 0x22a7C94543caa0e72439289e039B35a64C79A966, actualAmountPaid: 100000 [1e5] })
    ├─ [0] VM::assertFalse(false) [staticcall]
    │   └─ ← [Return]
    └─ ← [Stop]

[PASS] test_MultiplePurchases_Success() (gas: 1132318)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [1157818] PayPerViewTest::test_MultiplePurchases_Success()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(PayPerView: [0x49C602668FE7a8B397255d678684323355754631], 300000 [3e5])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], value: 300000 [3e5])
    │   └─ ← [Return] true
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [659380] PayPerView::purchaseContentDirect(1)
    │   ├─ [40649] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Test Content 1", description: "Test description", category: 0, payPerViewPrice: 100000 [1e5], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["test", "content"], isReported: false, reportCount: 0 })
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(100000 [1e5]) [staticcall]
    │   │   └─ ← [Return] 2500
    │   ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 1000000000 [1e9]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, PayPerView: [0x49C602668FE7a8B397255d678684323355754631]) [staticcall]
    │   │   └─ ← [Return] 300000 [3e5]
    │   ├─ [54088] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, PayPerView: [0x49C602668FE7a8B397255d678684323355754631], 100000 [1e5])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], value: 100000 [1e5])
    │   │   └─ ← [Return] true
    │   ├─ [73631] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 97500 [9.75e4], 0, 0)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 97500 [9.75e4], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ [70825] ContentRegistry::recordPurchase(1, 0x0000000000000000000000000000000000002001)
    │   │   ├─ emit ContentPurchased(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, price: 100000 [1e5], timestamp: 1)
    │   │   └─ ← [Stop]
    │   ├─ emit DirectPurchaseCompleted(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 100000 [1e5], platformFee: 2500, creatorEarning: 97500 [9.75e4])
    │   └─ ← [Stop]
    ├─ [438480] PayPerView::purchaseContentDirect(2)
    │   ├─ [38649] ContentRegistry::getContent(2) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001002, ipfsHash: "QmTestHash123456789", title: "Test Content 2", description: "Test description", category: 0, payPerViewPrice: 200000 [2e5], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["test", "content"], isReported: false, reportCount: 0 })
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001002) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [1232] CreatorRegistry::calculatePlatformFee(200000 [2e5]) [staticcall]
    │   │   └─ ← [Return] 5000
    │   ├─ [940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 999900000 [9.999e8]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, PayPerView: [0x49C602668FE7a8B397255d678684323355754631]) [staticcall]
    │   │   └─ ← [Return] 200000 [2e5]
    │   ├─ [5488] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, PayPerView: [0x49C602668FE7a8B397255d678684323355754631], 200000 [2e5])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], value: 200000 [2e5])
    │   │   └─ ← [Return] true
    │   ├─ [49731] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001002, 195000 [1.95e5], 0, 0)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001002, amount: 195000 [1.95e5], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ [68825] ContentRegistry::recordPurchase(2, 0x0000000000000000000000000000000000002001)
    │   │   ├─ emit ContentPurchased(contentId: 2, buyer: 0x0000000000000000000000000000000000002001, price: 200000 [2e5], timestamp: 1)
    │   │   └─ ← [Stop]
    │   ├─ emit DirectPurchaseCompleted(contentId: 2, buyer: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001002, price: 200000 [2e5], platformFee: 5000, creatorEarning: 195000 [1.95e5])
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [1277] PayPerView::hasAccess(1, 0x0000000000000000000000000000000000002001) [staticcall]
    │   └─ ← [Return] true
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [1277] PayPerView::hasAccess(2, 0x0000000000000000000000000000000000002001) [staticcall]
    │   └─ ← [Return] true
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [2278] PayPerView::getUserPurchases(0x0000000000000000000000000000000000002001) [staticcall]
    │   └─ ← [Return] [1, 2]
    ├─ [0] VM::assertEq(2, 2) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(1, 1) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(2, 2) [staticcall]
    │   └─ ← [Return]
    └─ ← [Stop]

[PASS] test_PauseUnpause_Success() (gas: 702575)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [745175] PayPerViewTest::test_PauseUnpause_Success()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(PayPerView: [0x49C602668FE7a8B397255d678684323355754631], 100000 [1e5])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], value: 100000 [1e5])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [26232] PayPerView::pause()
    │   ├─ emit Paused(account: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [0] VM::expectRevert(custom error 0xf4844814)
    │   └─ ← [Return]
    ├─ [5767] PayPerView::purchaseContentDirect(1)
    │   └─ ← [Revert] EnforcedPause()
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [2328] PayPerView::unpause()
    │   ├─ emit Unpaused(account: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [657380] PayPerView::purchaseContentDirect(1)
    │   ├─ [40649] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Test Content 1", description: "Test description", category: 0, payPerViewPrice: 100000 [1e5], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["test", "content"], isReported: false, reportCount: 0 })
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(100000 [1e5]) [staticcall]
    │   │   └─ ← [Return] 2500
    │   ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 1000000000 [1e9]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, PayPerView: [0x49C602668FE7a8B397255d678684323355754631]) [staticcall]
    │   │   └─ ← [Return] 100000 [1e5]
    │   ├─ [54088] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, PayPerView: [0x49C602668FE7a8B397255d678684323355754631], 100000 [1e5])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], value: 100000 [1e5])
    │   │   └─ ← [Return] true
    │   ├─ [73631] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 97500 [9.75e4], 0, 0)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 97500 [9.75e4], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ [70825] ContentRegistry::recordPurchase(1, 0x0000000000000000000000000000000000002001)
    │   │   ├─ emit ContentPurchased(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, price: 100000 [1e5], timestamp: 1)
    │   │   └─ ← [Stop]
    │   ├─ emit DirectPurchaseCompleted(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 100000 [1e5], platformFee: 2500, creatorEarning: 97500 [9.75e4])
    │   └─ ← [Stop]
    ├─ [1277] PayPerView::hasAccess(1, 0x0000000000000000000000000000000000002001) [staticcall]
    │   └─ ← [Return] true
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    └─ ← [Stop]

[PASS] test_PaymentProcessorRole_Access() (gas: 835272)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [840872] PayPerViewTest::test_PaymentProcessorRole_Access()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [27544] PayPerView::grantPaymentProcessorRole(0x0000000000000000000000000000000000002001)
    │   ├─ emit RoleGranted(role: 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919, account: 0x0000000000000000000000000000000000002001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [231956] PayPerView::createPurchaseIntent(1, 0, 0x0000000000000000000000000000000000000000, 100)
    │   ├─ [40649] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Test Content 1", description: "Test description", category: 0, payPerViewPrice: 100000 [1e5], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["test", "content"], isReported: false, reportCount: 0 })
    │   ├─ [1055] PriceOracle::getTokenAmountForUSDC(0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 100000 [1e5], 0)
    │   │   └─ ← [Return] 100000 [1e5]
    │   ├─ [1445] PriceOracle::applySlippage(100000 [1e5], 100) [staticcall]
    │   │   └─ ← [Return] 101000 [1.01e5]
    │   ├─ emit ContentPurchaseInitiated(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, intentId: 0xa4fda21ee56bb9fbd55ff9f1c86373b6, paymentMethod: 0, usdcPrice: 100000 [1e5], expectedPaymentAmount: 101000 [1.01e5])
    │   └─ ← [Return] 0xa4fda21ee56bb9fbd55ff9f1c86373b6, 101000 [1.01e5], 3601
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [559214] PayPerView::completePurchase(0xa4fda21ee56bb9fbd55ff9f1c86373b6, 101000 [1.01e5], true, "")
    │   ├─ [10649] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Test Content 1", description: "Test description", category: 0, payPerViewPrice: 100000 [1e5], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["test", "content"], isReported: false, reportCount: 0 })
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(100000 [1e5]) [staticcall]
    │   │   └─ ← [Return] 2500
    │   ├─ [75631] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 97500 [9.75e4], 0, 0)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 97500 [9.75e4], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ [70825] ContentRegistry::recordPurchase(1, 0x0000000000000000000000000000000000002001)
    │   │   ├─ emit ContentPurchased(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, price: 100000 [1e5], timestamp: 1)
    │   │   └─ ← [Stop]
    │   ├─ emit ContentPurchaseCompleted(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, intentId: 0xa4fda21ee56bb9fbd55ff9f1c86373b6, usdcPrice: 100000 [1e5], actualAmountPaid: 101000 [1.01e5], paymentToken: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913)
    │   └─ ← [Stop]
    ├─ [1277] PayPerView::hasAccess(1, 0x0000000000000000000000000000000000002001) [staticcall]
    │   └─ ← [Return] true
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    └─ ← [Stop]

[PASS] test_PaymentProcessorRole_Unauthorized() (gas: 251845)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [254645] PayPerViewTest::test_PaymentProcessorRole_Unauthorized()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [231956] PayPerView::createPurchaseIntent(1, 0, 0x0000000000000000000000000000000000000000, 100)
    │   ├─ [40649] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Test Content 1", description: "Test description", category: 0, payPerViewPrice: 100000 [1e5], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["test", "content"], isReported: false, reportCount: 0 })
    │   ├─ [1055] PriceOracle::getTokenAmountForUSDC(0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 100000 [1e5], 0)
    │   │   └─ ← [Return] 100000 [1e5]
    │   ├─ [1445] PriceOracle::applySlippage(100000 [1e5], 100) [staticcall]
    │   │   └─ ← [Return] 101000 [1.01e5]
    │   ├─ emit ContentPurchaseInitiated(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, intentId: 0xa4fda21ee56bb9fbd55ff9f1c86373b6, paymentMethod: 0, usdcPrice: 100000 [1e5], expectedPaymentAmount: 101000 [1.01e5])
    │   └─ ← [Return] 0xa4fda21ee56bb9fbd55ff9f1c86373b6, 101000 [1.01e5], 3601
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000002002)
    │   └─ ← [Return]
    ├─ [0] VM::expectRevert(custom error 0xf4844814)
    │   └─ ← [Return]
    ├─ [4285] PayPerView::completePurchase(0xa4fda21ee56bb9fbd55ff9f1c86373b6, 101000 [1.01e5], true, "")
    │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x0000000000000000000000000000000000002002, 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919)
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    └─ ← [Stop]

[PASS] test_PurchaseContentDirect_AlreadyPurchased() (gas: 733301)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [756001] PayPerViewTest::test_PurchaseContentDirect_AlreadyPurchased()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(PayPerView: [0x49C602668FE7a8B397255d678684323355754631], 100000 [1e5])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], value: 100000 [1e5])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [659380] PayPerView::purchaseContentDirect(1)
    │   ├─ [40649] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Test Content 1", description: "Test description", category: 0, payPerViewPrice: 100000 [1e5], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["test", "content"], isReported: false, reportCount: 0 })
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(100000 [1e5]) [staticcall]
    │   │   └─ ← [Return] 2500
    │   ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 1000000000 [1e9]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, PayPerView: [0x49C602668FE7a8B397255d678684323355754631]) [staticcall]
    │   │   └─ ← [Return] 100000 [1e5]
    │   ├─ [54088] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, PayPerView: [0x49C602668FE7a8B397255d678684323355754631], 100000 [1e5])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], value: 100000 [1e5])
    │   │   └─ ← [Return] true
    │   ├─ [73631] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 97500 [9.75e4], 0, 0)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 97500 [9.75e4], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ [70825] ContentRegistry::recordPurchase(1, 0x0000000000000000000000000000000000002001)
    │   │   ├─ emit ContentPurchased(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, price: 100000 [1e5], timestamp: 1)
    │   │   └─ ← [Stop]
    │   ├─ emit DirectPurchaseCompleted(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 100000 [1e5], platformFee: 2500, creatorEarning: 97500 [9.75e4])
    │   └─ ← [Stop]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [23221] MockERC20::approve(PayPerView: [0x49C602668FE7a8B397255d678684323355754631], 100000 [1e5])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], value: 100000 [1e5])
    │   └─ ← [Return] true
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Already purchased)
    │   └─ ← [Return]
    ├─ [22178] PayPerView::purchaseContentDirect(1)
    │   ├─ [10649] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Test Content 1", description: "Test description", category: 0, payPerViewPrice: 100000 [1e5], isActive: true, createdAt: 1, purchaseCount: 1, tags: ["test", "content"], isReported: false, reportCount: 0 })
    │   └─ ← [Revert] Already purchased
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [1277] PayPerView::hasAccess(1, 0x0000000000000000000000000000000000002001) [staticcall]
    │   └─ ← [Return] true
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    └─ ← [Stop]

[PASS] test_PurchaseContentDirect_InactiveContent() (gas: 131275)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [138875] PayPerViewTest::test_PurchaseContentDirect_InactiveContent()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [32671] ContentRegistry::updateContent(1, 0, false)
    │   ├─ emit ContentUpdated(contentId: 1, newPrice: 0, isActive: false)
    │   └─ ← [Stop]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(PayPerView: [0x49C602668FE7a8B397255d678684323355754631], 100000 [1e5])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], value: 100000 [1e5])
    │   └─ ← [Return] true
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Content not active)
    │   └─ ← [Return]
    ├─ [47855] PayPerView::purchaseContentDirect(1)
    │   ├─ [32649] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Test Content 1", description: "Test description", category: 0, payPerViewPrice: 100000 [1e5], isActive: false, createdAt: 1, purchaseCount: 0, tags: ["test", "content"], isReported: false, reportCount: 0 })
    │   └─ ← [Revert] Content not active
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [3277] PayPerView::hasAccess(1, 0x0000000000000000000000000000000000002001) [staticcall]
    │   └─ ← [Return] false
    ├─ [0] VM::assertFalse(false) [staticcall]
    │   └─ ← [Return]
    └─ ← [Stop]

[PASS] test_PurchaseContentDirect_InsufficientAllowance() (gas: 126995)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [126995] PayPerViewTest::test_PurchaseContentDirect_InsufficientAllowance()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(PayPerView: [0x49C602668FE7a8B397255d678684323355754631], 99999 [9.999e4])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], value: 99999 [9.999e4])
    │   └─ ← [Return] true
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Insufficient allowance)
    │   └─ ← [Return]
    ├─ [76691] PayPerView::purchaseContentDirect(1)
    │   ├─ [40649] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Test Content 1", description: "Test description", category: 0, payPerViewPrice: 100000 [1e5], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["test", "content"], isReported: false, reportCount: 0 })
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(100000 [1e5]) [staticcall]
    │   │   └─ ← [Return] 2500
    │   ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 1000000000 [1e9]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, PayPerView: [0x49C602668FE7a8B397255d678684323355754631]) [staticcall]
    │   │   └─ ← [Return] 99999 [9.999e4]
    │   └─ ← [Revert] Insufficient allowance
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [3277] PayPerView::hasAccess(1, 0x0000000000000000000000000000000000002001) [staticcall]
    │   └─ ← [Return] false
    ├─ [0] VM::assertFalse(false) [staticcall]
    │   └─ ← [Return]
    └─ ← [Stop]

[FAIL: OwnableUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496)] test_PurchaseContentDirect_InsufficientBalance() (gas: 11032)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [39358787] PayPerViewTest::setUp()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [1138080] → new MockERC20@0x22a7C94543caa0e72439289e039B35a64C79A966
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 5327 bytes of code
    ├─ [47643] MockERC20::mint(0x0000000000000000000000000000000000003001, 1000000000000 [1e12])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000003001, value: 1000000000000 [1e12])
    │   └─ ← [Stop]
    ├─ [1084925] → new MockCommerceProtocol@0xe1796e76a573113CcEDB6D266ae099471117972D
    │   └─ ← [Return] 5419 bytes of code
    ├─ [1503810] → new MockQuoterV2@0xCd54ec27b8c42B24BF58244214B5999334C58959
    │   └─ ← [Return] 6617 bytes of code
    ├─ [0] console::log("Mock dependencies deployed:") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock USDC:", MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock Commerce Protocol:", MockCommerceProtocol: [0xe1796e76a573113CcEDB6D266ae099471117972D]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock Quoter:", MockQuoterV2: [0xCd54ec27b8c42B24BF58244214B5999334C58959]) [staticcall]
    │   └─ ← [Stop]
    ├─ [1710396] → new PriceOracle@0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 8313 bytes of code
    ├─ [4031410] → new CreatorRegistry@0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 19432 bytes of code
    ├─ [5389674] → new ContentRegistry@0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 25995 bytes of code
    ├─ [6590652] → new PayPerView@0x49C602668FE7a8B397255d678684323355754631
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xc89f08b49c068684bf15b77e68611a9f601e70d1f919059510bccd18e691e535, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 32302 bytes of code
    ├─ [7122434] → new SubscriptionManager@0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x1fa68478e710912de24d46d09a1aa735096685a61549eeb0fefb3693b245e69c, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x4a2743f41a15276dad6813e73326037e88c2a55ffdd5c4cab4ea1745629b0d34, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 34738 bytes of code
    ├─ [8485998] → new CommerceProtocolIntegration@0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x501c65bac3e4ac3ac69864ba85559de0249f52b20e002f1e1d1232fd4e169231, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xe2f4eaae4a9751e85a3e4a7b9587827a877f29914755229b07a7b2da98285f70, account: 0x0000000000000000000000000000000000003003, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 41307 bytes of code
    ├─ [0] console::log("Core contracts deployed:") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- CreatorRegistry:", CreatorRegistry: [0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- ContentRegistry:", ContentRegistry: [0x483a0eDa4d8856c61347B0F2e5B84a7af717c308]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- PayPerView:", PayPerView: [0x49C602668FE7a8B397255d678684323355754631]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- SubscriptionManager:", SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- CommerceIntegration:", CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B]) [staticcall]
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25566] ContentRegistry::grantPurchaseRecorderRole(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit RoleGranted(role: 0x9587bd5d64fd9020a2c3c45e38d0e7ca3330d50e4b4dd00bfe972ac5de3bc565, account: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25544] PayPerView::grantPaymentProcessorRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25544] SubscriptionManager::grantSubscriptionProcessorRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0x4a2743f41a15276dad6813e73326037e88c2a55ffdd5c4cab4ea1745629b0d34, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25735] CommerceProtocolIntegration::setPayPerView(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit ContractAddressUpdated(contractName: "PayPerView", oldAddress: 0x0000000000000000000000000000000000000000, newAddress: PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   └─ ← [Stop]
    ├─ [25756] CommerceProtocolIntegration::setSubscriptionManager(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   ├─ emit ContractAddressUpdated(contractName: "SubscriptionManager", oldAddress: 0x0000000000000000000000000000000000000000, newAddress: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   └─ ← [Stop]
    ├─ [0] console::log("Contract permissions configured") [staticcall]
    │   └─ ← [Stop]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000001001, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000001001, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000001001, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000001002, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000001002, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000001002, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000002001, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000002001, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000002001, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000002002, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000002002, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000002002, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [0] console::log("Test users set up with initial balances") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [174504] CreatorRegistry::registerCreator(1000000 [1e6], "Default profile")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000001001, subscriptionPrice: 1000000 [1e6], timestamp: 1, profileData: "Default profile")
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001002)
    │   └─ ← [Return]
    ├─ [150604] CreatorRegistry::registerCreator(1000000 [1e6], "Default profile")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000001002, subscriptionPrice: 1000000 [1e6], timestamp: 1, profileData: "Default profile")
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [574377] ContentRegistry::registerContent("QmTestHash123456789", "Test Content 1", "Test description", 0, 100000 [1e5], ["test", "content"])
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 1, creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Test Content 1", category: 0, payPerViewPrice: 100000 [1e5], timestamp: 1)
    │   └─ ← [Return] 1
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001002)
    │   └─ ← [Return]
    ├─ [411077] ContentRegistry::registerContent("QmTestHash123456789", "Test Content 2", "Test description", 0, 200000 [2e5], ["test", "content"])
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001002) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001002, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 2, creator: 0x0000000000000000000000000000000000001002, ipfsHash: "QmTestHash123456789", title: "Test Content 2", category: 0, payPerViewPrice: 200000 [2e5], timestamp: 1)
    │   └─ ← [Return] 2
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [462] PriceOracle::WETH() [staticcall]
    │   └─ ← [Return] 0x4200000000000000000000000000000000000006
    ├─ [396] PriceOracle::USDC() [staticcall]
    │   └─ ← [Return] 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913
    ├─ [1482] MockQuoterV2::setMockPrice(0x4200000000000000000000000000000000000006, 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 3000, 2000000000 [2e9])
    │   └─ ← [Stop]
    ├─ [396] PriceOracle::USDC() [staticcall]
    │   └─ ← [Return] 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913
    ├─ [462] PriceOracle::WETH() [staticcall]
    │   └─ ← [Return] 0x4200000000000000000000000000000000000006
    ├─ [1482] MockQuoterV2::setMockPrice(0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 0x4200000000000000000000000000000000000006, 3000, 500000000000000 [5e14])
    │   └─ ← [Stop]
    └─ ← [Stop]

  [11032] PayPerViewTest::test_PurchaseContentDirect_InsufficientBalance()
    ├─ [3202] MockERC20::forceBalance(0x0000000000000000000000000000000000002001, 99999 [9.999e4])
    │   └─ ← [Revert] OwnableUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496)
    └─ ← [Revert] OwnableUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496)

[FAIL: Error != expected error: InvalidContentId() != Content not found] test_PurchaseContentDirect_NonExistentContent() (gas: 56451)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [39358787] PayPerViewTest::setUp()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [1138080] → new MockERC20@0x22a7C94543caa0e72439289e039B35a64C79A966
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 5327 bytes of code
    ├─ [47643] MockERC20::mint(0x0000000000000000000000000000000000003001, 1000000000000 [1e12])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000003001, value: 1000000000000 [1e12])
    │   └─ ← [Stop]
    ├─ [1084925] → new MockCommerceProtocol@0xe1796e76a573113CcEDB6D266ae099471117972D
    │   └─ ← [Return] 5419 bytes of code
    ├─ [1503810] → new MockQuoterV2@0xCd54ec27b8c42B24BF58244214B5999334C58959
    │   └─ ← [Return] 6617 bytes of code
    ├─ [0] console::log("Mock dependencies deployed:") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock USDC:", MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock Commerce Protocol:", MockCommerceProtocol: [0xe1796e76a573113CcEDB6D266ae099471117972D]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock Quoter:", MockQuoterV2: [0xCd54ec27b8c42B24BF58244214B5999334C58959]) [staticcall]
    │   └─ ← [Stop]
    ├─ [1710396] → new PriceOracle@0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 8313 bytes of code
    ├─ [4031410] → new CreatorRegistry@0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 19432 bytes of code
    ├─ [5389674] → new ContentRegistry@0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 25995 bytes of code
    ├─ [6590652] → new PayPerView@0x49C602668FE7a8B397255d678684323355754631
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xc89f08b49c068684bf15b77e68611a9f601e70d1f919059510bccd18e691e535, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 32302 bytes of code
    ├─ [7122434] → new SubscriptionManager@0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x1fa68478e710912de24d46d09a1aa735096685a61549eeb0fefb3693b245e69c, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x4a2743f41a15276dad6813e73326037e88c2a55ffdd5c4cab4ea1745629b0d34, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 34738 bytes of code
    ├─ [8485998] → new CommerceProtocolIntegration@0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x501c65bac3e4ac3ac69864ba85559de0249f52b20e002f1e1d1232fd4e169231, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xe2f4eaae4a9751e85a3e4a7b9587827a877f29914755229b07a7b2da98285f70, account: 0x0000000000000000000000000000000000003003, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 41307 bytes of code
    ├─ [0] console::log("Core contracts deployed:") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- CreatorRegistry:", CreatorRegistry: [0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- ContentRegistry:", ContentRegistry: [0x483a0eDa4d8856c61347B0F2e5B84a7af717c308]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- PayPerView:", PayPerView: [0x49C602668FE7a8B397255d678684323355754631]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- SubscriptionManager:", SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- CommerceIntegration:", CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B]) [staticcall]
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25566] ContentRegistry::grantPurchaseRecorderRole(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit RoleGranted(role: 0x9587bd5d64fd9020a2c3c45e38d0e7ca3330d50e4b4dd00bfe972ac5de3bc565, account: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25544] PayPerView::grantPaymentProcessorRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25544] SubscriptionManager::grantSubscriptionProcessorRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0x4a2743f41a15276dad6813e73326037e88c2a55ffdd5c4cab4ea1745629b0d34, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25735] CommerceProtocolIntegration::setPayPerView(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit ContractAddressUpdated(contractName: "PayPerView", oldAddress: 0x0000000000000000000000000000000000000000, newAddress: PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   └─ ← [Stop]
    ├─ [25756] CommerceProtocolIntegration::setSubscriptionManager(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   ├─ emit ContractAddressUpdated(contractName: "SubscriptionManager", oldAddress: 0x0000000000000000000000000000000000000000, newAddress: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   └─ ← [Stop]
    ├─ [0] console::log("Contract permissions configured") [staticcall]
    │   └─ ← [Stop]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000001001, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000001001, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000001001, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000001002, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000001002, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000001002, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000002001, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000002001, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000002001, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000002002, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000002002, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000002002, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [0] console::log("Test users set up with initial balances") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [174504] CreatorRegistry::registerCreator(1000000 [1e6], "Default profile")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000001001, subscriptionPrice: 1000000 [1e6], timestamp: 1, profileData: "Default profile")
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001002)
    │   └─ ← [Return]
    ├─ [150604] CreatorRegistry::registerCreator(1000000 [1e6], "Default profile")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000001002, subscriptionPrice: 1000000 [1e6], timestamp: 1, profileData: "Default profile")
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [574377] ContentRegistry::registerContent("QmTestHash123456789", "Test Content 1", "Test description", 0, 100000 [1e5], ["test", "content"])
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 1, creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Test Content 1", category: 0, payPerViewPrice: 100000 [1e5], timestamp: 1)
    │   └─ ← [Return] 1
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001002)
    │   └─ ← [Return]
    ├─ [411077] ContentRegistry::registerContent("QmTestHash123456789", "Test Content 2", "Test description", 0, 200000 [2e5], ["test", "content"])
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001002) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001002, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 2, creator: 0x0000000000000000000000000000000000001002, ipfsHash: "QmTestHash123456789", title: "Test Content 2", category: 0, payPerViewPrice: 200000 [2e5], timestamp: 1)
    │   └─ ← [Return] 2
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [462] PriceOracle::WETH() [staticcall]
    │   └─ ← [Return] 0x4200000000000000000000000000000000000006
    ├─ [396] PriceOracle::USDC() [staticcall]
    │   └─ ← [Return] 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913
    ├─ [1482] MockQuoterV2::setMockPrice(0x4200000000000000000000000000000000000006, 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 3000, 2000000000 [2e9])
    │   └─ ← [Stop]
    ├─ [396] PriceOracle::USDC() [staticcall]
    │   └─ ← [Return] 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913
    ├─ [462] PriceOracle::WETH() [staticcall]
    │   └─ ← [Return] 0x4200000000000000000000000000000000000006
    ├─ [1482] MockQuoterV2::setMockPrice(0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 0x4200000000000000000000000000000000000006, 3000, 500000000000000 [5e14])
    │   └─ ← [Stop]
    └─ ← [Stop]

  [56451] PayPerViewTest::test_PurchaseContentDirect_NonExistentContent()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(PayPerView: [0x49C602668FE7a8B397255d678684323355754631], 100000 [1e5])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], value: 100000 [1e5])
    │   └─ ← [Return] true
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Content not found)
    │   └─ ← [Return]
    ├─ [13581] PayPerView::purchaseContentDirect(999)
    │   ├─ [2980] ContentRegistry::getContent(999) [staticcall]
    │   │   └─ ← [Revert] InvalidContentId()
    │   └─ ← [Revert] InvalidContentId()
    └─ ← [Revert] Error != expected error: InvalidContentId() != Content not found

[PASS] test_PurchaseContentDirect_Success() (gas: 722156)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [744856] PayPerViewTest::test_PurchaseContentDirect_Success()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(PayPerView: [0x49C602668FE7a8B397255d678684323355754631], 100000 [1e5])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], value: 100000 [1e5])
    │   └─ ← [Return] true
    ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] 1000000000 [1e9]
    ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   └─ ← [Return] 1000000000 [1e9]
    ├─ [2940] MockERC20::balanceOf(PayPerView: [0x49C602668FE7a8B397255d678684323355754631]) [staticcall]
    │   └─ ← [Return] 0
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [0] VM::expectEmit(true, true, true, true)
    │   └─ ← [Return]
    ├─ emit DirectPurchaseCompleted(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 100000 [1e5], platformFee: 2500, creatorEarning: 97500 [9.75e4])
    ├─ [655380] PayPerView::purchaseContentDirect(1)
    │   ├─ [40649] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Test Content 1", description: "Test description", category: 0, payPerViewPrice: 100000 [1e5], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["test", "content"], isReported: false, reportCount: 0 })
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(100000 [1e5]) [staticcall]
    │   │   └─ ← [Return] 2500
    │   ├─ [940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 1000000000 [1e9]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, PayPerView: [0x49C602668FE7a8B397255d678684323355754631]) [staticcall]
    │   │   └─ ← [Return] 100000 [1e5]
    │   ├─ [52088] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, PayPerView: [0x49C602668FE7a8B397255d678684323355754631], 100000 [1e5])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], value: 100000 [1e5])
    │   │   └─ ← [Return] true
    │   ├─ [73631] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 97500 [9.75e4], 0, 0)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 97500 [9.75e4], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ [70825] ContentRegistry::recordPurchase(1, 0x0000000000000000000000000000000000002001)
    │   │   ├─ emit ContentPurchased(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, price: 100000 [1e5], timestamp: 1)
    │   │   └─ ← [Stop]
    │   ├─ emit DirectPurchaseCompleted(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 100000 [1e5], platformFee: 2500, creatorEarning: 97500 [9.75e4])
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [1277] PayPerView::hasAccess(1, 0x0000000000000000000000000000000000002001) [staticcall]
    │   └─ ← [Return] true
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   └─ ← [Return] 999900000 [9.999e8]
    ├─ [0] VM::assertEq(999900000 [9.999e8], 999900000 [9.999e8]) [staticcall]
    │   └─ ← [Return]
    ├─ [940] MockERC20::balanceOf(PayPerView: [0x49C602668FE7a8B397255d678684323355754631]) [staticcall]
    │   └─ ← [Return] 100000 [1e5]
    ├─ [0] VM::assertEq(100000 [1e5], 100000 [1e5]) [staticcall]
    │   └─ ← [Return]
    ├─ [1261] PayPerView::getCreatorEarnings(0x0000000000000000000000000000000000001001) [staticcall]
    │   └─ ← [Return] 97500 [9.75e4], 97500 [9.75e4]
    ├─ [0] VM::assertEq(97500 [9.75e4], 97500 [9.75e4]) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(97500 [9.75e4], 97500 [9.75e4]) [staticcall]
    │   └─ ← [Return]
    ├─ [3370] PayPerView::getPurchaseDetails(1, 0x0000000000000000000000000000000000002001) [staticcall]
    │   └─ ← [Return] PurchaseRecord({ hasPurchased: true, purchasePrice: 100000 [1e5], purchaseTime: 1, intentId: 0xa4fda21ee56bb9fbd55ff9f1c86373b6, paymentToken: 0x22a7C94543caa0e72439289e039B35a64C79A966, actualAmountPaid: 100000 [1e5] })
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(100000 [1e5], 100000 [1e5]) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(100000 [1e5], 100000 [1e5]) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966], MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966]) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [1861] PayPerView::getUserPurchases(0x0000000000000000000000000000000000002001) [staticcall]
    │   └─ ← [Return] [1]
    ├─ [0] VM::assertEq(1, 1) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(1, 1) [staticcall]
    │   └─ ← [Return]
    └─ ← [Stop]

[PASS] test_PurchaseIsolation_Success() (gas: 1058803)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [1104203] PayPerViewTest::test_PurchaseIsolation_Success()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(PayPerView: [0x49C602668FE7a8B397255d678684323355754631], 100000 [1e5])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], value: 100000 [1e5])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002002)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(PayPerView: [0x49C602668FE7a8B397255d678684323355754631], 100000 [1e5])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002002, spender: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], value: 100000 [1e5])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [659380] PayPerView::purchaseContentDirect(1)
    │   ├─ [40649] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Test Content 1", description: "Test description", category: 0, payPerViewPrice: 100000 [1e5], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["test", "content"], isReported: false, reportCount: 0 })
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(100000 [1e5]) [staticcall]
    │   │   └─ ← [Return] 2500
    │   ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 1000000000 [1e9]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, PayPerView: [0x49C602668FE7a8B397255d678684323355754631]) [staticcall]
    │   │   └─ ← [Return] 100000 [1e5]
    │   ├─ [54088] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, PayPerView: [0x49C602668FE7a8B397255d678684323355754631], 100000 [1e5])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], value: 100000 [1e5])
    │   │   └─ ← [Return] true
    │   ├─ [73631] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 97500 [9.75e4], 0, 0)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 97500 [9.75e4], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ [70825] ContentRegistry::recordPurchase(1, 0x0000000000000000000000000000000000002001)
    │   │   ├─ emit ContentPurchased(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, price: 100000 [1e5], timestamp: 1)
    │   │   └─ ← [Stop]
    │   ├─ emit DirectPurchaseCompleted(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 100000 [1e5], platformFee: 2500, creatorEarning: 97500 [9.75e4])
    │   └─ ← [Stop]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002002)
    │   └─ ← [Return]
    ├─ [349580] PayPerView::purchaseContentDirect(1)
    │   ├─ [10649] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Test Content 1", description: "Test description", category: 0, payPerViewPrice: 100000 [1e5], isActive: true, createdAt: 1, purchaseCount: 1, tags: ["test", "content"], isReported: false, reportCount: 0 })
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [1232] CreatorRegistry::calculatePlatformFee(100000 [1e5]) [staticcall]
    │   │   └─ ← [Return] 2500
    │   ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002002) [staticcall]
    │   │   └─ ← [Return] 1000000000 [1e9]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002002, PayPerView: [0x49C602668FE7a8B397255d678684323355754631]) [staticcall]
    │   │   └─ ← [Return] 100000 [1e5]
    │   ├─ [8288] MockERC20::transferFrom(0x0000000000000000000000000000000000002002, PayPerView: [0x49C602668FE7a8B397255d678684323355754631], 100000 [1e5])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002002, to: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], value: 100000 [1e5])
    │   │   └─ ← [Return] true
    │   ├─ [5931] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 97500 [9.75e4], 0, 0)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 97500 [9.75e4], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ [27025] ContentRegistry::recordPurchase(1, 0x0000000000000000000000000000000000002002)
    │   │   ├─ emit ContentPurchased(contentId: 1, buyer: 0x0000000000000000000000000000000000002002, price: 100000 [1e5], timestamp: 1)
    │   │   └─ ← [Stop]
    │   ├─ emit DirectPurchaseCompleted(contentId: 1, buyer: 0x0000000000000000000000000000000000002002, creator: 0x0000000000000000000000000000000000001001, price: 100000 [1e5], platformFee: 2500, creatorEarning: 97500 [9.75e4])
    │   └─ ← [Stop]
    ├─ [1277] PayPerView::hasAccess(1, 0x0000000000000000000000000000000000002001) [staticcall]
    │   └─ ← [Return] true
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [1277] PayPerView::hasAccess(1, 0x0000000000000000000000000000000000002002) [staticcall]
    │   └─ ← [Return] true
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [3370] PayPerView::getPurchaseDetails(1, 0x0000000000000000000000000000000000002001) [staticcall]
    │   └─ ← [Return] PurchaseRecord({ hasPurchased: true, purchasePrice: 100000 [1e5], purchaseTime: 1, intentId: 0xa4fda21ee56bb9fbd55ff9f1c86373b6, paymentToken: 0x22a7C94543caa0e72439289e039B35a64C79A966, actualAmountPaid: 100000 [1e5] })
    ├─ [3370] PayPerView::getPurchaseDetails(1, 0x0000000000000000000000000000000000002002) [staticcall]
    │   └─ ← [Return] PurchaseRecord({ hasPurchased: true, purchasePrice: 100000 [1e5], purchaseTime: 1, intentId: 0x9899d1ef291de013593532da524f4719, paymentToken: 0x22a7C94543caa0e72439289e039B35a64C79A966, actualAmountPaid: 100000 [1e5] })
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(100000 [1e5], 100000 [1e5]) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(100000 [1e5], 100000 [1e5]) [staticcall]
    │   └─ ← [Return]
    └─ ← [Stop]

[FAIL: Error != expected error: Invalid intent ID format != Content not active] test_RecordExternalPurchase_InactiveContent() (gas: 94531)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [39358787] PayPerViewTest::setUp()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [1138080] → new MockERC20@0x22a7C94543caa0e72439289e039B35a64C79A966
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 5327 bytes of code
    ├─ [47643] MockERC20::mint(0x0000000000000000000000000000000000003001, 1000000000000 [1e12])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000003001, value: 1000000000000 [1e12])
    │   └─ ← [Stop]
    ├─ [1084925] → new MockCommerceProtocol@0xe1796e76a573113CcEDB6D266ae099471117972D
    │   └─ ← [Return] 5419 bytes of code
    ├─ [1503810] → new MockQuoterV2@0xCd54ec27b8c42B24BF58244214B5999334C58959
    │   └─ ← [Return] 6617 bytes of code
    ├─ [0] console::log("Mock dependencies deployed:") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock USDC:", MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock Commerce Protocol:", MockCommerceProtocol: [0xe1796e76a573113CcEDB6D266ae099471117972D]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock Quoter:", MockQuoterV2: [0xCd54ec27b8c42B24BF58244214B5999334C58959]) [staticcall]
    │   └─ ← [Stop]
    ├─ [1710396] → new PriceOracle@0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 8313 bytes of code
    ├─ [4031410] → new CreatorRegistry@0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 19432 bytes of code
    ├─ [5389674] → new ContentRegistry@0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 25995 bytes of code
    ├─ [6590652] → new PayPerView@0x49C602668FE7a8B397255d678684323355754631
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xc89f08b49c068684bf15b77e68611a9f601e70d1f919059510bccd18e691e535, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 32302 bytes of code
    ├─ [7122434] → new SubscriptionManager@0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x1fa68478e710912de24d46d09a1aa735096685a61549eeb0fefb3693b245e69c, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x4a2743f41a15276dad6813e73326037e88c2a55ffdd5c4cab4ea1745629b0d34, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 34738 bytes of code
    ├─ [8485998] → new CommerceProtocolIntegration@0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x501c65bac3e4ac3ac69864ba85559de0249f52b20e002f1e1d1232fd4e169231, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xe2f4eaae4a9751e85a3e4a7b9587827a877f29914755229b07a7b2da98285f70, account: 0x0000000000000000000000000000000000003003, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 41307 bytes of code
    ├─ [0] console::log("Core contracts deployed:") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- CreatorRegistry:", CreatorRegistry: [0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- ContentRegistry:", ContentRegistry: [0x483a0eDa4d8856c61347B0F2e5B84a7af717c308]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- PayPerView:", PayPerView: [0x49C602668FE7a8B397255d678684323355754631]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- SubscriptionManager:", SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- CommerceIntegration:", CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B]) [staticcall]
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25566] ContentRegistry::grantPurchaseRecorderRole(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit RoleGranted(role: 0x9587bd5d64fd9020a2c3c45e38d0e7ca3330d50e4b4dd00bfe972ac5de3bc565, account: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25544] PayPerView::grantPaymentProcessorRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25544] SubscriptionManager::grantSubscriptionProcessorRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0x4a2743f41a15276dad6813e73326037e88c2a55ffdd5c4cab4ea1745629b0d34, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25735] CommerceProtocolIntegration::setPayPerView(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit ContractAddressUpdated(contractName: "PayPerView", oldAddress: 0x0000000000000000000000000000000000000000, newAddress: PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   └─ ← [Stop]
    ├─ [25756] CommerceProtocolIntegration::setSubscriptionManager(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   ├─ emit ContractAddressUpdated(contractName: "SubscriptionManager", oldAddress: 0x0000000000000000000000000000000000000000, newAddress: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   └─ ← [Stop]
    ├─ [0] console::log("Contract permissions configured") [staticcall]
    │   └─ ← [Stop]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000001001, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000001001, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000001001, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000001002, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000001002, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000001002, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000002001, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000002001, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000002001, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000002002, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000002002, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000002002, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [0] console::log("Test users set up with initial balances") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [174504] CreatorRegistry::registerCreator(1000000 [1e6], "Default profile")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000001001, subscriptionPrice: 1000000 [1e6], timestamp: 1, profileData: "Default profile")
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001002)
    │   └─ ← [Return]
    ├─ [150604] CreatorRegistry::registerCreator(1000000 [1e6], "Default profile")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000001002, subscriptionPrice: 1000000 [1e6], timestamp: 1, profileData: "Default profile")
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [574377] ContentRegistry::registerContent("QmTestHash123456789", "Test Content 1", "Test description", 0, 100000 [1e5], ["test", "content"])
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 1, creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Test Content 1", category: 0, payPerViewPrice: 100000 [1e5], timestamp: 1)
    │   └─ ← [Return] 1
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001002)
    │   └─ ← [Return]
    ├─ [411077] ContentRegistry::registerContent("QmTestHash123456789", "Test Content 2", "Test description", 0, 200000 [2e5], ["test", "content"])
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001002) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001002, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 2, creator: 0x0000000000000000000000000000000000001002, ipfsHash: "QmTestHash123456789", title: "Test Content 2", category: 0, payPerViewPrice: 200000 [2e5], timestamp: 1)
    │   └─ ← [Return] 2
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [462] PriceOracle::WETH() [staticcall]
    │   └─ ← [Return] 0x4200000000000000000000000000000000000006
    ├─ [396] PriceOracle::USDC() [staticcall]
    │   └─ ← [Return] 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913
    ├─ [1482] MockQuoterV2::setMockPrice(0x4200000000000000000000000000000000000006, 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 3000, 2000000000 [2e9])
    │   └─ ← [Stop]
    ├─ [396] PriceOracle::USDC() [staticcall]
    │   └─ ← [Return] 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913
    ├─ [462] PriceOracle::WETH() [staticcall]
    │   └─ ← [Return] 0x4200000000000000000000000000000000000006
    ├─ [1482] MockQuoterV2::setMockPrice(0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 0x4200000000000000000000000000000000000006, 3000, 500000000000000 [5e14])
    │   └─ ← [Stop]
    └─ ← [Stop]

  [94531] PayPerViewTest::test_RecordExternalPurchase_InactiveContent()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [32671] ContentRegistry::updateContent(1, 0, false)
    │   ├─ emit ContentUpdated(contentId: 1, newPrice: 0, isActive: false)
    │   └─ ← [Stop]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [27544] PayPerView::grantPaymentProcessorRole(PayPerViewTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496])
    │   ├─ emit RoleGranted(role: 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919, account: PayPerViewTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Content not active)
    │   └─ ← [Return]
    ├─ [7334] PayPerView::recordExternalPurchase(1, 0x0000000000000000000000000000000000002001, 0x00000000000000000000000000000000, 100000 [1e5], MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966], 100000 [1e5])
    │   └─ ← [Revert] Invalid intent ID format
    └─ ← [Revert] Error != expected error: Invalid intent ID format != Content not active

[PASS] test_RecordExternalPurchase_Success() (gas: 654453)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [657253] PayPerViewTest::test_RecordExternalPurchase_Success()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [27544] PayPerView::grantPaymentProcessorRole(PayPerViewTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496])
    │   ├─ emit RoleGranted(role: 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919, account: PayPerViewTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [0] VM::expectEmit(true, true, false, true)
    │   └─ ← [Return]
    ├─ emit ExternalPurchaseRecorded(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, intentId: 0x561bd84a4d203d1bf8c6c8aa801686d2, usdcPrice: 100000 [1e5], paymentToken: MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966], actualAmountPaid: 100000 [1e5])
    ├─ [595075] PayPerView::recordExternalPurchase(1, 0x0000000000000000000000000000000000002001, 0x561bd84a4d203d1bf8c6c8aa801686d2, 100000 [1e5], MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966], 100000 [1e5])
    │   ├─ [40649] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Test Content 1", description: "Test description", category: 0, payPerViewPrice: 100000 [1e5], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["test", "content"], isReported: false, reportCount: 0 })
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(100000 [1e5]) [staticcall]
    │   │   └─ ← [Return] 2500
    │   ├─ [70825] ContentRegistry::recordPurchase(1, 0x0000000000000000000000000000000000002001)
    │   │   ├─ emit ContentPurchased(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, price: 100000 [1e5], timestamp: 1)
    │   │   └─ ← [Stop]
    │   ├─ [98001] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 97500 [9.75e4], 1, 0)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 97500 [9.75e4], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ emit ExternalPurchaseRecorded(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, intentId: 0x561bd84a4d203d1bf8c6c8aa801686d2, usdcPrice: 100000 [1e5], paymentToken: MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966], actualAmountPaid: 100000 [1e5])
    │   └─ ← [Stop]
    ├─ [1277] PayPerView::hasAccess(1, 0x0000000000000000000000000000000000002001) [staticcall]
    │   └─ ← [Return] true
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [3370] PayPerView::getPurchaseDetails(1, 0x0000000000000000000000000000000000002001) [staticcall]
    │   └─ ← [Return] PurchaseRecord({ hasPurchased: true, purchasePrice: 100000 [1e5], purchaseTime: 1, intentId: 0x561bd84a4d203d1bf8c6c8aa801686d2, paymentToken: 0x22a7C94543caa0e72439289e039B35a64C79A966, actualAmountPaid: 100000 [1e5] })
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(100000 [1e5], 100000 [1e5]) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(100000 [1e5], 100000 [1e5]) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(0x561bd84a4d203d1bf8c6c8aa801686d200000000000000000000000000000000, 0x561bd84a4d203d1bf8c6c8aa801686d200000000000000000000000000000000) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::assertEq(MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966], MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966]) [staticcall]
    │   └─ ← [Return]
    └─ ← [Stop]

[PASS] test_RecordExternalPurchase_Unauthorized() (gas: 20448)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [20448] PayPerViewTest::test_RecordExternalPurchase_Unauthorized()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [0] VM::expectRevert(custom error 0xf4844814)
    │   └─ ← [Return]
    ├─ [4210] PayPerView::recordExternalPurchase(1, 0x0000000000000000000000000000000000002001, 0x00000000000000000000000000000000, 100000 [1e5], MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966], 100000 [1e5])
    │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x0000000000000000000000000000000000002001, 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919)
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    └─ ← [Stop]

[PASS] test_RequestRefund_AlreadyRefunded() (gas: 881335)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [926735] PayPerViewTest::test_RequestRefund_AlreadyRefunded()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(PayPerView: [0x49C602668FE7a8B397255d678684323355754631], 100000 [1e5])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], value: 100000 [1e5])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [659380] PayPerView::purchaseContentDirect(1)
    │   ├─ [40649] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Test Content 1", description: "Test description", category: 0, payPerViewPrice: 100000 [1e5], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["test", "content"], isReported: false, reportCount: 0 })
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(100000 [1e5]) [staticcall]
    │   │   └─ ← [Return] 2500
    │   ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 1000000000 [1e9]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, PayPerView: [0x49C602668FE7a8B397255d678684323355754631]) [staticcall]
    │   │   └─ ← [Return] 100000 [1e5]
    │   ├─ [54088] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, PayPerView: [0x49C602668FE7a8B397255d678684323355754631], 100000 [1e5])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], value: 100000 [1e5])
    │   │   └─ ← [Return] true
    │   ├─ [73631] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 97500 [9.75e4], 0, 0)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 97500 [9.75e4], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ [70825] ContentRegistry::recordPurchase(1, 0x0000000000000000000000000000000000002001)
    │   │   ├─ emit ContentPurchased(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, price: 100000 [1e5], timestamp: 1)
    │   │   └─ ← [Stop]
    │   ├─ emit DirectPurchaseCompleted(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 100000 [1e5], platformFee: 2500, creatorEarning: 97500 [9.75e4])
    │   └─ ← [Stop]
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [213825] PayPerView::requestRefund(1, "First refund")
    │   ├─ emit RefundProcessed(intentId: 0x176e5286dda089291c83c28efe144112, user: 0x0000000000000000000000000000000000002001, amount: 100000 [1e5], reason: "First refund")
    │   └─ ← [Stop]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Not refund eligible)
    │   └─ ← [Return]
    ├─ [5251] PayPerView::requestRefund(1, "Second refund")
    │   └─ ← [Revert] Not refund eligible
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    └─ ← [Stop]

[PASS] test_RequestRefund_NoPurchase() (gas: 24815)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [24815] PayPerViewTest::test_RequestRefund_NoPurchase()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  No purchase found)
    │   └─ ← [Return]
    ├─ [11093] PayPerView::requestRefund(1, "Test reason")
    │   └─ ← [Revert] No purchase found
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    └─ ← [Stop]

[PASS] test_RequestRefund_Success() (gas: 880680)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [926080] PayPerViewTest::test_RequestRefund_Success()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(PayPerView: [0x49C602668FE7a8B397255d678684323355754631], 100000 [1e5])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], value: 100000 [1e5])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [659380] PayPerView::purchaseContentDirect(1)
    │   ├─ [40649] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Test Content 1", description: "Test description", category: 0, payPerViewPrice: 100000 [1e5], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["test", "content"], isReported: false, reportCount: 0 })
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(100000 [1e5]) [staticcall]
    │   │   └─ ← [Return] 2500
    │   ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 1000000000 [1e9]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, PayPerView: [0x49C602668FE7a8B397255d678684323355754631]) [staticcall]
    │   │   └─ ← [Return] 100000 [1e5]
    │   ├─ [54088] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, PayPerView: [0x49C602668FE7a8B397255d678684323355754631], 100000 [1e5])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], value: 100000 [1e5])
    │   │   └─ ← [Return] true
    │   ├─ [73631] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 97500 [9.75e4], 0, 0)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 97500 [9.75e4], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ [70825] ContentRegistry::recordPurchase(1, 0x0000000000000000000000000000000000002001)
    │   │   ├─ emit ContentPurchased(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, price: 100000 [1e5], timestamp: 1)
    │   │   └─ ← [Stop]
    │   ├─ emit DirectPurchaseCompleted(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 100000 [1e5], platformFee: 2500, creatorEarning: 97500 [9.75e4])
    │   └─ ← [Stop]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [213825] PayPerView::requestRefund(1, "Not satisfied with content")
    │   ├─ emit RefundProcessed(intentId: 0xbd58ac635a48b54ec16d5ca460a97200, user: 0x0000000000000000000000000000000000002001, amount: 100000 [1e5], reason: "Not satisfied with content")
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [3370] PayPerView::getPurchaseDetails(1, 0x0000000000000000000000000000000000002001) [staticcall]
    │   └─ ← [Return] PurchaseRecord({ hasPurchased: true, purchasePrice: 100000 [1e5], purchaseTime: 1, intentId: 0xa4fda21ee56bb9fbd55ff9f1c86373b6, paymentToken: 0x22a7C94543caa0e72439289e039B35a64C79A966, actualAmountPaid: 100000 [1e5] })
    ├─ [0] VM::assertFalse(false) [staticcall]
    │   └─ ← [Return]
    └─ ← [Stop]

[PASS] test_RequestRefund_WindowExpired() (gas: 689510)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [712210] PayPerViewTest::test_RequestRefund_WindowExpired()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(PayPerView: [0x49C602668FE7a8B397255d678684323355754631], 100000 [1e5])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], value: 100000 [1e5])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [659380] PayPerView::purchaseContentDirect(1)
    │   ├─ [40649] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Test Content 1", description: "Test description", category: 0, payPerViewPrice: 100000 [1e5], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["test", "content"], isReported: false, reportCount: 0 })
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(100000 [1e5]) [staticcall]
    │   │   └─ ← [Return] 2500
    │   ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 1000000000 [1e9]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, PayPerView: [0x49C602668FE7a8B397255d678684323355754631]) [staticcall]
    │   │   └─ ← [Return] 100000 [1e5]
    │   ├─ [54088] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, PayPerView: [0x49C602668FE7a8B397255d678684323355754631], 100000 [1e5])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], value: 100000 [1e5])
    │   │   └─ ← [Return] true
    │   ├─ [73631] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 97500 [9.75e4], 0, 0)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 97500 [9.75e4], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ [70825] ContentRegistry::recordPurchase(1, 0x0000000000000000000000000000000000002001)
    │   │   ├─ emit ContentPurchased(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, price: 100000 [1e5], timestamp: 1)
    │   │   └─ ← [Stop]
    │   ├─ emit DirectPurchaseCompleted(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 100000 [1e5], platformFee: 2500, creatorEarning: 97500 [9.75e4])
    │   └─ ← [Stop]
    ├─ [0] VM::warp(90001 [9e4])
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  Refund window expired)
    │   └─ ← [Return]
    ├─ [5382] PayPerView::requestRefund(1, "Too late")
    │   └─ ← [Revert] Refund window expired
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    └─ ← [Stop]

[PASS] test_WithdrawEarnings_NoEarnings() (gas: 19119)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [19119] PayPerViewTest::test_WithdrawEarnings_NoEarnings()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [0] VM::expectRevert(custom error 0xf28dceb3:  No earnings to withdraw)
    │   └─ ← [Return]
    ├─ [7796] PayPerView::withdrawEarnings()
    │   └─ ← [Revert] No earnings to withdraw
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    └─ ← [Stop]

[FAIL: OwnableUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496)] test_WithdrawEarnings_Success() (gas: 706448)
Logs:
  Mock dependencies deployed:
  - Mock USDC: 0x22a7C94543caa0e72439289e039B35a64C79A966
  - Mock Commerce Protocol: 0xe1796e76a573113CcEDB6D266ae099471117972D
  - Mock Quoter: 0xCd54ec27b8c42B24BF58244214B5999334C58959
  Core contracts deployed:
  - CreatorRegistry: 0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
  - ContentRegistry: 0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
  - PayPerView: 0x49C602668FE7a8B397255d678684323355754631
  - SubscriptionManager: 0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
  - CommerceIntegration: 0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
  Contract permissions configured
  Test users set up with initial balances

Traces:
  [39358787] PayPerViewTest::setUp()
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000003001)
    │   └─ ← [Return]
    ├─ [1138080] → new MockERC20@0x22a7C94543caa0e72439289e039B35a64C79A966
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 5327 bytes of code
    ├─ [47643] MockERC20::mint(0x0000000000000000000000000000000000003001, 1000000000000 [1e12])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000003001, value: 1000000000000 [1e12])
    │   └─ ← [Stop]
    ├─ [1084925] → new MockCommerceProtocol@0xe1796e76a573113CcEDB6D266ae099471117972D
    │   └─ ← [Return] 5419 bytes of code
    ├─ [1503810] → new MockQuoterV2@0xCd54ec27b8c42B24BF58244214B5999334C58959
    │   └─ ← [Return] 6617 bytes of code
    ├─ [0] console::log("Mock dependencies deployed:") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock USDC:", MockERC20: [0x22a7C94543caa0e72439289e039B35a64C79A966]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock Commerce Protocol:", MockCommerceProtocol: [0xe1796e76a573113CcEDB6D266ae099471117972D]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- Mock Quoter:", MockQuoterV2: [0xCd54ec27b8c42B24BF58244214B5999334C58959]) [staticcall]
    │   └─ ← [Stop]
    ├─ [1710396] → new PriceOracle@0x2DAc9e8d1275ECC440a35FA04E17995bddAd6B61
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 8313 bytes of code
    ├─ [4031410] → new CreatorRegistry@0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 19432 bytes of code
    ├─ [5389674] → new ContentRegistry@0x483a0eDa4d8856c61347B0F2e5B84a7af717c308
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 25995 bytes of code
    ├─ [6590652] → new PayPerView@0x49C602668FE7a8B397255d678684323355754631
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xc89f08b49c068684bf15b77e68611a9f601e70d1f919059510bccd18e691e535, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 32302 bytes of code
    ├─ [7122434] → new SubscriptionManager@0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x1fa68478e710912de24d46d09a1aa735096685a61549eeb0fefb3693b245e69c, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x4a2743f41a15276dad6813e73326037e88c2a55ffdd5c4cab4ea1745629b0d34, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 34738 bytes of code
    ├─ [8485998] → new CommerceProtocolIntegration@0x21CF4161e41997dcb5F326618abF8D9039bC1b5B
    │   ├─ emit OwnershipTransferred(previousOwner: 0x0000000000000000000000000000000000000000, newOwner: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x0000000000000000000000000000000000000000000000000000000000000000, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0x501c65bac3e4ac3ac69864ba85559de0249f52b20e002f1e1d1232fd4e169231, account: 0x0000000000000000000000000000000000003001, sender: 0x0000000000000000000000000000000000003001)
    │   ├─ emit RoleGranted(role: 0xe2f4eaae4a9751e85a3e4a7b9587827a877f29914755229b07a7b2da98285f70, account: 0x0000000000000000000000000000000000003003, sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Return] 41307 bytes of code
    ├─ [0] console::log("Core contracts deployed:") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- CreatorRegistry:", CreatorRegistry: [0xb2AbA3Bc597A0A84438094a65352D0e4B7dd92d4]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- ContentRegistry:", ContentRegistry: [0x483a0eDa4d8856c61347B0F2e5B84a7af717c308]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- PayPerView:", PayPerView: [0x49C602668FE7a8B397255d678684323355754631]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- SubscriptionManager:", SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb]) [staticcall]
    │   └─ ← [Stop]
    ├─ [0] console::log("- CommerceIntegration:", CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B]) [staticcall]
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25522] CreatorRegistry::grantPlatformRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25566] ContentRegistry::grantPurchaseRecorderRole(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit RoleGranted(role: 0x9587bd5d64fd9020a2c3c45e38d0e7ca3330d50e4b4dd00bfe972ac5de3bc565, account: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25544] PayPerView::grantPaymentProcessorRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0xd7d8b7014b7ed36eb085c9e3e427b642d74cab75ecefda8a757042e63ec59919, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25544] SubscriptionManager::grantSubscriptionProcessorRole(CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B])
    │   ├─ emit RoleGranted(role: 0x4a2743f41a15276dad6813e73326037e88c2a55ffdd5c4cab4ea1745629b0d34, account: CommerceProtocolIntegration: [0x21CF4161e41997dcb5F326618abF8D9039bC1b5B], sender: 0x0000000000000000000000000000000000003001)
    │   └─ ← [Stop]
    ├─ [25735] CommerceProtocolIntegration::setPayPerView(PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   ├─ emit ContractAddressUpdated(contractName: "PayPerView", oldAddress: 0x0000000000000000000000000000000000000000, newAddress: PayPerView: [0x49C602668FE7a8B397255d678684323355754631])
    │   └─ ← [Stop]
    ├─ [25756] CommerceProtocolIntegration::setSubscriptionManager(SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   ├─ emit ContractAddressUpdated(contractName: "SubscriptionManager", oldAddress: 0x0000000000000000000000000000000000000000, newAddress: SubscriptionManager: [0xe8AC70d2b71f604B4C6a97dF31Be19EE13Dae5bb])
    │   └─ ← [Stop]
    ├─ [0] console::log("Contract permissions configured") [staticcall]
    │   └─ ← [Stop]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000001001, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000001001, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000001001, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000001002, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000001002, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000001002, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000002001, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000002001, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000002001, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [25743] MockERC20::mint(0x0000000000000000000000000000000000002002, 1000000000 [1e9])
    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: 0x0000000000000000000000000000000000002002, value: 1000000000 [1e9])
    │   └─ ← [Stop]
    ├─ [0] VM::deal(0x0000000000000000000000000000000000002002, 10000000000000000000 [1e19])
    │   └─ ← [Return]
    ├─ [0] console::log("Test users set up with initial balances") [staticcall]
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [174504] CreatorRegistry::registerCreator(1000000 [1e6], "Default profile")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000001001, subscriptionPrice: 1000000 [1e6], timestamp: 1, profileData: "Default profile")
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001002)
    │   └─ ← [Return]
    ├─ [150604] CreatorRegistry::registerCreator(1000000 [1e6], "Default profile")
    │   ├─ emit CreatorRegistered(creator: 0x0000000000000000000000000000000000001002, subscriptionPrice: 1000000 [1e6], timestamp: 1, profileData: "Default profile")
    │   └─ ← [Stop]
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::assertTrue(true) [staticcall]
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001001)
    │   └─ ← [Return]
    ├─ [574377] ContentRegistry::registerContent("QmTestHash123456789", "Test Content 1", "Test description", 0, 100000 [1e5], ["test", "content"])
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 1, creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Test Content 1", category: 0, payPerViewPrice: 100000 [1e5], timestamp: 1)
    │   └─ ← [Return] 1
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [0] VM::startPrank(0x0000000000000000000000000000000000001002)
    │   └─ ← [Return]
    ├─ [411077] ContentRegistry::registerContent("QmTestHash123456789", "Test Content 2", "Test description", 0, 200000 [2e5], ["test", "content"])
    │   ├─ [1009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001002) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3868] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001002, 0, 1, 0)
    │   │   └─ ← [Revert] AccessControlUnauthorizedAccount(0x483a0eDa4d8856c61347B0F2e5B84a7af717c308, 0x308cde6e77eeb20854449cfdfcb05fbdb9f7c478a875c1417621ec9a3dacb510)
    │   ├─ emit ContentRegistered(contentId: 2, creator: 0x0000000000000000000000000000000000001002, ipfsHash: "QmTestHash123456789", title: "Test Content 2", category: 0, payPerViewPrice: 200000 [2e5], timestamp: 1)
    │   └─ ← [Return] 2
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return]
    ├─ [462] PriceOracle::WETH() [staticcall]
    │   └─ ← [Return] 0x4200000000000000000000000000000000000006
    ├─ [396] PriceOracle::USDC() [staticcall]
    │   └─ ← [Return] 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913
    ├─ [1482] MockQuoterV2::setMockPrice(0x4200000000000000000000000000000000000006, 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 3000, 2000000000 [2e9])
    │   └─ ← [Stop]
    ├─ [396] PriceOracle::USDC() [staticcall]
    │   └─ ← [Return] 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913
    ├─ [462] PriceOracle::WETH() [staticcall]
    │   └─ ← [Return] 0x4200000000000000000000000000000000000006
    ├─ [1482] MockQuoterV2::setMockPrice(0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913, 0x4200000000000000000000000000000000000006, 3000, 500000000000000 [5e14])
    │   └─ ← [Stop]
    └─ ← [Stop]

  [706448] PayPerViewTest::test_WithdrawEarnings_Success()
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [25321] MockERC20::approve(PayPerView: [0x49C602668FE7a8B397255d678684323355754631], 100000 [1e5])
    │   ├─ emit Approval(owner: 0x0000000000000000000000000000000000002001, spender: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], value: 100000 [1e5])
    │   └─ ← [Return] true
    ├─ [0] VM::prank(0x0000000000000000000000000000000000002001)
    │   └─ ← [Return]
    ├─ [659380] PayPerView::purchaseContentDirect(1)
    │   ├─ [40649] ContentRegistry::getContent(1) [staticcall]
    │   │   └─ ← [Return] Content({ creator: 0x0000000000000000000000000000000000001001, ipfsHash: "QmTestHash123456789", title: "Test Content 1", description: "Test description", category: 0, payPerViewPrice: 100000 [1e5], isActive: true, createdAt: 1, purchaseCount: 0, tags: ["test", "content"], isReported: false, reportCount: 0 })
    │   ├─ [3009] CreatorRegistry::isRegisteredCreator(0x0000000000000000000000000000000000001001) [staticcall]
    │   │   └─ ← [Return] true
    │   ├─ [3232] CreatorRegistry::calculatePlatformFee(100000 [1e5]) [staticcall]
    │   │   └─ ← [Return] 2500
    │   ├─ [2940] MockERC20::balanceOf(0x0000000000000000000000000000000000002001) [staticcall]
    │   │   └─ ← [Return] 1000000000 [1e9]
    │   ├─ [1180] MockERC20::allowance(0x0000000000000000000000000000000000002001, PayPerView: [0x49C602668FE7a8B397255d678684323355754631]) [staticcall]
    │   │   └─ ← [Return] 100000 [1e5]
    │   ├─ [54088] MockERC20::transferFrom(0x0000000000000000000000000000000000002001, PayPerView: [0x49C602668FE7a8B397255d678684323355754631], 100000 [1e5])
    │   │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000002001, to: PayPerView: [0x49C602668FE7a8B397255d678684323355754631], value: 100000 [1e5])
    │   │   └─ ← [Return] true
    │   ├─ [73631] CreatorRegistry::updateCreatorStats(0x0000000000000000000000000000000000001001, 97500 [9.75e4], 0, 0)
    │   │   ├─ emit CreatorEarningsUpdated(creator: 0x0000000000000000000000000000000000001001, amount: 97500 [9.75e4], source: "platform_activity")
    │   │   └─ ← [Stop]
    │   ├─ [70825] ContentRegistry::recordPurchase(1, 0x0000000000000000000000000000000000002001)
    │   │   ├─ emit ContentPurchased(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, price: 100000 [1e5], timestamp: 1)
    │   │   └─ ← [Stop]
    │   ├─ emit DirectPurchaseCompleted(contentId: 1, buyer: 0x0000000000000000000000000000000000002001, creator: 0x0000000000000000000000000000000000001001, price: 100000 [1e5], platformFee: 2500, creatorEarning: 97500 [9.75e4])
    │   └─ ← [Stop]
    ├─ [1225] MockERC20::mint(PayPerView: [0x49C602668FE7a8B397255d678684323355754631], 97500 [9.75e4])
    │   └─ ← [Revert] OwnableUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496)
    └─ ← [Revert] OwnableUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496)

Suite result: FAILED. 24 passed; 12 failed; 0 skipped; finished in 9.66ms (21.38ms CPU time)

Ran 1 test suite in 296.89ms (9.66ms CPU time): 24 tests passed, 12 failed, 0 skipped (36 total tests)

Failing tests:
Encountered 12 failing tests in test/unit/PayPerView.t.sol:PayPerViewTest
[FAIL: next call did not revert as expected] test_CompletePurchase_InsufficientPayment() (gas: 837913)
[FAIL: log != expected log] test_CompletePurchase_Success() (gas: 846525)
[FAIL: EvmError: Revert] test_CreatePurchaseIntent_ETH() (gas: 110779)
[FAIL: Error != expected error: InvalidContentId() != Content not found] test_CreatePurchaseIntent_NonExistentContent() (gas: 25839)
[FAIL: EvmError: Revert] test_CreatePurchaseIntent_OtherToken() (gas: 147074)
[FAIL: assertion failed: 101000 != 100000] test_CreatePurchaseIntent_USDC() (gas: 253742)
[FAIL: Error != expected error: InvalidContentId() != Content not found] test_GetPaymentOptions_NonExistentContent() (gas: 14822)
[FAIL: assertion failed] test_GetPaymentOptions_Success() (gas: 82688)
[FAIL: OwnableUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496)] test_PurchaseContentDirect_InsufficientBalance() (gas: 11032)
[FAIL: Error != expected error: InvalidContentId() != Content not found] test_PurchaseContentDirect_NonExistentContent() (gas: 56451)
[FAIL: Error != expected error: Invalid intent ID format != Content not active] test_RecordExternalPurchase_InactiveContent() (gas: 94531)
[FAIL: OwnableUnauthorizedAccount(0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496)] test_WithdrawEarnings_Success() (gas: 706448)

Encountered a total of 12 failing tests, 24 tests succeeded
